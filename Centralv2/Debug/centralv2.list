
centralv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080033a8  080033a8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a8  080033a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000010  080033c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080033c0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a732  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000184b  00000000  00000000  0002a76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  0002bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002cb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000172e4  00000000  00000000  0002d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009013  00000000  00000000  00044984  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088ecd  00000000  00000000  0004d997  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  000d68e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080031b4 	.word	0x080031b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080031b4 	.word	0x080031b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ff73 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9db 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fb0f 	bl	800077c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 fab9 	bl	80006d4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000162:	f000 fa69 	bl	8000638 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000166:	f000 fa19 	bl	800059c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800016a:	f000 fadd 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  eSystemState NextState;
  uint8_t RSSI_value[3] = {0,0,0};
 800016e:	2300      	movs	r3, #0
 8000170:	743b      	strb	r3, [r7, #16]
 8000172:	2300      	movs	r3, #0
 8000174:	747b      	strb	r3, [r7, #17]
 8000176:	2300      	movs	r3, #0
 8000178:	74bb      	strb	r3, [r7, #18]
  uint8_t estado_inhi[3] = {0,0,0};
 800017a:	2300      	movs	r3, #0
 800017c:	733b      	strb	r3, [r7, #12]
 800017e:	2300      	movs	r3, #0
 8000180:	737b      	strb	r3, [r7, #13]
 8000182:	2300      	movs	r3, #0
 8000184:	73bb      	strb	r3, [r7, #14]
  uint8_t cRx = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	75bb      	strb	r3, [r7, #22]
  uint8_t err = 0, eRx = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	74fb      	strb	r3, [r7, #19]
 800018e:	2300      	movs	r3, #0
 8000190:	757b      	strb	r3, [r7, #21]
  uint8_t i = 0;
 8000192:	2300      	movs	r3, #0
 8000194:	753b      	strb	r3, [r7, #20]
  char in[3] = {0, 0, 0};
 8000196:	2300      	movs	r3, #0
 8000198:	723b      	strb	r3, [r7, #8]
 800019a:	2300      	movs	r3, #0
 800019c:	727b      	strb	r3, [r7, #9]
 800019e:	2300      	movs	r3, #0
 80001a0:	72bb      	strb	r3, [r7, #10]
  char ch[2] = {0, 0};
 80001a2:	2300      	movs	r3, #0
 80001a4:	713b      	strb	r3, [r7, #4]
 80001a6:	2300      	movs	r3, #0
 80001a8:	717b      	strb	r3, [r7, #5]
  uint8_t salud_nodos[3] = {1, 1, 1};
 80001aa:	4ab3      	ldr	r2, [pc, #716]	; (8000478 <main+0x32c>)
 80001ac:	463b      	mov	r3, r7
 80001ae:	6812      	ldr	r2, [r2, #0]
 80001b0:	4611      	mov	r1, r2
 80001b2:	8019      	strh	r1, [r3, #0]
 80001b4:	3302      	adds	r3, #2
 80001b6:	0c12      	lsrs	r2, r2, #16
 80001b8:	701a      	strb	r2, [r3, #0]


  NextState = Reset_State;
 80001ba:	2302      	movs	r3, #2
 80001bc:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // DE - Comunicacion RS485 - Se coloca en bajo para estar en modo recepcion
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c4:	48ad      	ldr	r0, [pc, #692]	; (800047c <main+0x330>)
 80001c6:	f001 fa9b 	bl	8001700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // RE - Comunicacion RS485 - Se coloca en bajo para escuchar todo el tiempoc
 80001ca:	2200      	movs	r2, #0
 80001cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d0:	48aa      	ldr	r0, [pc, #680]	; (800047c <main+0x330>)
 80001d2:	f001 fa95 	bl	8001700 <HAL_GPIO_WritePin>


  GSM_Init();
 80001d6:	f000 fb4f 	bl	8000878 <GSM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(NextState){
 80001da:	7dfb      	ldrb	r3, [r7, #23]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d05a      	beq.n	8000296 <main+0x14a>
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	f000 8140 	beq.w	8000466 <main+0x31a>
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	f040 8187 	bne.w	80004fa <main+0x3ae>
	  	  case No_Inhibicion_State:

	  		  HAL_Delay(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f000 ff87 	bl	8001100 <HAL_Delay>

	  		  ch[1] = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	717b      	strb	r3, [r7, #5]
	  		  in[2] = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	72bb      	strb	r3, [r7, #10]

			  if 	  (cRx == 0) ch[0] = 'A';
 80001fa:	7dbb      	ldrb	r3, [r7, #22]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d102      	bne.n	8000206 <main+0xba>
 8000200:	2341      	movs	r3, #65	; 0x41
 8000202:	713b      	strb	r3, [r7, #4]
 8000204:	e00a      	b.n	800021c <main+0xd0>
			  else if (cRx == 1) ch[0] = 'B';
 8000206:	7dbb      	ldrb	r3, [r7, #22]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d102      	bne.n	8000212 <main+0xc6>
 800020c:	2342      	movs	r3, #66	; 0x42
 800020e:	713b      	strb	r3, [r7, #4]
 8000210:	e004      	b.n	800021c <main+0xd0>
			  else if (cRx == 2) ch[0] = 'C';
 8000212:	7dbb      	ldrb	r3, [r7, #22]
 8000214:	2b02      	cmp	r3, #2
 8000216:	d101      	bne.n	800021c <main+0xd0>
 8000218:	2343      	movs	r3, #67	; 0x43
 800021a:	713b      	strb	r3, [r7, #4]


	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000222:	4896      	ldr	r0, [pc, #600]	; (800047c <main+0x330>)
 8000224:	f001 fa6c 	bl	8001700 <HAL_GPIO_WritePin>
	  		  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 2, 50);
 8000228:	1d39      	adds	r1, r7, #4
 800022a:	2332      	movs	r3, #50	; 0x32
 800022c:	2202      	movs	r2, #2
 800022e:	4894      	ldr	r0, [pc, #592]	; (8000480 <main+0x334>)
 8000230:	f002 fb1d 	bl	800286e <HAL_UART_Transmit>
	  		  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 8000234:	f107 0108 	add.w	r1, r7, #8
 8000238:	230a      	movs	r3, #10
 800023a:	2201      	movs	r2, #1
 800023c:	4890      	ldr	r0, [pc, #576]	; (8000480 <main+0x334>)
 800023e:	f002 fba8 	bl	8002992 <HAL_UART_Receive>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000248:	488c      	ldr	r0, [pc, #560]	; (800047c <main+0x330>)
 800024a:	f001 fa59 	bl	8001700 <HAL_GPIO_WritePin>

	  		  in[2] = in[1] = in[0] = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	723b      	strb	r3, [r7, #8]
 8000252:	7a3b      	ldrb	r3, [r7, #8]
 8000254:	727b      	strb	r3, [r7, #9]
 8000256:	7a7b      	ldrb	r3, [r7, #9]
 8000258:	72bb      	strb	r3, [r7, #10]
	  		  err = HAL_UART_Receive(&huart1, (uint8_t *)in, 3, 200);
 800025a:	f107 0108 	add.w	r1, r7, #8
 800025e:	23c8      	movs	r3, #200	; 0xc8
 8000260:	2203      	movs	r2, #3
 8000262:	4887      	ldr	r0, [pc, #540]	; (8000480 <main+0x334>)
 8000264:	f002 fb95 	bl	8002992 <HAL_UART_Receive>
 8000268:	4603      	mov	r3, r0
 800026a:	74fb      	strb	r3, [r7, #19]


	  		  if (cRx >= 2)
 800026c:	7dbb      	ldrb	r3, [r7, #22]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d902      	bls.n	8000278 <main+0x12c>
	  			  cRx = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	75bb      	strb	r3, [r7, #22]
 8000276:	e002      	b.n	800027e <main+0x132>

	  		  else cRx++;
 8000278:	7dbb      	ldrb	r3, [r7, #22]
 800027a:	3301      	adds	r3, #1
 800027c:	75bb      	strb	r3, [r7, #22]

	  		  if(in[2] == 1 || in[2] == 2){
 800027e:	7abb      	ldrb	r3, [r7, #10]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d003      	beq.n	800028c <main+0x140>
 8000284:	7abb      	ldrb	r3, [r7, #10]
 8000286:	2b02      	cmp	r3, #2
 8000288:	f040 813a 	bne.w	8000500 <main+0x3b4>
	  			  NextState = Inhibicion_State;
 800028c:	2301      	movs	r3, #1
 800028e:	75fb      	strb	r3, [r7, #23]
	  			  cRx = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	75bb      	strb	r3, [r7, #22]
	  		  }

	  		  break;
 8000294:	e134      	b.n	8000500 <main+0x3b4>

	  	  case Inhibicion_State:

	  		  HAL_Delay(200);
 8000296:	20c8      	movs	r0, #200	; 0xc8
 8000298:	f000 ff32 	bl	8001100 <HAL_Delay>

	  		  ch[1] = 1;
 800029c:	2301      	movs	r3, #1
 800029e:	717b      	strb	r3, [r7, #5]
	  		  in[0] = in[1] = in[2] = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	72bb      	strb	r3, [r7, #10]
 80002a4:	7abb      	ldrb	r3, [r7, #10]
 80002a6:	727b      	strb	r3, [r7, #9]
 80002a8:	7a7b      	ldrb	r3, [r7, #9]
 80002aa:	723b      	strb	r3, [r7, #8]


	  		  if 	  (cRx == 0) ch[0] = 'A';
 80002ac:	7dbb      	ldrb	r3, [r7, #22]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <main+0x16c>
 80002b2:	2341      	movs	r3, #65	; 0x41
 80002b4:	713b      	strb	r3, [r7, #4]
 80002b6:	e00a      	b.n	80002ce <main+0x182>
	  		  else if (cRx == 1) ch[0] = 'B';
 80002b8:	7dbb      	ldrb	r3, [r7, #22]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d102      	bne.n	80002c4 <main+0x178>
 80002be:	2342      	movs	r3, #66	; 0x42
 80002c0:	713b      	strb	r3, [r7, #4]
 80002c2:	e004      	b.n	80002ce <main+0x182>
	  		  else if (cRx == 2) ch[0] = 'C';
 80002c4:	7dbb      	ldrb	r3, [r7, #22]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d101      	bne.n	80002ce <main+0x182>
 80002ca:	2343      	movs	r3, #67	; 0x43
 80002cc:	713b      	strb	r3, [r7, #4]

	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80002ce:	2201      	movs	r2, #1
 80002d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d4:	4869      	ldr	r0, [pc, #420]	; (800047c <main+0x330>)
 80002d6:	f001 fa13 	bl	8001700 <HAL_GPIO_WritePin>

	  		  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 2, 50);
 80002da:	1d39      	adds	r1, r7, #4
 80002dc:	2332      	movs	r3, #50	; 0x32
 80002de:	2202      	movs	r2, #2
 80002e0:	4867      	ldr	r0, [pc, #412]	; (8000480 <main+0x334>)
 80002e2:	f002 fac4 	bl	800286e <HAL_UART_Transmit>
	  		  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 80002e6:	f107 0108 	add.w	r1, r7, #8
 80002ea:	230a      	movs	r3, #10
 80002ec:	2201      	movs	r2, #1
 80002ee:	4864      	ldr	r0, [pc, #400]	; (8000480 <main+0x334>)
 80002f0:	f002 fb4f 	bl	8002992 <HAL_UART_Receive>

	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fa:	4860      	ldr	r0, [pc, #384]	; (800047c <main+0x330>)
 80002fc:	f001 fa00 	bl	8001700 <HAL_GPIO_WritePin>

			  in[2] = in[1] = in[0] = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	723b      	strb	r3, [r7, #8]
 8000304:	7a3b      	ldrb	r3, [r7, #8]
 8000306:	727b      	strb	r3, [r7, #9]
 8000308:	7a7b      	ldrb	r3, [r7, #9]
 800030a:	72bb      	strb	r3, [r7, #10]

			  err = HAL_UART_Receive(&huart1, (uint8_t *)in, 3, 100);
 800030c:	f107 0108 	add.w	r1, r7, #8
 8000310:	2364      	movs	r3, #100	; 0x64
 8000312:	2203      	movs	r2, #3
 8000314:	485a      	ldr	r0, [pc, #360]	; (8000480 <main+0x334>)
 8000316:	f002 fb3c 	bl	8002992 <HAL_UART_Receive>
 800031a:	4603      	mov	r3, r0
 800031c:	74fb      	strb	r3, [r7, #19]


			  if(cRx == 0 && in[0] == 'A'){
 800031e:	7dbb      	ldrb	r3, [r7, #22]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d11b      	bne.n	800035c <main+0x210>
 8000324:	7a3b      	ldrb	r3, [r7, #8]
 8000326:	2b41      	cmp	r3, #65	; 0x41
 8000328:	d118      	bne.n	800035c <main+0x210>
				  if (in[1] > 120 || in[1] < 10) RSSI_value[0] = 0;
 800032a:	7a7b      	ldrb	r3, [r7, #9]
 800032c:	2b78      	cmp	r3, #120	; 0x78
 800032e:	d802      	bhi.n	8000336 <main+0x1ea>
 8000330:	7a7b      	ldrb	r3, [r7, #9]
 8000332:	2b09      	cmp	r3, #9
 8000334:	d802      	bhi.n	800033c <main+0x1f0>
 8000336:	2300      	movs	r3, #0
 8000338:	743b      	strb	r3, [r7, #16]
 800033a:	e001      	b.n	8000340 <main+0x1f4>
				  else RSSI_value[0] = in[1];
 800033c:	7a7b      	ldrb	r3, [r7, #9]
 800033e:	743b      	strb	r3, [r7, #16]

				  if (in[2] > 2) estado_inhi[0] = 0;
 8000340:	7abb      	ldrb	r3, [r7, #10]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d902      	bls.n	800034c <main+0x200>
 8000346:	2300      	movs	r3, #0
 8000348:	733b      	strb	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <main+0x204>
				  else estado_inhi[0] = in[2];
 800034c:	7abb      	ldrb	r3, [r7, #10]
 800034e:	733b      	strb	r3, [r7, #12]
				  eRx = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	757b      	strb	r3, [r7, #21]
				  cRx++;
 8000354:	7dbb      	ldrb	r3, [r7, #22]
 8000356:	3301      	adds	r3, #1
 8000358:	75bb      	strb	r3, [r7, #22]
 800035a:	e03c      	b.n	80003d6 <main+0x28a>

			  }
			  else if(cRx == 1 && in[0] == 'B'){
 800035c:	7dbb      	ldrb	r3, [r7, #22]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d11b      	bne.n	800039a <main+0x24e>
 8000362:	7a3b      	ldrb	r3, [r7, #8]
 8000364:	2b42      	cmp	r3, #66	; 0x42
 8000366:	d118      	bne.n	800039a <main+0x24e>
				  if (in[1] > 120 || in[1] < 10) RSSI_value[1] = 0;
 8000368:	7a7b      	ldrb	r3, [r7, #9]
 800036a:	2b78      	cmp	r3, #120	; 0x78
 800036c:	d802      	bhi.n	8000374 <main+0x228>
 800036e:	7a7b      	ldrb	r3, [r7, #9]
 8000370:	2b09      	cmp	r3, #9
 8000372:	d802      	bhi.n	800037a <main+0x22e>
 8000374:	2300      	movs	r3, #0
 8000376:	747b      	strb	r3, [r7, #17]
 8000378:	e001      	b.n	800037e <main+0x232>
				  else RSSI_value[1] = in[1];
 800037a:	7a7b      	ldrb	r3, [r7, #9]
 800037c:	747b      	strb	r3, [r7, #17]

				  if (in[2] > 2) estado_inhi[1] = 0;
 800037e:	7abb      	ldrb	r3, [r7, #10]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d902      	bls.n	800038a <main+0x23e>
 8000384:	2300      	movs	r3, #0
 8000386:	737b      	strb	r3, [r7, #13]
 8000388:	e001      	b.n	800038e <main+0x242>
				  else estado_inhi[1] = in[2];
 800038a:	7abb      	ldrb	r3, [r7, #10]
 800038c:	737b      	strb	r3, [r7, #13]
				  eRx = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	757b      	strb	r3, [r7, #21]
				  cRx++;
 8000392:	7dbb      	ldrb	r3, [r7, #22]
 8000394:	3301      	adds	r3, #1
 8000396:	75bb      	strb	r3, [r7, #22]
 8000398:	e01d      	b.n	80003d6 <main+0x28a>
			  }
			  else if(cRx == 2 && in[0] == 'C'){
 800039a:	7dbb      	ldrb	r3, [r7, #22]
 800039c:	2b02      	cmp	r3, #2
 800039e:	d11a      	bne.n	80003d6 <main+0x28a>
 80003a0:	7a3b      	ldrb	r3, [r7, #8]
 80003a2:	2b43      	cmp	r3, #67	; 0x43
 80003a4:	d117      	bne.n	80003d6 <main+0x28a>
				  if (in[1] > 120 || in[1] < 10) RSSI_value[2] = 0;
 80003a6:	7a7b      	ldrb	r3, [r7, #9]
 80003a8:	2b78      	cmp	r3, #120	; 0x78
 80003aa:	d802      	bhi.n	80003b2 <main+0x266>
 80003ac:	7a7b      	ldrb	r3, [r7, #9]
 80003ae:	2b09      	cmp	r3, #9
 80003b0:	d802      	bhi.n	80003b8 <main+0x26c>
 80003b2:	2300      	movs	r3, #0
 80003b4:	74bb      	strb	r3, [r7, #18]
 80003b6:	e001      	b.n	80003bc <main+0x270>
				  else RSSI_value[2] = in[1];
 80003b8:	7a7b      	ldrb	r3, [r7, #9]
 80003ba:	74bb      	strb	r3, [r7, #18]

				  if (in[2] > 2) estado_inhi[2] = 0;
 80003bc:	7abb      	ldrb	r3, [r7, #10]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d902      	bls.n	80003c8 <main+0x27c>
 80003c2:	2300      	movs	r3, #0
 80003c4:	73bb      	strb	r3, [r7, #14]
 80003c6:	e001      	b.n	80003cc <main+0x280>
				  else estado_inhi[2] = in[2];
 80003c8:	7abb      	ldrb	r3, [r7, #10]
 80003ca:	73bb      	strb	r3, [r7, #14]
				  eRx = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	757b      	strb	r3, [r7, #21]
				  cRx++;
 80003d0:	7dbb      	ldrb	r3, [r7, #22]
 80003d2:	3301      	adds	r3, #1
 80003d4:	75bb      	strb	r3, [r7, #22]
			  }

			  if(err == 3 || (cRx == 0 && in[0] != 'A') || (cRx == 1 && in[0] != 'B') || (cRx == 2 && in[0] != 'C')){  //si la recepcion resulta en timeout
 80003d6:	7cfb      	ldrb	r3, [r7, #19]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d011      	beq.n	8000400 <main+0x2b4>
 80003dc:	7dbb      	ldrb	r3, [r7, #22]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d102      	bne.n	80003e8 <main+0x29c>
 80003e2:	7a3b      	ldrb	r3, [r7, #8]
 80003e4:	2b41      	cmp	r3, #65	; 0x41
 80003e6:	d10b      	bne.n	8000400 <main+0x2b4>
 80003e8:	7dbb      	ldrb	r3, [r7, #22]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d102      	bne.n	80003f4 <main+0x2a8>
 80003ee:	7a3b      	ldrb	r3, [r7, #8]
 80003f0:	2b42      	cmp	r3, #66	; 0x42
 80003f2:	d105      	bne.n	8000400 <main+0x2b4>
 80003f4:	7dbb      	ldrb	r3, [r7, #22]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d10f      	bne.n	800041a <main+0x2ce>
 80003fa:	7a3b      	ldrb	r3, [r7, #8]
 80003fc:	2b43      	cmp	r3, #67	; 0x43
 80003fe:	d00c      	beq.n	800041a <main+0x2ce>
				  eRx++;
 8000400:	7d7b      	ldrb	r3, [r7, #21]
 8000402:	3301      	adds	r3, #1
 8000404:	757b      	strb	r3, [r7, #21]
				  if(eRx >= 5) //y el nodo no responde en reiterados intentos se denota como con falla
 8000406:	7d7b      	ldrb	r3, [r7, #21]
 8000408:	2b04      	cmp	r3, #4
 800040a:	d906      	bls.n	800041a <main+0x2ce>
					  salud_nodos[cRx] = 0;
 800040c:	7dbb      	ldrb	r3, [r7, #22]
 800040e:	f107 0218 	add.w	r2, r7, #24
 8000412:	4413      	add	r3, r2
 8000414:	2200      	movs	r2, #0
 8000416:	f803 2c18 	strb.w	r2, [r3, #-24]
			  }

			  if (eRx >= 5) {
 800041a:	7d7b      	ldrb	r3, [r7, #21]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d904      	bls.n	800042a <main+0x2de>
				  cRx++;
 8000420:	7dbb      	ldrb	r3, [r7, #22]
 8000422:	3301      	adds	r3, #1
 8000424:	75bb      	strb	r3, [r7, #22]
				  eRx = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	757b      	strb	r3, [r7, #21]
			  }

			  if (cRx == 3){
 800042a:	7dbb      	ldrb	r3, [r7, #22]
 800042c:	2b03      	cmp	r3, #3
 800042e:	d169      	bne.n	8000504 <main+0x3b8>
				  if(estado_inhi[0] || estado_inhi[1] || estado_inhi[2]){ //desata alarma visual y sonora en la central
 8000430:	7b3b      	ldrb	r3, [r7, #12]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d105      	bne.n	8000442 <main+0x2f6>
 8000436:	7b7b      	ldrb	r3, [r7, #13]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d102      	bne.n	8000442 <main+0x2f6>
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d008      	beq.n	8000454 <main+0x308>
					  if(bFin_GPRS==1){
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <main+0x338>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d104      	bne.n	8000454 <main+0x308>
						  HAL_TIM_Base_Start_IT(&htim4);
 800044a:	480f      	ldr	r0, [pc, #60]	; (8000488 <main+0x33c>)
 800044c:	f001 fdf6 	bl	800203c <HAL_TIM_Base_Start_IT>
						  GSM_Send();
 8000450:	f000 fa4c 	bl	80008ec <GSM_Send>
					  }
				  }

				  salud_nodos[0] = salud_nodos[1] = salud_nodos[2] = 1;
 8000454:	2301      	movs	r3, #1
 8000456:	70bb      	strb	r3, [r7, #2]
 8000458:	78bb      	ldrb	r3, [r7, #2]
 800045a:	707b      	strb	r3, [r7, #1]
 800045c:	787b      	ldrb	r3, [r7, #1]
 800045e:	703b      	strb	r3, [r7, #0]
				  NextState = Reset_State;
 8000460:	2302      	movs	r3, #2
 8000462:	75fb      	strb	r3, [r7, #23]


			  }
			  break;
 8000464:	e04e      	b.n	8000504 <main+0x3b8>

	  	  case Reset_State:

	  		in[2] = in[1] = in[0] = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	723b      	strb	r3, [r7, #8]
 800046a:	7a3b      	ldrb	r3, [r7, #8]
 800046c:	727b      	strb	r3, [r7, #9]
 800046e:	7a7b      	ldrb	r3, [r7, #9]
 8000470:	72bb      	strb	r3, [r7, #10]

	  		for(i = 0; i < 5; i++){
 8000472:	2300      	movs	r3, #0
 8000474:	753b      	strb	r3, [r7, #20]
 8000476:	e02c      	b.n	80004d2 <main+0x386>
 8000478:	080031cc 	.word	0x080031cc
 800047c:	40010800 	.word	0x40010800
 8000480:	200000c0 	.word	0x200000c0
 8000484:	20000001 	.word	0x20000001
 8000488:	20000030 	.word	0x20000030

	  			  HAL_Delay(200);
 800048c:	20c8      	movs	r0, #200	; 0xc8
 800048e:	f000 fe37 	bl	8001100 <HAL_Delay>

	  			  ch[0] = 'A';
 8000492:	2341      	movs	r3, #65	; 0x41
 8000494:	713b      	strb	r3, [r7, #4]
				  ch[1] = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	717b      	strb	r3, [r7, #5]

				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	4819      	ldr	r0, [pc, #100]	; (8000508 <main+0x3bc>)
 80004a2:	f001 f92d 	bl	8001700 <HAL_GPIO_WritePin>

				  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 2, 50);
 80004a6:	1d39      	adds	r1, r7, #4
 80004a8:	2332      	movs	r3, #50	; 0x32
 80004aa:	2202      	movs	r2, #2
 80004ac:	4817      	ldr	r0, [pc, #92]	; (800050c <main+0x3c0>)
 80004ae:	f002 f9de 	bl	800286e <HAL_UART_Transmit>
				  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 80004b2:	f107 0108 	add.w	r1, r7, #8
 80004b6:	230a      	movs	r3, #10
 80004b8:	2201      	movs	r2, #1
 80004ba:	4814      	ldr	r0, [pc, #80]	; (800050c <main+0x3c0>)
 80004bc:	f002 fa69 	bl	8002992 <HAL_UART_Receive>

				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c6:	4810      	ldr	r0, [pc, #64]	; (8000508 <main+0x3bc>)
 80004c8:	f001 f91a 	bl	8001700 <HAL_GPIO_WritePin>
	  		for(i = 0; i < 5; i++){
 80004cc:	7d3b      	ldrb	r3, [r7, #20]
 80004ce:	3301      	adds	r3, #1
 80004d0:	753b      	strb	r3, [r7, #20]
 80004d2:	7d3b      	ldrb	r3, [r7, #20]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d9d9      	bls.n	800048c <main+0x340>

	  		  }

	  		  estado_inhi[0] = estado_inhi[1] = estado_inhi[2] = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	73bb      	strb	r3, [r7, #14]
 80004dc:	7bbb      	ldrb	r3, [r7, #14]
 80004de:	737b      	strb	r3, [r7, #13]
 80004e0:	7b7b      	ldrb	r3, [r7, #13]
 80004e2:	733b      	strb	r3, [r7, #12]
	  		  RSSI_value[0] = RSSI_value[1] = RSSI_value[2] = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	74bb      	strb	r3, [r7, #18]
 80004e8:	7cbb      	ldrb	r3, [r7, #18]
 80004ea:	747b      	strb	r3, [r7, #17]
 80004ec:	7c7b      	ldrb	r3, [r7, #17]
 80004ee:	743b      	strb	r3, [r7, #16]
	  		  cRx = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	75bb      	strb	r3, [r7, #22]

			  NextState = No_Inhibicion_State;
 80004f4:	2300      	movs	r3, #0
 80004f6:	75fb      	strb	r3, [r7, #23]
			  break;
 80004f8:	e005      	b.n	8000506 <main+0x3ba>

	  	  default:
	  		NextState = Reset_State;
 80004fa:	2302      	movs	r3, #2
 80004fc:	75fb      	strb	r3, [r7, #23]
 80004fe:	e66c      	b.n	80001da <main+0x8e>
	  		  break;
 8000500:	bf00      	nop
 8000502:	e66a      	b.n	80001da <main+0x8e>
			  break;
 8000504:	bf00      	nop
	  switch(NextState){
 8000506:	e668      	b.n	80001da <main+0x8e>
 8000508:	40010800 	.word	0x40010800
 800050c:	200000c0 	.word	0x200000c0

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	; 0x40
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	2228      	movs	r2, #40	; 0x28
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fe40 	bl	80031a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	4618      	mov	r0, r3
 800055a:	f001 f903 	bl	8001764 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000564:	f000 fbde 	bl	8000d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2302      	movs	r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2102      	movs	r1, #2
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fb6e 	bl	8001c64 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058e:	f000 fbc9 	bl	8000d24 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3740      	adds	r7, #64	; 0x40
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_TIM3_Init+0x94>)
 80005ba:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <MX_TIM3_Init+0x98>)
 80005bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1439;
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <MX_TIM3_Init+0x94>)
 80005c0:	f240 529f 	movw	r2, #1439	; 0x59f
 80005c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_TIM3_Init+0x94>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_TIM3_Init+0x94>)
 80005ce:	220a      	movs	r2, #10
 80005d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_TIM3_Init+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_TIM3_Init+0x94>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005de:	4814      	ldr	r0, [pc, #80]	; (8000630 <MX_TIM3_Init+0x94>)
 80005e0:	f001 fcdc 	bl	8001f9c <HAL_TIM_Base_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 fb9b 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <MX_TIM3_Init+0x94>)
 80005fc:	f001 fea6 	bl	800234c <HAL_TIM_ConfigClockSource>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000606:	f000 fb8d 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <MX_TIM3_Init+0x94>)
 8000618:	f002 f86c 	bl	80026f4 <HAL_TIMEx_MasterConfigSynchronization>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000622:	f000 fb7f 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000078 	.word	0x20000078
 8000634:	40000400 	.word	0x40000400

08000638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_TIM4_Init+0x94>)
 8000656:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <MX_TIM4_Init+0x98>)
 8000658:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_TIM4_Init+0x94>)
 800065c:	f240 529f 	movw	r2, #1439	; 0x59f
 8000660:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_TIM4_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_TIM4_Init+0x94>)
 800066a:	220a      	movs	r2, #10
 800066c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_TIM4_Init+0x94>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_TIM4_Init+0x94>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <MX_TIM4_Init+0x94>)
 800067c:	f001 fc8e 	bl	8001f9c <HAL_TIM_Base_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 fb4d 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	4619      	mov	r1, r3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_TIM4_Init+0x94>)
 8000698:	f001 fe58 	bl	800234c <HAL_TIM_ConfigClockSource>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 fb3f 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_TIM4_Init+0x94>)
 80006b4:	f002 f81e 	bl	80026f4 <HAL_TIMEx_MasterConfigSynchronization>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80006be:	f000 fb31 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000030 	.word	0x20000030
 80006d0:	40000800 	.word	0x40000800

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fc:	220c      	movs	r2, #12
 80006fe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 800070e:	f002 f861 	bl	80027d4 <HAL_UART_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000718:	f000 fb04 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000c0 	.word	0x200000c0
 8000724:	40013800 	.word	0x40013800

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f002 f838 	bl	80027d4 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 fadb 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000104 	.word	0x20000104
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_GPIO_Init+0xf0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a35      	ldr	r2, [pc, #212]	; (800086c <MX_GPIO_Init+0xf0>)
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_GPIO_Init+0xf0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_GPIO_Init+0xf0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a2f      	ldr	r2, [pc, #188]	; (800086c <MX_GPIO_Init+0xf0>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_GPIO_Init+0xf0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_GPIO_Init+0xf0>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a29      	ldr	r2, [pc, #164]	; (800086c <MX_GPIO_Init+0xf0>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_GPIO_Init+0xf0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0308 	and.w	r3, r3, #8
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80007de:	4824      	ldr	r0, [pc, #144]	; (8000870 <MX_GPIO_Init+0xf4>)
 80007e0:	f000 ff8e 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2150      	movs	r1, #80	; 0x50
 80007e8:	4822      	ldr	r0, [pc, #136]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007ea:	f000 ff89 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <MX_GPIO_Init+0xf4>)
 8000808:	f000 fe20 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800080c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2302      	movs	r3, #2
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_GPIO_Init+0xf4>)
 8000826:	f000 fe11 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800082a:	2310      	movs	r3, #16
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_GPIO_Init+0xf8>)
 8000842:	f000 fe03 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2302      	movs	r3, #2
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_GPIO_Init+0xf8>)
 800085e:	f000 fdf5 	bl	800144c <HAL_GPIO_Init>

}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800
 8000874:	40010c00 	.word	0x40010c00

08000878 <GSM_Init>:

/* USER CODE BEGIN 4 */

void GSM_Init(void){
 8000878:	b4b0      	push	{r4, r5, r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
	char in[20]="00000000000000000000";
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <GSM_Init+0x24>)
 8000880:	1d3c      	adds	r4, r7, #4
 8000882:	461d      	mov	r5, r3
 8000884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000888:	682b      	ldr	r3, [r5, #0]
 800088a:	6023      	str	r3, [r4, #0]


	GSM_State = 0;
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <GSM_Init+0x28>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]

}
 8000892:	bf00      	nop
 8000894:	371c      	adds	r7, #28
 8000896:	46bd      	mov	sp, r7
 8000898:	bcb0      	pop	{r4, r5, r7}
 800089a:	4770      	bx	lr
 800089c:	080031d0 	.word	0x080031d0
 80008a0:	2000002e 	.word	0x2000002e

080008a4 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_UART_TxCpltCallback+0x38>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d10d      	bne.n	80008d2 <HAL_UART_TxCpltCallback+0x2e>
		GSM_State++;
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_UART_TxCpltCallback+0x3c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_UART_TxCpltCallback+0x3c>)
 80008c0:	701a      	strb	r2, [r3, #0]
		ticks = HAL_GetTick();
 80008c2:	f000 fc13 	bl	80010ec <HAL_GetTick>
 80008c6:	4602      	mov	r2, r0
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_UART_TxCpltCallback+0x40>)
 80008ca:	601a      	str	r2, [r3, #0]
		bTx_command = 1;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_UART_TxCpltCallback+0x44>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
	}

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	2000002e 	.word	0x2000002e
 80008e4:	20000100 	.word	0x20000100
 80008e8:	20000000 	.word	0x20000000

080008ec <GSM_Send>:


void GSM_Send(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	if(bFin_GPRS==1){
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <GSM_Send+0x8c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d13d      	bne.n	8000974 <GSM_Send+0x88>
		bFin_GPRS=0;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <GSM_Send+0x8c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 80008fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000902:	f000 fbfd 	bl	8001100 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)"AT\n\r", strlen("AT\n\r"), HAL_MAX_DELAY);
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	2204      	movs	r2, #4
 800090c:	491b      	ldr	r1, [pc, #108]	; (800097c <GSM_Send+0x90>)
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <GSM_Send+0x94>)
 8000910:	f001 ffad 	bl	800286e <HAL_UART_Transmit>
		HAL_Delay(4000);
 8000914:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000918:	f000 fbf2 	bl	8001100 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)"AT+SAPBR=3,1,Contype,GPRS\n\r", strlen("AT+SAPBR=3,1,Contype,GPRS\n\r"), HAL_MAX_DELAY);
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	221b      	movs	r2, #27
 8000922:	4918      	ldr	r1, [pc, #96]	; (8000984 <GSM_Send+0x98>)
 8000924:	4816      	ldr	r0, [pc, #88]	; (8000980 <GSM_Send+0x94>)
 8000926:	f001 ffa2 	bl	800286e <HAL_UART_Transmit>
		HAL_Delay(300);
 800092a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800092e:	f000 fbe7 	bl	8001100 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)"AT+SAPBR=3,1,APN,datos.personal.com\n\r", strlen("AT+SAPBR=3,1,APN,datos.personal.com\n\r"),HAL_MAX_DELAY);
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	2225      	movs	r2, #37	; 0x25
 8000938:	4913      	ldr	r1, [pc, #76]	; (8000988 <GSM_Send+0x9c>)
 800093a:	4811      	ldr	r0, [pc, #68]	; (8000980 <GSM_Send+0x94>)
 800093c:	f001 ff97 	bl	800286e <HAL_UART_Transmit>
		HAL_Delay(300);
 8000940:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000944:	f000 fbdc 	bl	8001100 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)"AT+SAPBR=3,1,PWD,adgj\n\r", strlen("AT+SAPBR=3,1,PWD,adgj\n\r"),HAL_MAX_DELAY);
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	2217      	movs	r2, #23
 800094e:	490f      	ldr	r1, [pc, #60]	; (800098c <GSM_Send+0xa0>)
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <GSM_Send+0x94>)
 8000952:	f001 ff8c 	bl	800286e <HAL_UART_Transmit>
		HAL_Delay(300);
 8000956:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800095a:	f000 fbd1 	bl	8001100 <HAL_Delay>
		GSM_State = 0;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <GSM_Send+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
		ticks = HAL_GetTick();
 8000964:	f000 fbc2 	bl	80010ec <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <GSM_Send+0xa8>)
 800096c:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <GSM_Send+0xac>)
 8000970:	f001 fb64 	bl	800203c <HAL_TIM_Base_Start_IT>
	}
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000001 	.word	0x20000001
 800097c:	080031e8 	.word	0x080031e8
 8000980:	20000104 	.word	0x20000104
 8000984:	080031f0 	.word	0x080031f0
 8000988:	0800320c 	.word	0x0800320c
 800098c:	08003234 	.word	0x08003234
 8000990:	2000002e 	.word	0x2000002e
 8000994:	20000100 	.word	0x20000100
 8000998:	20000078 	.word	0x20000078

0800099c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM4){ //chequea que la interrupción sea la del timer adecuado
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4aaa      	ldr	r2, [pc, #680]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d124      	bne.n	80009f8 <HAL_TIM_PeriodElapsedCallback+0x5c>

		contador1s++;
 80009ae:	4baa      	ldr	r3, [pc, #680]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4ba8      	ldr	r3, [pc, #672]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009b8:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	48a7      	ldr	r0, [pc, #668]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80009be:	f000 feb7 	bl	8001730 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2110      	movs	r1, #16
 80009c6:	48a5      	ldr	r0, [pc, #660]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80009c8:	f000 fe9a 	bl	8001700 <HAL_GPIO_WritePin>
		if(contador1s == 5000) {
 80009cc:	4ba2      	ldr	r3, [pc, #648]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d10f      	bne.n	80009f8 <HAL_TIM_PeriodElapsedCallback+0x5c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	489f      	ldr	r0, [pc, #636]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80009de:	f000 fe8f 	bl	8001700 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	489d      	ldr	r0, [pc, #628]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80009e8:	f000 fe8a 	bl	8001700 <HAL_GPIO_WritePin>
			contador1s = 0;
 80009ec:	4b9a      	ldr	r3, [pc, #616]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 80009f2:	489b      	ldr	r0, [pc, #620]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80009f4:	f001 fb74 	bl	80020e0 <HAL_TIM_Base_Stop_IT>
		}

	}


	if(htim->Instance == TIM3){ //chequea que la interrupción sea la del timer adecuado
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a99      	ldr	r2, [pc, #612]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	f040 8179 	bne.w	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x35a>

		if(GSM_State == 0 && bTx_command == 1){
 8000a04:	4b98      	ldr	r3, [pc, #608]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10b      	bne.n	8000a24 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000a0c:	4b97      	ldr	r3, [pc, #604]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d107      	bne.n	8000a24 <HAL_TIM_PeriodElapsedCallback+0x88>
			bTx_command = 0;
 8000a14:	4b95      	ldr	r3, [pc, #596]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+SAPBR =1,1\n\r", strlen("AT+SAPBR =1,1\n\r"));
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	4994      	ldr	r1, [pc, #592]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000a1e:	4895      	ldr	r0, [pc, #596]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000a20:	f002 f856 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}

		if(GSM_State == 1 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000a24:	4b90      	ldr	r3, [pc, #576]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d117      	bne.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000a2c:	f000 fb5e 	bl	80010ec <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	4b91      	ldr	r3, [pc, #580]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1ad2      	subs	r2, r2, r3
 8000a38:	4b90      	ldr	r3, [pc, #576]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d30b      	bcc.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000a44:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d107      	bne.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0xc0>
			bTx_command = 0;
 8000a4c:	4b87      	ldr	r3, [pc, #540]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+SAPBR=2,1\n\r", strlen("AT+SAPBR=2,1\n\r"));
 8000a52:	220e      	movs	r2, #14
 8000a54:	498a      	ldr	r1, [pc, #552]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000a56:	4887      	ldr	r0, [pc, #540]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000a58:	f002 f83a 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 2 && ((HAL_GetTick() - ticks) >= (2000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000a5c:	4b82      	ldr	r3, [pc, #520]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d117      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000a64:	f000 fb42 	bl	80010ec <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	4b83      	ldr	r3, [pc, #524]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	4b82      	ldr	r3, [pc, #520]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d30b      	bcc.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000a7c:	4b7b      	ldr	r3, [pc, #492]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d107      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0xf8>
			bTx_command = 0;
 8000a84:	4b79      	ldr	r3, [pc, #484]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPINIT\n\r", strlen("AT+HTTPINIT\n\r"));
 8000a8a:	220d      	movs	r2, #13
 8000a8c:	497d      	ldr	r1, [pc, #500]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000a8e:	4879      	ldr	r0, [pc, #484]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000a90:	f002 f81e 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 3 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000a94:	4b74      	ldr	r3, [pc, #464]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d117      	bne.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x130>
 8000a9c:	f000 fb26 	bl	80010ec <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4b75      	ldr	r3, [pc, #468]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1ad2      	subs	r2, r2, r3
 8000aa8:	4b74      	ldr	r3, [pc, #464]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d30b      	bcc.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x130>
 8000ab4:	4b6d      	ldr	r3, [pc, #436]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d107      	bne.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x130>
			bTx_command = 0;
 8000abc:	4b6b      	ldr	r3, [pc, #428]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPPARA=CID,1\n\r", strlen("AT+HTTPPARA=CID,1\n\r"));
 8000ac2:	2213      	movs	r2, #19
 8000ac4:	4970      	ldr	r1, [pc, #448]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000ac6:	486b      	ldr	r0, [pc, #428]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ac8:	f002 f802 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 4 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000acc:	4b66      	ldr	r3, [pc, #408]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	d117      	bne.n	8000b04 <HAL_TIM_PeriodElapsedCallback+0x168>
 8000ad4:	f000 fb0a 	bl	80010ec <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	4b67      	ldr	r3, [pc, #412]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1ad2      	subs	r2, r2, r3
 8000ae0:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d30b      	bcc.n	8000b04 <HAL_TIM_PeriodElapsedCallback+0x168>
 8000aec:	4b5f      	ldr	r3, [pc, #380]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d107      	bne.n	8000b04 <HAL_TIM_PeriodElapsedCallback+0x168>
			bTx_command = 0;
 8000af4:	4b5d      	ldr	r3, [pc, #372]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPPARA=URL,http://jammer-detector.ml/cargar_info.php\n\r", strlen("AT+HTTPPARA=URL,http://jammer-detector.ml/cargar_info.php\n\r"));
 8000afa:	223b      	movs	r2, #59	; 0x3b
 8000afc:	4963      	ldr	r1, [pc, #396]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000afe:	485d      	ldr	r0, [pc, #372]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b00:	f001 ffe6 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 5 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000b04:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b05      	cmp	r3, #5
 8000b0a:	d117      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8000b0c:	f000 faee 	bl	80010ec <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1ad2      	subs	r2, r2, r3
 8000b18:	4b58      	ldr	r3, [pc, #352]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d30b      	bcc.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8000b24:	4b51      	ldr	r3, [pc, #324]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d107      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x1a0>
			bTx_command = 0;
 8000b2c:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT\n\r", strlen("AT\n\r"));
 8000b32:	2204      	movs	r2, #4
 8000b34:	4956      	ldr	r1, [pc, #344]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000b36:	484f      	ldr	r0, [pc, #316]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b38:	f001 ffca 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 6 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000b3c:	4b4a      	ldr	r3, [pc, #296]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b06      	cmp	r3, #6
 8000b42:	d117      	bne.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8000b44:	f000 fad2 	bl	80010ec <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1ad2      	subs	r2, r2, r3
 8000b50:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d30b      	bcc.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d107      	bne.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			bTx_command = 0;
 8000b64:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPPARA=CONTENT,application/x-www-form-urlencoded\n\r", strlen("AT+HTTPPARA=CONTENT,application/x-www-form-urlencoded\n\r"));
 8000b6a:	2237      	movs	r2, #55	; 0x37
 8000b6c:	4949      	ldr	r1, [pc, #292]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000b6e:	4841      	ldr	r0, [pc, #260]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b70:	f001 ffae 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 7 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000b74:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b07      	cmp	r3, #7
 8000b7a:	d117      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x210>
 8000b7c:	f000 fab6 	bl	80010ec <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	1ad2      	subs	r2, r2, r3
 8000b88:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d30b      	bcc.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x210>
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d107      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x210>
			bTx_command = 0;
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPDATA=192,10000\n\r", strlen("AT+HTTPDATA=192,10000\n\r"));
 8000ba2:	2217      	movs	r2, #23
 8000ba4:	493c      	ldr	r1, [pc, #240]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000ba6:	4833      	ldr	r0, [pc, #204]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ba8:	f001 ff92 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		//GSM_Data_out = "params='A','B','C','UTN',98,97,96,0,1,2)";

		if(GSM_State == 8 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d117      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x248>
 8000bb4:	f000 fa9a 	bl	80010ec <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d30b      	bcc.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x248>
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d107      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x248>
			bTx_command = 0;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"params='A','B','C','UTN',98,97,96,0,1,2)\n\r", strlen("params='A','B','C','UTN',98,97,96,0,1,2)\n\r"));
 8000bda:	222a      	movs	r2, #42	; 0x2a
 8000bdc:	492f      	ldr	r1, [pc, #188]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000bde:	4825      	ldr	r0, [pc, #148]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000be0:	f001 ff76 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 9 && ((HAL_GetTick() - ticks) >= (10000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b09      	cmp	r3, #9
 8000bea:	d118      	bne.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x282>
 8000bec:	f000 fa7e 	bl	80010ec <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000c00:	3310      	adds	r3, #16
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d30b      	bcc.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x282>
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d107      	bne.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x282>
			bTx_command = 0;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPACTION=1\n\r", strlen("AT+HTTPACTION=1\n\r"));
 8000c14:	2211      	movs	r2, #17
 8000c16:	4922      	ldr	r1, [pc, #136]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000c18:	4816      	ldr	r0, [pc, #88]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000c1a:	f001 ff59 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 10 && ((HAL_GetTick() - ticks) >= (5000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b0a      	cmp	r3, #10
 8000c24:	d142      	bne.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x310>
 8000c26:	f000 fa61 	bl	80010ec <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1ad2      	subs	r2, r2, r3
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d335      	bcc.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x310>
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d131      	bne.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x310>
			bTx_command = 0;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPREAD\n\r", strlen("AT+HTTPREAD\n\r"));
 8000c4e:	220d      	movs	r2, #13
 8000c50:	e028      	b.n	8000ca4 <HAL_TIM_PeriodElapsedCallback+0x308>
 8000c52:	bf00      	nop
 8000c54:	40000800 	.word	0x40000800
 8000c58:	2000002c 	.word	0x2000002c
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	20000030 	.word	0x20000030
 8000c64:	40000400 	.word	0x40000400
 8000c68:	2000002e 	.word	0x2000002e
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	0800324c 	.word	0x0800324c
 8000c74:	20000104 	.word	0x20000104
 8000c78:	20000100 	.word	0x20000100
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	0800325c 	.word	0x0800325c
 8000c84:	0800326c 	.word	0x0800326c
 8000c88:	0800327c 	.word	0x0800327c
 8000c8c:	08003290 	.word	0x08003290
 8000c90:	080031e8 	.word	0x080031e8
 8000c94:	080032cc 	.word	0x080032cc
 8000c98:	08003304 	.word	0x08003304
 8000c9c:	0800331c 	.word	0x0800331c
 8000ca0:	08003348 	.word	0x08003348
 8000ca4:	4916      	ldr	r1, [pc, #88]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000ca6:	4817      	ldr	r0, [pc, #92]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000ca8:	f001 ff12 	bl	8002ad0 <HAL_UART_Transmit_IT>
		}
		if(GSM_State == 11 && ((HAL_GetTick() - ticks) >= (1000 + (uint32_t)(uwTickFreq))) && bTx_command == 1){
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b0b      	cmp	r3, #11
 8000cb2:	d120      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x35a>
 8000cb4:	f000 fa1a 	bl	80010ec <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d314      	bcc.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x35a>
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d110      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x35a>
			bTx_command = 0;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"AT+HTTPTERM\n\r", strlen("AT+HTTPTERM\n\r"));
 8000cda:	220d      	movs	r2, #13
 8000cdc:	490e      	ldr	r1, [pc, #56]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000ce0:	f001 fef6 	bl	8002ad0 <HAL_UART_Transmit_IT>
			GSM_State = 0;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
			bFin_GPRS=1;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000cf2:	f001 f9f5 	bl	80020e0 <HAL_TIM_Base_Stop_IT>
		}

		}

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	0800335c 	.word	0x0800335c
 8000d04:	20000104 	.word	0x20000104
 8000d08:	2000002e 	.word	0x2000002e
 8000d0c:	20000100 	.word	0x20000100
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	20000000 	.word	0x20000000
 8000d18:	0800336c 	.word	0x0800336c
 8000d1c:	20000001 	.word	0x20000001
 8000d20:	20000078 	.word	0x20000078

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x5c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_MspInit+0x60>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_MspInit+0x60>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000

08000d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d114      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	201d      	movs	r0, #29
 8000dc4:	f000 fa95 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dc8:	201d      	movs	r0, #29
 8000dca:	f000 faae 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dce:	e018      	b.n	8000e02 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_TIM_Base_MspInit+0x80>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d113      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	201e      	movs	r0, #30
 8000df8:	f000 fa7b 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dfc:	201e      	movs	r0, #30
 8000dfe:	f000 fa94 	bl	800132a <HAL_NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40000800 	.word	0x40000800

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a3f      	ldr	r2, [pc, #252]	; (8000f30 <HAL_UART_MspInit+0x118>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d13a      	bne.n	8000eae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e38:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a3d      	ldr	r2, [pc, #244]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	482e      	ldr	r0, [pc, #184]	; (8000f38 <HAL_UART_MspInit+0x120>)
 8000e7e:	f000 fae5 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4828      	ldr	r0, [pc, #160]	; (8000f38 <HAL_UART_MspInit+0x120>)
 8000e98:	f000 fad8 	bl	800144c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2025      	movs	r0, #37	; 0x25
 8000ea2:	f000 fa26 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ea6:	2025      	movs	r0, #37	; 0x25
 8000ea8:	f000 fa3f 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eac:	e03c      	b.n	8000f28 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_UART_MspInit+0x124>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d137      	bne.n	8000f28 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	61d3      	str	r3, [r2, #28]
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_UART_MspInit+0x11c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <HAL_UART_MspInit+0x120>)
 8000efc:	f000 faa6 	bl	800144c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f00:	2308      	movs	r3, #8
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <HAL_UART_MspInit+0x120>)
 8000f14:	f000 fa9a 	bl	800144c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2026      	movs	r0, #38	; 0x26
 8000f1e:	f000 f9e8 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f22:	2026      	movs	r0, #38	; 0x26
 8000f24:	f000 fa01 	bl	800132a <HAL_NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800
 8000f3c:	40004400 	.word	0x40004400

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <HardFault_Handler+0x4>

08000f52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <MemManage_Handler+0x4>

08000f58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <BusFault_Handler+0x4>

08000f5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <UsageFault_Handler+0x4>

08000f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f89c 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM3_IRQHandler+0x10>)
 8000f9a:	f001 f8cf 	bl	800213c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000078 	.word	0x20000078

08000fa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <TIM4_IRQHandler+0x10>)
 8000fae:	f001 f8c5 	bl	800213c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000030 	.word	0x20000030

08000fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <USART1_IRQHandler+0x10>)
 8000fc2:	f001 fdc9 	bl	8002b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000c0 	.word	0x200000c0

08000fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <USART2_IRQHandler+0x10>)
 8000fd6:	f001 fdbf 	bl	8002b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000104 	.word	0x20000104

08000fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ff0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ff2:	e003      	b.n	8000ffc <LoopCopyDataInit>

08000ff4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ff6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ff8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ffa:	3104      	adds	r1, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001000:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001002:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001004:	d3f6      	bcc.n	8000ff4 <CopyDataInit>
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001008:	e002      	b.n	8001010 <LoopFillZerobss>

0800100a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800100c:	f842 3b04 	str.w	r3, [r2], #4

08001010 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001012:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001014:	d3f9      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001016:	f7ff ffe5 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f002 f89f 	bl	800315c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101e:	f7ff f895 	bl	800014c <main>
  bx lr
 8001022:	4770      	bx	lr
  ldr r3, =_sidata
 8001024:	080033b0 	.word	0x080033b0
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800102c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001030:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001034:	20000148 	.word	0x20000148

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x28>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x28>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f945 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fe6a 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f95d 	bl	8001346 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f925 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x1c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x20>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a03      	ldr	r2, [pc, #12]	; (80010e8 <HAL_IncTick+0x20>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	2000000c 	.word	0x2000000c
 80010e8:	20000144 	.word	0x20000144

080010ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <HAL_GetTick+0x10>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000144 	.word	0x20000144

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff fff0 	bl	80010ec <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_Delay+0x40>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffe0 	bl	80010ec <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000000c 	.word	0x2000000c

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4906      	ldr	r1, [pc, #24]	; (80011dc <__NVIC_EnableIRQ+0x34>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff90 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff2d 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff42 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff90 	bl	8001234 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5f 	bl	80011e0 <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff35 	bl	80011a8 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001372:	2b02      	cmp	r3, #2
 8001374:	d005      	beq.n	8001382 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2204      	movs	r2, #4
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e051      	b.n	8001426 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 020e 	bic.w	r2, r2, #14
 8001390:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0201 	bic.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_DMA_Abort_IT+0xd0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d029      	beq.n	8001400 <HAL_DMA_Abort_IT+0xa0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_DMA_Abort_IT+0xd4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d022      	beq.n	80013fc <HAL_DMA_Abort_IT+0x9c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_DMA_Abort_IT+0xd8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d01a      	beq.n	80013f6 <HAL_DMA_Abort_IT+0x96>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_DMA_Abort_IT+0xdc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d012      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x90>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_DMA_Abort_IT+0xe0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d00a      	beq.n	80013ea <HAL_DMA_Abort_IT+0x8a>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <HAL_DMA_Abort_IT+0xe4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d102      	bne.n	80013e4 <HAL_DMA_Abort_IT+0x84>
 80013de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e2:	e00e      	b.n	8001402 <HAL_DMA_Abort_IT+0xa2>
 80013e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e8:	e00b      	b.n	8001402 <HAL_DMA_Abort_IT+0xa2>
 80013ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ee:	e008      	b.n	8001402 <HAL_DMA_Abort_IT+0xa2>
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	e005      	b.n	8001402 <HAL_DMA_Abort_IT+0xa2>
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	e002      	b.n	8001402 <HAL_DMA_Abort_IT+0xa2>
 80013fc:	2310      	movs	r3, #16
 80013fe:	e000      	b.n	8001402 <HAL_DMA_Abort_IT+0xa2>
 8001400:	2301      	movs	r3, #1
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_DMA_Abort_IT+0xe8>)
 8001404:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
    } 
  }
  return status;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020008 	.word	0x40020008
 8001434:	4002001c 	.word	0x4002001c
 8001438:	40020030 	.word	0x40020030
 800143c:	40020044 	.word	0x40020044
 8001440:	40020058 	.word	0x40020058
 8001444:	4002006c 	.word	0x4002006c
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e127      	b.n	80016b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8116 	bne.w	80016aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b12      	cmp	r3, #18
 8001484:	d034      	beq.n	80014f0 <HAL_GPIO_Init+0xa4>
 8001486:	2b12      	cmp	r3, #18
 8001488:	d80d      	bhi.n	80014a6 <HAL_GPIO_Init+0x5a>
 800148a:	2b02      	cmp	r3, #2
 800148c:	d02b      	beq.n	80014e6 <HAL_GPIO_Init+0x9a>
 800148e:	2b02      	cmp	r3, #2
 8001490:	d804      	bhi.n	800149c <HAL_GPIO_Init+0x50>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d031      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 8001496:	2b01      	cmp	r3, #1
 8001498:	d01c      	beq.n	80014d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800149a:	e048      	b.n	800152e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800149c:	2b03      	cmp	r3, #3
 800149e:	d043      	beq.n	8001528 <HAL_GPIO_Init+0xdc>
 80014a0:	2b11      	cmp	r3, #17
 80014a2:	d01b      	beq.n	80014dc <HAL_GPIO_Init+0x90>
          break;
 80014a4:	e043      	b.n	800152e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014a6:	4a89      	ldr	r2, [pc, #548]	; (80016cc <HAL_GPIO_Init+0x280>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d026      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014ac:	4a87      	ldr	r2, [pc, #540]	; (80016cc <HAL_GPIO_Init+0x280>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d806      	bhi.n	80014c0 <HAL_GPIO_Init+0x74>
 80014b2:	4a87      	ldr	r2, [pc, #540]	; (80016d0 <HAL_GPIO_Init+0x284>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d020      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014b8:	4a86      	ldr	r2, [pc, #536]	; (80016d4 <HAL_GPIO_Init+0x288>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01d      	beq.n	80014fa <HAL_GPIO_Init+0xae>
          break;
 80014be:	e036      	b.n	800152e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014c0:	4a85      	ldr	r2, [pc, #532]	; (80016d8 <HAL_GPIO_Init+0x28c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014c6:	4a85      	ldr	r2, [pc, #532]	; (80016dc <HAL_GPIO_Init+0x290>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d016      	beq.n	80014fa <HAL_GPIO_Init+0xae>
 80014cc:	4a84      	ldr	r2, [pc, #528]	; (80016e0 <HAL_GPIO_Init+0x294>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0xae>
          break;
 80014d2:	e02c      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e028      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e023      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	3308      	adds	r3, #8
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e01e      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	330c      	adds	r3, #12
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e019      	b.n	800152e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001502:	2304      	movs	r3, #4
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e012      	b.n	800152e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	611a      	str	r2, [r3, #16]
          break;
 800151a:	e008      	b.n	800152e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	615a      	str	r2, [r3, #20]
          break;
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2bff      	cmp	r3, #255	; 0xff
 8001532:	d801      	bhi.n	8001538 <HAL_GPIO_Init+0xec>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	e001      	b.n	800153c <HAL_GPIO_Init+0xf0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3304      	adds	r3, #4
 800153c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d802      	bhi.n	800154a <HAL_GPIO_Init+0xfe>
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x104>
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	3b08      	subs	r3, #8
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	210f      	movs	r1, #15
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	401a      	ands	r2, r3
 8001562:	6a39      	ldr	r1, [r7, #32]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8096 	beq.w	80016aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157e:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_GPIO_Init+0x298>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_GPIO_Init+0x298>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_GPIO_Init+0x298>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001596:	4a54      	ldr	r2, [pc, #336]	; (80016e8 <HAL_GPIO_Init+0x29c>)
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4b      	ldr	r2, [pc, #300]	; (80016ec <HAL_GPIO_Init+0x2a0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x19e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <HAL_GPIO_Init+0x2a4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x19a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a49      	ldr	r2, [pc, #292]	; (80016f4 <HAL_GPIO_Init+0x2a8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x196>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a48      	ldr	r2, [pc, #288]	; (80016f8 <HAL_GPIO_Init+0x2ac>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x192>
 80015da:	2303      	movs	r3, #3
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015de:	2304      	movs	r3, #4
 80015e0:	e004      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x1a0>
 80015ea:	2300      	movs	r3, #0
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	f002 0203 	and.w	r2, r2, #3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4093      	lsls	r3, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fc:	493a      	ldr	r1, [pc, #232]	; (80016e8 <HAL_GPIO_Init+0x29c>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4938      	ldr	r1, [pc, #224]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4933      	ldr	r1, [pc, #204]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800162e:	4013      	ands	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	492e      	ldr	r1, [pc, #184]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
 800164a:	e006      	b.n	800165a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	43db      	mvns	r3, r3
 8001654:	4929      	ldr	r1, [pc, #164]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001656:	4013      	ands	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4924      	ldr	r1, [pc, #144]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	43db      	mvns	r3, r3
 800167c:	491f      	ldr	r1, [pc, #124]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800167e:	4013      	ands	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	491a      	ldr	r1, [pc, #104]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4915      	ldr	r1, [pc, #84]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	3301      	adds	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f aed0 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 80016c0:	bf00      	nop
 80016c2:	372c      	adds	r7, #44	; 0x2c
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	10210000 	.word	0x10210000
 80016d0:	10110000 	.word	0x10110000
 80016d4:	10120000 	.word	0x10120000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10320000 	.word	0x10320000
 80016e0:	10220000 	.word	0x10220000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	40010c00 	.word	0x40010c00
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40011400 	.word	0x40011400
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	611a      	str	r2, [r3, #16]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43d9      	mvns	r1, r3
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	400b      	ands	r3, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
	...

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e26c      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b04      	cmp	r3, #4
 800178e:	d00c      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001790:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d112      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
 800179c:	4b8c      	ldr	r3, [pc, #560]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06c      	beq.n	8001890 <HAL_RCC_OscConfig+0x12c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d168      	bne.n	8001890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e246      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x76>
 80017cc:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e02e      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x98>
 80017e2:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7a      	ldr	r2, [pc, #488]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0xbc>
 8001806:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 8001820:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a67      	ldr	r2, [pc, #412]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fc54 	bl	80010ec <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fc50 	bl	80010ec <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1fa      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xe4>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc40 	bl	80010ec <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fc3c 	bl	80010ec <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1e6      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x10c>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189e:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018aa:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1ba      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4939      	ldr	r1, [pc, #228]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_RCC_OscConfig+0x270>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fbf5 	bl	80010ec <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fbf1 	bl	80010ec <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e19b      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4927      	ldr	r1, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_RCC_OscConfig+0x270>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fbd4 	bl	80010ec <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fbd0 	bl	80010ec <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e17a      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03a      	beq.n	80019e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d019      	beq.n	80019ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_RCC_OscConfig+0x274>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fbb4 	bl	80010ec <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fbb0 	bl	80010ec <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e15a      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x26c>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fada 	bl	8001f60 <RCC_Delay>
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fb9a 	bl	80010ec <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ba:	e00f      	b.n	80019dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fb96 	bl	80010ec <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d908      	bls.n	80019dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e140      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	42420000 	.word	0x42420000
 80019d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	4b9e      	ldr	r3, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e9      	bne.n	80019bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a6 	beq.w	8001b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b97      	ldr	r3, [pc, #604]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10d      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b94      	ldr	r3, [pc, #592]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a93      	ldr	r2, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b91      	ldr	r3, [pc, #580]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	4b8e      	ldr	r3, [pc, #568]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fb57 	bl	80010ec <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff fb53 	bl	80010ec <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b64      	cmp	r3, #100	; 0x64
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0fd      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x312>
 8001a68:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e02d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x334>
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a72      	ldr	r2, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	e01c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x356>
 8001aa0:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a6c      	ldr	r2, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e00b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x36e>
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a66      	ldr	r2, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a63      	ldr	r2, [pc, #396]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d015      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fb07 	bl	80010ec <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fb03 	bl	80010ec <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0ab      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x37e>
 8001b04:	e014      	b.n	8001b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff faf1 	bl	80010ec <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff faed 	bl	80010ec <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e095      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8081 	beq.w	8001c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d061      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d146      	bne.n	8001bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fac1 	bl	80010ec <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff fabd 	bl	80010ec <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e067      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	492d      	ldr	r1, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a19      	ldr	r1, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	4927      	ldr	r1, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fa91 	bl	80010ec <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff fa8d 	bl	80010ec <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e037      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x46a>
 8001bec:	e02f      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_RCC_OscConfig+0x4fc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fa7a 	bl	80010ec <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa76 	bl	80010ec <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e020      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x498>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e013      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	42420060 	.word	0x42420060

08001c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0d0      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d910      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 0207 	bic.w	r2, r3, #7
 8001c8e:	4965      	ldr	r1, [pc, #404]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b8      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	494d      	ldr	r1, [pc, #308]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d040      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e07f      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e073      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06b      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 0203 	bic.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4936      	ldr	r1, [pc, #216]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d54:	f7ff f9ca 	bl	80010ec <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7ff f9c6 	bl	80010ec <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e053      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 020c 	and.w	r2, r3, #12
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1eb      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d210      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4922      	ldr	r1, [pc, #136]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e032      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4916      	ldr	r1, [pc, #88]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	490e      	ldr	r1, [pc, #56]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df2:	f000 f821 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001df6:	4601      	mov	r1, r0
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	fa21 f303 	lsr.w	r3, r1, r3
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1cc>)
 8001e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f928 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08003390 	.word	0x08003390
 8001e30:	20000004 	.word	0x20000004
 8001e34:	20000008 	.word	0x20000008

08001e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b490      	push	{r4, r7}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e40:	1d3c      	adds	r4, r7, #4
 8001e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x40>
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x46>
 8001e76:	e02d      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7a:	623b      	str	r3, [r7, #32]
      break;
 8001e7c:	e02d      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0c5b      	lsrs	r3, r3, #17
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eaa:	4413      	add	r3, r2
 8001eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb6:	fb02 f203 	mul.w	r2, r2, r3
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec2:	e004      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec8:	fb02 f303 	mul.w	r3, r2, r3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	623b      	str	r3, [r7, #32]
      break;
 8001ed2:	e002      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed6:	623b      	str	r3, [r7, #32]
      break;
 8001ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eda:	6a3b      	ldr	r3, [r7, #32]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc90      	pop	{r4, r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	0800337c 	.word	0x0800337c
 8001eec:	0800338c 	.word	0x0800338c
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	007a1200 	.word	0x007a1200
 8001ef8:	003d0900 	.word	0x003d0900

08001efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f14:	f7ff fff2 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f18:	4601      	mov	r1, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	080033a0 	.word	0x080033a0

08001f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f40:	4601      	mov	r1, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	0adb      	lsrs	r3, r3, #11
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	080033a0 	.word	0x080033a0

08001f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <RCC_Delay+0x34>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <RCC_Delay+0x38>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a5b      	lsrs	r3, r3, #9
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f7c:	bf00      	nop
  }
  while (Delay --);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e5a      	subs	r2, r3, #1
 8001f82:	60fa      	str	r2, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <RCC_Delay+0x1c>
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000004 	.word	0x20000004
 8001f98:	10624dd3 	.word	0x10624dd3

08001f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e041      	b.n	8002032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fee6 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f000 fa92 	bl	8002504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d001      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e03a      	b.n	80020ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00e      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x58>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207e:	d009      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x58>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x58>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a13      	ldr	r2, [pc, #76]	; (80020dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d111      	bne.n	80020b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d010      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b6:	e007      	b.n	80020c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40000800 	.word	0x40000800

080020e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10f      	bne.n	8002128 <HAL_TIM_Base_Stop_IT+0x48>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	f240 4344 	movw	r3, #1092	; 0x444
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_TIM_Base_Stop_IT+0x48>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0202 	mvn.w	r2, #2
 8002168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f9a4 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f997 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f9a6 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0204 	mvn.w	r2, #4
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f97a 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f96d 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f97c 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d122      	bne.n	8002240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b08      	cmp	r3, #8
 8002206:	d11b      	bne.n	8002240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0208 	mvn.w	r2, #8
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f950 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f943 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f952 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b10      	cmp	r3, #16
 800224c:	d122      	bne.n	8002294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b10      	cmp	r3, #16
 800225a:	d11b      	bne.n	8002294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0210 	mvn.w	r2, #16
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2208      	movs	r2, #8
 800226a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f926 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f919 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f928 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0201 	mvn.w	r2, #1
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fb6e 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b80      	cmp	r3, #128	; 0x80
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d107      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa6b 	bl	80027c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d107      	bne.n	8002318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8ec 	bl	80024f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b20      	cmp	r3, #32
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b20      	cmp	r3, #32
 8002332:	d107      	bne.n	8002344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0220 	mvn.w	r2, #32
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa36 	bl	80027b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_TIM_ConfigClockSource+0x18>
 8002360:	2302      	movs	r3, #2
 8002362:	e0a6      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x166>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d067      	beq.n	800246c <HAL_TIM_ConfigClockSource+0x120>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d80b      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x6c>
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d073      	beq.n	800248c <HAL_TIM_ConfigClockSource+0x140>
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d802      	bhi.n	80023ae <HAL_TIM_ConfigClockSource+0x62>
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d06f      	beq.n	800248c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023ac:	e078      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d06c      	beq.n	800248c <HAL_TIM_ConfigClockSource+0x140>
 80023b2:	2b30      	cmp	r3, #48	; 0x30
 80023b4:	d06a      	beq.n	800248c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80023b6:	e073      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023b8:	2b70      	cmp	r3, #112	; 0x70
 80023ba:	d00d      	beq.n	80023d8 <HAL_TIM_ConfigClockSource+0x8c>
 80023bc:	2b70      	cmp	r3, #112	; 0x70
 80023be:	d804      	bhi.n	80023ca <HAL_TIM_ConfigClockSource+0x7e>
 80023c0:	2b50      	cmp	r3, #80	; 0x50
 80023c2:	d033      	beq.n	800242c <HAL_TIM_ConfigClockSource+0xe0>
 80023c4:	2b60      	cmp	r3, #96	; 0x60
 80023c6:	d041      	beq.n	800244c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80023c8:	e06a      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	d066      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x152>
 80023d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d4:	d017      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023d6:	e063      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f000 f965 	bl	80026b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]
      break;
 8002404:	e04c      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f000 f94e 	bl	80026b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002428:	609a      	str	r2, [r3, #8]
      break;
 800242a:	e039      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	461a      	mov	r2, r3
 800243a:	f000 f8c5 	bl	80025c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2150      	movs	r1, #80	; 0x50
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f91c 	bl	8002682 <TIM_ITRx_SetConfig>
      break;
 800244a:	e029      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	461a      	mov	r2, r3
 800245a:	f000 f8e3 	bl	8002624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2160      	movs	r1, #96	; 0x60
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f90c 	bl	8002682 <TIM_ITRx_SetConfig>
      break;
 800246a:	e019      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	461a      	mov	r2, r3
 800247a:	f000 f8a5 	bl	80025c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2140      	movs	r1, #64	; 0x40
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f8fc 	bl	8002682 <TIM_ITRx_SetConfig>
      break;
 800248a:	e009      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f000 f8f3 	bl	8002682 <TIM_ITRx_SetConfig>
        break;
 800249c:	e000      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800249e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a29      	ldr	r2, [pc, #164]	; (80025bc <TIM_Base_SetConfig+0xb8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00b      	beq.n	8002534 <TIM_Base_SetConfig+0x30>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d007      	beq.n	8002534 <TIM_Base_SetConfig+0x30>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <TIM_Base_SetConfig+0xbc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <TIM_Base_SetConfig+0x30>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <TIM_Base_SetConfig+0xc0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <TIM_Base_SetConfig+0xb8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <TIM_Base_SetConfig+0x62>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002554:	d007      	beq.n	8002566 <TIM_Base_SetConfig+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <TIM_Base_SetConfig+0xbc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <TIM_Base_SetConfig+0x62>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <TIM_Base_SetConfig+0xc0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a07      	ldr	r2, [pc, #28]	; (80025bc <TIM_Base_SetConfig+0xb8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d103      	bne.n	80025ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	615a      	str	r2, [r3, #20]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800

080025c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0201 	bic.w	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 030a 	bic.w	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	621a      	str	r2, [r3, #32]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 0210 	bic.w	r2, r3, #16
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800264e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002660:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	621a      	str	r2, [r3, #32]
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	f043 0307 	orr.w	r3, r3, #7
 80026a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b087      	sub	sp, #28
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	021a      	lsls	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4313      	orrs	r3, r2
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	609a      	str	r2, [r3, #8]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002708:	2302      	movs	r3, #2
 800270a:	e046      	b.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00e      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d009      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10c      	bne.n	8002788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4313      	orrs	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800

080027b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e03f      	b.n	8002866 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fb0c 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fc11 	bl	8003040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800282c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800283c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800284c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b08a      	sub	sp, #40	; 0x28
 8002872:	af02      	add	r7, sp, #8
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	d17c      	bne.n	8002988 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_UART_Transmit+0x2c>
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e075      	b.n	800298a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_UART_Transmit+0x3e>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e06e      	b.n	800298a <HAL_UART_Transmit+0x11c>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2221      	movs	r2, #33	; 0x21
 80028be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fc13 	bl	80010ec <HAL_GetTick>
 80028c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028dc:	d108      	bne.n	80028f0 <HAL_UART_Transmit+0x82>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e003      	b.n	80028f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002900:	e02a      	b.n	8002958 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fa35 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e036      	b.n	800298a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002930:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	3302      	adds	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	e007      	b.n	800294a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	3301      	adds	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1cf      	bne.n	8002902 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fa05 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e006      	b.n	800298a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b08a      	sub	sp, #40	; 0x28
 8002996:	af02      	add	r7, sp, #8
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	f040 8089 	bne.w	8002ac6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_UART_Receive+0x2e>
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e081      	b.n	8002ac8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Receive+0x40>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e07a      	b.n	8002ac8 <HAL_UART_Receive+0x136>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2222      	movs	r2, #34	; 0x22
 80029e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fb80 	bl	80010ec <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d108      	bne.n	8002a16 <HAL_UART_Receive+0x84>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e003      	b.n	8002a1e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a26:	e043      	b.n	8002ab0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2120      	movs	r1, #32
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f9a2 	bl	8002d7c <UART_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e042      	b.n	8002ac8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10c      	bne.n	8002a62 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e01f      	b.n	8002aa2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d007      	beq.n	8002a7c <HAL_UART_Receive+0xea>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_UART_Receive+0xf8>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e008      	b.n	8002a9c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1b6      	bne.n	8002a28 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d130      	bne.n	8002b4c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_UART_Transmit_IT+0x26>
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e029      	b.n	8002b4e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_UART_Transmit_IT+0x38>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e022      	b.n	8002b4e <HAL_UART_Transmit_IT+0x7e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2221      	movs	r2, #33	; 0x21
 8002b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b46:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_UART_IRQHandler+0x52>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9cc 	bl	8002f40 <UART_Receive_IT>
      return;
 8002ba8:	e0d1      	b.n	8002d4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80b0 	beq.w	8002d12 <HAL_UART_IRQHandler+0x1ba>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_UART_IRQHandler+0x70>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80a5 	beq.w	8002d12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_UART_IRQHandler+0x90>
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_UART_IRQHandler+0xb0>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	f043 0202 	orr.w	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_UART_IRQHandler+0xd0>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00f      	beq.n	8002c52 <HAL_UART_IRQHandler+0xfa>
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_UART_IRQHandler+0xee>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	f043 0208 	orr.w	r2, r3, #8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d078      	beq.n	8002d4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_UART_IRQHandler+0x11c>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f966 	bl	8002f40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_UART_IRQHandler+0x144>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d031      	beq.n	8002d00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8b7 	bl	8002e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d023      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_UART_IRQHandler+0x1fc>)
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fb43 	bl	8001360 <HAL_DMA_Abort_IT>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d016      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cea:	4610      	mov	r0, r2
 8002cec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cee:	e00e      	b.n	8002d0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f83a 	bl	8002d6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf6:	e00a      	b.n	8002d0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f836 	bl	8002d6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfe:	e006      	b.n	8002d0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f832 	bl	8002d6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d0c:	e01e      	b.n	8002d4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0e:	bf00      	nop
    return;
 8002d10:	e01c      	b.n	8002d4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1d6>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8a3 	bl	8002e72 <UART_Transmit_IT>
    return;
 8002d2c:	e00f      	b.n	8002d4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_UART_IRQHandler+0x1f6>
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8e4 	bl	8002f10 <UART_EndTransmit_IT>
    return;
 8002d48:	bf00      	nop
 8002d4a:	e000      	b.n	8002d4e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d4c:	bf00      	nop
  }
}
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	08002e4b 	.word	0x08002e4b

08002d58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8c:	e02c      	b.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d028      	beq.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d007      	beq.n	8002dac <UART_WaitOnFlagUntilTimeout+0x30>
 8002d9c:	f7fe f9a6 	bl	80010ec <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d21d      	bcs.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e00f      	b.n	8002e08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d0c3      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff ff80 	bl	8002d6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b21      	cmp	r3, #33	; 0x21
 8002e84:	d13e      	bne.n	8002f04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8e:	d114      	bne.n	8002eba <UART_Transmit_IT+0x48>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d110      	bne.n	8002eba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	621a      	str	r2, [r3, #32]
 8002eb8:	e008      	b.n	8002ecc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	1c59      	adds	r1, r3, #1
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6211      	str	r1, [r2, #32]
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10f      	bne.n	8002f00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fd fcb7 	bl	80008a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b22      	cmp	r3, #34	; 0x22
 8002f52:	d170      	bne.n	8003036 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d117      	bne.n	8002f8e <UART_Receive_IT+0x4e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d113      	bne.n	8002f8e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f8c:	e026      	b.n	8002fdc <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa0:	d007      	beq.n	8002fb2 <UART_Receive_IT+0x72>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <UART_Receive_IT+0x80>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e008      	b.n	8002fd2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d120      	bne.n	8003032 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0220 	bic.w	r2, r2, #32
 8002ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800300e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fe95 	bl	8002d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e002      	b.n	8003038 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800307a:	f023 030c 	bic.w	r3, r3, #12
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <UART_SetConfig+0x114>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030a8:	f7fe ff46 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	e002      	b.n	80030b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b0:	f7fe ff2e 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 80030b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	4a22      	ldr	r2, [pc, #136]	; (8003158 <UART_SetConfig+0x118>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	0119      	lsls	r1, r3, #4
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <UART_SetConfig+0x118>)
 80030ee:	fba3 0302 	umull	r0, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2064      	movs	r0, #100	; 0x64
 80030f6:	fb00 f303 	mul.w	r3, r0, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <UART_SetConfig+0x118>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310c:	4419      	add	r1, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <UART_SetConfig+0x118>)
 8003126:	fba3 0302 	umull	r0, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	3332      	adds	r3, #50	; 0x32
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <UART_SetConfig+0x118>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	440a      	add	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40013800 	.word	0x40013800
 8003158:	51eb851f 	.word	0x51eb851f

0800315c <__libc_init_array>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	2500      	movs	r5, #0
 8003160:	4e0c      	ldr	r6, [pc, #48]	; (8003194 <__libc_init_array+0x38>)
 8003162:	4c0d      	ldr	r4, [pc, #52]	; (8003198 <__libc_init_array+0x3c>)
 8003164:	1ba4      	subs	r4, r4, r6
 8003166:	10a4      	asrs	r4, r4, #2
 8003168:	42a5      	cmp	r5, r4
 800316a:	d109      	bne.n	8003180 <__libc_init_array+0x24>
 800316c:	f000 f822 	bl	80031b4 <_init>
 8003170:	2500      	movs	r5, #0
 8003172:	4e0a      	ldr	r6, [pc, #40]	; (800319c <__libc_init_array+0x40>)
 8003174:	4c0a      	ldr	r4, [pc, #40]	; (80031a0 <__libc_init_array+0x44>)
 8003176:	1ba4      	subs	r4, r4, r6
 8003178:	10a4      	asrs	r4, r4, #2
 800317a:	42a5      	cmp	r5, r4
 800317c:	d105      	bne.n	800318a <__libc_init_array+0x2e>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003184:	4798      	blx	r3
 8003186:	3501      	adds	r5, #1
 8003188:	e7ee      	b.n	8003168 <__libc_init_array+0xc>
 800318a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800318e:	4798      	blx	r3
 8003190:	3501      	adds	r5, #1
 8003192:	e7f2      	b.n	800317a <__libc_init_array+0x1e>
 8003194:	080033a8 	.word	0x080033a8
 8003198:	080033a8 	.word	0x080033a8
 800319c:	080033a8 	.word	0x080033a8
 80031a0:	080033ac 	.word	0x080033ac

080031a4 <memset>:
 80031a4:	4603      	mov	r3, r0
 80031a6:	4402      	add	r2, r0
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d100      	bne.n	80031ae <memset+0xa>
 80031ac:	4770      	bx	lr
 80031ae:	f803 1b01 	strb.w	r1, [r3], #1
 80031b2:	e7f9      	b.n	80031a8 <memset+0x4>

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
