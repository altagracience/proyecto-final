
centralv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002c38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002c38  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a659  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001822  00000000  00000000  0002a68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002ca68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000172e4  00000000  00000000  0002d558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ec2  00000000  00000000  0004483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088e7b  00000000  00000000  0004d6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  000d65f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bdc 	.word	0x08002bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002bdc 	.word	0x08002bdc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fccb 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9b7 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fac1 	bl	80006e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 fa95 	bl	800068c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000162:	f000 fa45 	bl	80005f0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000166:	f000 f9f5 	bl	8000554 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  eSystemState NextState;
  uint8_t RSSI_value[3] = {0,0,0};
 800016a:	2300      	movs	r3, #0
 800016c:	743b      	strb	r3, [r7, #16]
 800016e:	2300      	movs	r3, #0
 8000170:	747b      	strb	r3, [r7, #17]
 8000172:	2300      	movs	r3, #0
 8000174:	74bb      	strb	r3, [r7, #18]
  uint8_t estado_inhi[3] = {0,0,0};
 8000176:	2300      	movs	r3, #0
 8000178:	733b      	strb	r3, [r7, #12]
 800017a:	2300      	movs	r3, #0
 800017c:	737b      	strb	r3, [r7, #13]
 800017e:	2300      	movs	r3, #0
 8000180:	73bb      	strb	r3, [r7, #14]
  uint8_t cRx = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	75bb      	strb	r3, [r7, #22]
  uint8_t err = 0, eRx = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	74fb      	strb	r3, [r7, #19]
 800018a:	2300      	movs	r3, #0
 800018c:	757b      	strb	r3, [r7, #21]
  uint8_t i = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	753b      	strb	r3, [r7, #20]
  char in[3] = {0, 0, 0};
 8000192:	2300      	movs	r3, #0
 8000194:	723b      	strb	r3, [r7, #8]
 8000196:	2300      	movs	r3, #0
 8000198:	727b      	strb	r3, [r7, #9]
 800019a:	2300      	movs	r3, #0
 800019c:	72bb      	strb	r3, [r7, #10]
  char ch[2] = {0, 0};
 800019e:	2300      	movs	r3, #0
 80001a0:	713b      	strb	r3, [r7, #4]
 80001a2:	2300      	movs	r3, #0
 80001a4:	717b      	strb	r3, [r7, #5]
  uint8_t salud_nodos[3] = {1, 1, 1};
 80001a6:	4aa3      	ldr	r2, [pc, #652]	; (8000434 <main+0x2e8>)
 80001a8:	463b      	mov	r3, r7
 80001aa:	6812      	ldr	r2, [r2, #0]
 80001ac:	4611      	mov	r1, r2
 80001ae:	8019      	strh	r1, [r3, #0]
 80001b0:	3302      	adds	r3, #2
 80001b2:	0c12      	lsrs	r2, r2, #16
 80001b4:	701a      	strb	r2, [r3, #0]


  NextState = Reset_State;
 80001b6:	2302      	movs	r3, #2
 80001b8:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // DE - Comunicacion RS485 - Se coloca en bajo para estar en modo recepcion
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c0:	489d      	ldr	r0, [pc, #628]	; (8000438 <main+0x2ec>)
 80001c2:	f000 fff5 	bl	80011b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // RE - Comunicacion RS485 - Se coloca en bajo para escuchar todo el tiempoc
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001cc:	489a      	ldr	r0, [pc, #616]	; (8000438 <main+0x2ec>)
 80001ce:	f000 ffef 	bl	80011b0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(NextState){
 80001d2:	7dfb      	ldrb	r3, [r7, #23]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d05a      	beq.n	800028e <main+0x142>
 80001d8:	2b02      	cmp	r3, #2
 80001da:	f000 8122 	beq.w	8000422 <main+0x2d6>
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f040 8167 	bne.w	80004b2 <main+0x366>
	  	  case No_Inhibicion_State:

	  		  HAL_Delay(100);
 80001e4:	2064      	movs	r0, #100	; 0x64
 80001e6:	f000 fce3 	bl	8000bb0 <HAL_Delay>

	  		  ch[1] = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	717b      	strb	r3, [r7, #5]
	  		  in[2] = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72bb      	strb	r3, [r7, #10]

			  if 	  (cRx == 0) ch[0] = 'A';
 80001f2:	7dbb      	ldrb	r3, [r7, #22]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d102      	bne.n	80001fe <main+0xb2>
 80001f8:	2341      	movs	r3, #65	; 0x41
 80001fa:	713b      	strb	r3, [r7, #4]
 80001fc:	e00a      	b.n	8000214 <main+0xc8>
			  else if (cRx == 1) ch[0] = 'B';
 80001fe:	7dbb      	ldrb	r3, [r7, #22]
 8000200:	2b01      	cmp	r3, #1
 8000202:	d102      	bne.n	800020a <main+0xbe>
 8000204:	2342      	movs	r3, #66	; 0x42
 8000206:	713b      	strb	r3, [r7, #4]
 8000208:	e004      	b.n	8000214 <main+0xc8>
			  else if (cRx == 2) ch[0] = 'C';
 800020a:	7dbb      	ldrb	r3, [r7, #22]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d101      	bne.n	8000214 <main+0xc8>
 8000210:	2343      	movs	r3, #67	; 0x43
 8000212:	713b      	strb	r3, [r7, #4]


	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000214:	2201      	movs	r2, #1
 8000216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021a:	4887      	ldr	r0, [pc, #540]	; (8000438 <main+0x2ec>)
 800021c:	f000 ffc8 	bl	80011b0 <HAL_GPIO_WritePin>

	  		  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 2, 50);
 8000220:	1d39      	adds	r1, r7, #4
 8000222:	2332      	movs	r3, #50	; 0x32
 8000224:	2202      	movs	r2, #2
 8000226:	4885      	ldr	r0, [pc, #532]	; (800043c <main+0x2f0>)
 8000228:	f002 f879 	bl	800231e <HAL_UART_Transmit>
	  		  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 800022c:	f107 0108 	add.w	r1, r7, #8
 8000230:	230a      	movs	r3, #10
 8000232:	2201      	movs	r2, #1
 8000234:	4881      	ldr	r0, [pc, #516]	; (800043c <main+0x2f0>)
 8000236:	f002 f904 	bl	8002442 <HAL_UART_Receive>

	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000240:	487d      	ldr	r0, [pc, #500]	; (8000438 <main+0x2ec>)
 8000242:	f000 ffb5 	bl	80011b0 <HAL_GPIO_WritePin>

	  		  in[2] = in[1] = in[0] = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	723b      	strb	r3, [r7, #8]
 800024a:	7a3b      	ldrb	r3, [r7, #8]
 800024c:	727b      	strb	r3, [r7, #9]
 800024e:	7a7b      	ldrb	r3, [r7, #9]
 8000250:	72bb      	strb	r3, [r7, #10]
	  		  err = HAL_UART_Receive(&huart1, (uint8_t *)in, 3, 200);
 8000252:	f107 0108 	add.w	r1, r7, #8
 8000256:	23c8      	movs	r3, #200	; 0xc8
 8000258:	2203      	movs	r2, #3
 800025a:	4878      	ldr	r0, [pc, #480]	; (800043c <main+0x2f0>)
 800025c:	f002 f8f1 	bl	8002442 <HAL_UART_Receive>
 8000260:	4603      	mov	r3, r0
 8000262:	74fb      	strb	r3, [r7, #19]


	  		  if (cRx >= 2)
 8000264:	7dbb      	ldrb	r3, [r7, #22]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d902      	bls.n	8000270 <main+0x124>
	  			  cRx = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	75bb      	strb	r3, [r7, #22]
 800026e:	e002      	b.n	8000276 <main+0x12a>

	  		  else cRx++;
 8000270:	7dbb      	ldrb	r3, [r7, #22]
 8000272:	3301      	adds	r3, #1
 8000274:	75bb      	strb	r3, [r7, #22]

	  		  if(in[2] == 1 || in[2] == 2){
 8000276:	7abb      	ldrb	r3, [r7, #10]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d003      	beq.n	8000284 <main+0x138>
 800027c:	7abb      	ldrb	r3, [r7, #10]
 800027e:	2b02      	cmp	r3, #2
 8000280:	f040 811a 	bne.w	80004b8 <main+0x36c>
	  			  NextState = Inhibicion_State;
 8000284:	2301      	movs	r3, #1
 8000286:	75fb      	strb	r3, [r7, #23]
	  			  cRx = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	75bb      	strb	r3, [r7, #22]
	  		  }

	  		  break;
 800028c:	e114      	b.n	80004b8 <main+0x36c>

	  	  case Inhibicion_State:

	  		  HAL_Delay(200);
 800028e:	20c8      	movs	r0, #200	; 0xc8
 8000290:	f000 fc8e 	bl	8000bb0 <HAL_Delay>

	  		  ch[1] = 1;
 8000294:	2301      	movs	r3, #1
 8000296:	717b      	strb	r3, [r7, #5]
	  		  in[0] = in[1] = in[2] = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	72bb      	strb	r3, [r7, #10]
 800029c:	7abb      	ldrb	r3, [r7, #10]
 800029e:	727b      	strb	r3, [r7, #9]
 80002a0:	7a7b      	ldrb	r3, [r7, #9]
 80002a2:	723b      	strb	r3, [r7, #8]


	  		  if 	  (cRx == 0) ch[0] = 'A';
 80002a4:	7dbb      	ldrb	r3, [r7, #22]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d102      	bne.n	80002b0 <main+0x164>
 80002aa:	2341      	movs	r3, #65	; 0x41
 80002ac:	713b      	strb	r3, [r7, #4]
 80002ae:	e00a      	b.n	80002c6 <main+0x17a>
	  		  else if (cRx == 1) ch[0] = 'B';
 80002b0:	7dbb      	ldrb	r3, [r7, #22]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d102      	bne.n	80002bc <main+0x170>
 80002b6:	2342      	movs	r3, #66	; 0x42
 80002b8:	713b      	strb	r3, [r7, #4]
 80002ba:	e004      	b.n	80002c6 <main+0x17a>
	  		  else if (cRx == 2) ch[0] = 'C';
 80002bc:	7dbb      	ldrb	r3, [r7, #22]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d101      	bne.n	80002c6 <main+0x17a>
 80002c2:	2343      	movs	r3, #67	; 0x43
 80002c4:	713b      	strb	r3, [r7, #4]

	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002cc:	485a      	ldr	r0, [pc, #360]	; (8000438 <main+0x2ec>)
 80002ce:	f000 ff6f 	bl	80011b0 <HAL_GPIO_WritePin>

	  		  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 2, 50);
 80002d2:	1d39      	adds	r1, r7, #4
 80002d4:	2332      	movs	r3, #50	; 0x32
 80002d6:	2202      	movs	r2, #2
 80002d8:	4858      	ldr	r0, [pc, #352]	; (800043c <main+0x2f0>)
 80002da:	f002 f820 	bl	800231e <HAL_UART_Transmit>
	  		  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 80002de:	f107 0108 	add.w	r1, r7, #8
 80002e2:	230a      	movs	r3, #10
 80002e4:	2201      	movs	r2, #1
 80002e6:	4855      	ldr	r0, [pc, #340]	; (800043c <main+0x2f0>)
 80002e8:	f002 f8ab 	bl	8002442 <HAL_UART_Receive>

	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f2:	4851      	ldr	r0, [pc, #324]	; (8000438 <main+0x2ec>)
 80002f4:	f000 ff5c 	bl	80011b0 <HAL_GPIO_WritePin>

			  in[2] = in[1] = in[0] = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	723b      	strb	r3, [r7, #8]
 80002fc:	7a3b      	ldrb	r3, [r7, #8]
 80002fe:	727b      	strb	r3, [r7, #9]
 8000300:	7a7b      	ldrb	r3, [r7, #9]
 8000302:	72bb      	strb	r3, [r7, #10]

			  err = HAL_UART_Receive(&huart1, (uint8_t *)in, 3, 100);
 8000304:	f107 0108 	add.w	r1, r7, #8
 8000308:	2364      	movs	r3, #100	; 0x64
 800030a:	2203      	movs	r2, #3
 800030c:	484b      	ldr	r0, [pc, #300]	; (800043c <main+0x2f0>)
 800030e:	f002 f898 	bl	8002442 <HAL_UART_Receive>
 8000312:	4603      	mov	r3, r0
 8000314:	74fb      	strb	r3, [r7, #19]


			  if(cRx == 0 && in[0] == 'A'){
 8000316:	7dbb      	ldrb	r3, [r7, #22]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d118      	bne.n	800034e <main+0x202>
 800031c:	7a3b      	ldrb	r3, [r7, #8]
 800031e:	2b41      	cmp	r3, #65	; 0x41
 8000320:	d115      	bne.n	800034e <main+0x202>
				  if (in[1] > 120 || in[1] < 10) RSSI_value[0] = 0;
 8000322:	7a7b      	ldrb	r3, [r7, #9]
 8000324:	2b78      	cmp	r3, #120	; 0x78
 8000326:	d802      	bhi.n	800032e <main+0x1e2>
 8000328:	7a7b      	ldrb	r3, [r7, #9]
 800032a:	2b09      	cmp	r3, #9
 800032c:	d802      	bhi.n	8000334 <main+0x1e8>
 800032e:	2300      	movs	r3, #0
 8000330:	743b      	strb	r3, [r7, #16]
 8000332:	e001      	b.n	8000338 <main+0x1ec>
				  else RSSI_value[0] = in[1];
 8000334:	7a7b      	ldrb	r3, [r7, #9]
 8000336:	743b      	strb	r3, [r7, #16]

				  if (in[2] > 2) estado_inhi[0] = 0;
 8000338:	7abb      	ldrb	r3, [r7, #10]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d902      	bls.n	8000344 <main+0x1f8>
 800033e:	2300      	movs	r3, #0
 8000340:	733b      	strb	r3, [r7, #12]
 8000342:	e001      	b.n	8000348 <main+0x1fc>
				  else estado_inhi[0] = in[2];
 8000344:	7abb      	ldrb	r3, [r7, #10]
 8000346:	733b      	strb	r3, [r7, #12]
				  eRx = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	757b      	strb	r3, [r7, #21]
 800034c:	e036      	b.n	80003bc <main+0x270>

			  }
			  else if(cRx == 1 && in[0] == 'B'){
 800034e:	7dbb      	ldrb	r3, [r7, #22]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d118      	bne.n	8000386 <main+0x23a>
 8000354:	7a3b      	ldrb	r3, [r7, #8]
 8000356:	2b42      	cmp	r3, #66	; 0x42
 8000358:	d115      	bne.n	8000386 <main+0x23a>
				  if (in[1] > 120 || in[1] < 10) RSSI_value[1] = 0;
 800035a:	7a7b      	ldrb	r3, [r7, #9]
 800035c:	2b78      	cmp	r3, #120	; 0x78
 800035e:	d802      	bhi.n	8000366 <main+0x21a>
 8000360:	7a7b      	ldrb	r3, [r7, #9]
 8000362:	2b09      	cmp	r3, #9
 8000364:	d802      	bhi.n	800036c <main+0x220>
 8000366:	2300      	movs	r3, #0
 8000368:	747b      	strb	r3, [r7, #17]
 800036a:	e001      	b.n	8000370 <main+0x224>
				  else RSSI_value[1] = in[1];
 800036c:	7a7b      	ldrb	r3, [r7, #9]
 800036e:	747b      	strb	r3, [r7, #17]

				  if (in[2] > 2) estado_inhi[1] = 0;
 8000370:	7abb      	ldrb	r3, [r7, #10]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d902      	bls.n	800037c <main+0x230>
 8000376:	2300      	movs	r3, #0
 8000378:	737b      	strb	r3, [r7, #13]
 800037a:	e001      	b.n	8000380 <main+0x234>
				  else estado_inhi[1] = in[2];
 800037c:	7abb      	ldrb	r3, [r7, #10]
 800037e:	737b      	strb	r3, [r7, #13]
				  eRx = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	757b      	strb	r3, [r7, #21]
 8000384:	e01a      	b.n	80003bc <main+0x270>
			  }
			  else if(cRx == 2 && in[0] == 'C'){
 8000386:	7dbb      	ldrb	r3, [r7, #22]
 8000388:	2b02      	cmp	r3, #2
 800038a:	d117      	bne.n	80003bc <main+0x270>
 800038c:	7a3b      	ldrb	r3, [r7, #8]
 800038e:	2b43      	cmp	r3, #67	; 0x43
 8000390:	d114      	bne.n	80003bc <main+0x270>
				  if (in[1] > 120 || in[1] < 10) RSSI_value[2] = 0;
 8000392:	7a7b      	ldrb	r3, [r7, #9]
 8000394:	2b78      	cmp	r3, #120	; 0x78
 8000396:	d802      	bhi.n	800039e <main+0x252>
 8000398:	7a7b      	ldrb	r3, [r7, #9]
 800039a:	2b09      	cmp	r3, #9
 800039c:	d802      	bhi.n	80003a4 <main+0x258>
 800039e:	2300      	movs	r3, #0
 80003a0:	74bb      	strb	r3, [r7, #18]
 80003a2:	e001      	b.n	80003a8 <main+0x25c>
				  else RSSI_value[2] = in[1];
 80003a4:	7a7b      	ldrb	r3, [r7, #9]
 80003a6:	74bb      	strb	r3, [r7, #18]

				  if (in[2] > 2) estado_inhi[2] = 0;
 80003a8:	7abb      	ldrb	r3, [r7, #10]
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d902      	bls.n	80003b4 <main+0x268>
 80003ae:	2300      	movs	r3, #0
 80003b0:	73bb      	strb	r3, [r7, #14]
 80003b2:	e001      	b.n	80003b8 <main+0x26c>
				  else estado_inhi[2] = in[2];
 80003b4:	7abb      	ldrb	r3, [r7, #10]
 80003b6:	73bb      	strb	r3, [r7, #14]
				  eRx = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	757b      	strb	r3, [r7, #21]
			  }

			  if(err == 3){  //si la recepcion resulta en timeout
 80003bc:	7cfb      	ldrb	r3, [r7, #19]
 80003be:	2b03      	cmp	r3, #3
 80003c0:	d10c      	bne.n	80003dc <main+0x290>
				  eRx++;
 80003c2:	7d7b      	ldrb	r3, [r7, #21]
 80003c4:	3301      	adds	r3, #1
 80003c6:	757b      	strb	r3, [r7, #21]
				  if(eRx >= 5) //y el nodo no responde en reiterados intentos se denota como con falla
 80003c8:	7d7b      	ldrb	r3, [r7, #21]
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	d906      	bls.n	80003dc <main+0x290>
					  salud_nodos[cRx] = 0;
 80003ce:	7dbb      	ldrb	r3, [r7, #22]
 80003d0:	f107 0218 	add.w	r2, r7, #24
 80003d4:	4413      	add	r3, r2
 80003d6:	2200      	movs	r2, #0
 80003d8:	f803 2c18 	strb.w	r2, [r3, #-24]
			  }



			  if (eRx >= 5 || err != 3) {
 80003dc:	7d7b      	ldrb	r3, [r7, #21]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d802      	bhi.n	80003e8 <main+0x29c>
 80003e2:	7cfb      	ldrb	r3, [r7, #19]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d004      	beq.n	80003f2 <main+0x2a6>
				  cRx++;
 80003e8:	7dbb      	ldrb	r3, [r7, #22]
 80003ea:	3301      	adds	r3, #1
 80003ec:	75bb      	strb	r3, [r7, #22]
				  eRx = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	757b      	strb	r3, [r7, #21]
			  }

			  if (cRx == 3){
 80003f2:	7dbb      	ldrb	r3, [r7, #22]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d161      	bne.n	80004bc <main+0x370>
				  if(estado_inhi[0] || estado_inhi[1] || estado_inhi[2]) //desata alarma visual y sonora en la central
 80003f8:	7b3b      	ldrb	r3, [r7, #12]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d105      	bne.n	800040a <main+0x2be>
 80003fe:	7b7b      	ldrb	r3, [r7, #13]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <main+0x2be>
 8000404:	7bbb      	ldrb	r3, [r7, #14]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <main+0x2c4>
					  HAL_TIM_Base_Start_IT(&htim4);
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <main+0x2f4>)
 800040c:	f001 fb6e 	bl	8001aec <HAL_TIM_Base_Start_IT>

				  salud_nodos[0] = salud_nodos[1] = salud_nodos[2] = 1;
 8000410:	2301      	movs	r3, #1
 8000412:	70bb      	strb	r3, [r7, #2]
 8000414:	78bb      	ldrb	r3, [r7, #2]
 8000416:	707b      	strb	r3, [r7, #1]
 8000418:	787b      	ldrb	r3, [r7, #1]
 800041a:	703b      	strb	r3, [r7, #0]
				  NextState = Reset_State;
 800041c:	2302      	movs	r3, #2
 800041e:	75fb      	strb	r3, [r7, #23]


			  }
			  break;
 8000420:	e04c      	b.n	80004bc <main+0x370>

	  	  case Reset_State:

	  		in[2] = in[1] = in[0] = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	723b      	strb	r3, [r7, #8]
 8000426:	7a3b      	ldrb	r3, [r7, #8]
 8000428:	727b      	strb	r3, [r7, #9]
 800042a:	7a7b      	ldrb	r3, [r7, #9]
 800042c:	72bb      	strb	r3, [r7, #10]

	  		for(i = 0; i < 5; i++){
 800042e:	2300      	movs	r3, #0
 8000430:	753b      	strb	r3, [r7, #20]
 8000432:	e02a      	b.n	800048a <main+0x33e>
 8000434:	08002bf4 	.word	0x08002bf4
 8000438:	40010800 	.word	0x40010800
 800043c:	200000c0 	.word	0x200000c0
 8000440:	20000030 	.word	0x20000030

	  			  HAL_Delay(200);
 8000444:	20c8      	movs	r0, #200	; 0xc8
 8000446:	f000 fbb3 	bl	8000bb0 <HAL_Delay>

	  			  ch[0] = 'A';
 800044a:	2341      	movs	r3, #65	; 0x41
 800044c:	713b      	strb	r3, [r7, #4]
				  ch[1] = 2;
 800044e:	2302      	movs	r3, #2
 8000450:	717b      	strb	r3, [r7, #5]

				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000458:	4819      	ldr	r0, [pc, #100]	; (80004c0 <main+0x374>)
 800045a:	f000 fea9 	bl	80011b0 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 2, 50);
 800045e:	1d39      	adds	r1, r7, #4
 8000460:	2332      	movs	r3, #50	; 0x32
 8000462:	2202      	movs	r2, #2
 8000464:	4817      	ldr	r0, [pc, #92]	; (80004c4 <main+0x378>)
 8000466:	f001 ff5a 	bl	800231e <HAL_UART_Transmit>
				  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 800046a:	f107 0108 	add.w	r1, r7, #8
 800046e:	230a      	movs	r3, #10
 8000470:	2201      	movs	r2, #1
 8000472:	4814      	ldr	r0, [pc, #80]	; (80004c4 <main+0x378>)
 8000474:	f001 ffe5 	bl	8002442 <HAL_UART_Receive>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047e:	4810      	ldr	r0, [pc, #64]	; (80004c0 <main+0x374>)
 8000480:	f000 fe96 	bl	80011b0 <HAL_GPIO_WritePin>
	  		for(i = 0; i < 5; i++){
 8000484:	7d3b      	ldrb	r3, [r7, #20]
 8000486:	3301      	adds	r3, #1
 8000488:	753b      	strb	r3, [r7, #20]
 800048a:	7d3b      	ldrb	r3, [r7, #20]
 800048c:	2b04      	cmp	r3, #4
 800048e:	d9d9      	bls.n	8000444 <main+0x2f8>
	  		  }

	  		  estado_inhi[0] = estado_inhi[1] = estado_inhi[2] = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	73bb      	strb	r3, [r7, #14]
 8000494:	7bbb      	ldrb	r3, [r7, #14]
 8000496:	737b      	strb	r3, [r7, #13]
 8000498:	7b7b      	ldrb	r3, [r7, #13]
 800049a:	733b      	strb	r3, [r7, #12]
	  		  RSSI_value[0] = RSSI_value[1] = RSSI_value[2] = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	74bb      	strb	r3, [r7, #18]
 80004a0:	7cbb      	ldrb	r3, [r7, #18]
 80004a2:	747b      	strb	r3, [r7, #17]
 80004a4:	7c7b      	ldrb	r3, [r7, #17]
 80004a6:	743b      	strb	r3, [r7, #16]
	  		  cRx = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	75bb      	strb	r3, [r7, #22]

			  NextState = No_Inhibicion_State;
 80004ac:	2300      	movs	r3, #0
 80004ae:	75fb      	strb	r3, [r7, #23]
			  break;
 80004b0:	e005      	b.n	80004be <main+0x372>

	  	  default:
	  		NextState = Reset_State;
 80004b2:	2302      	movs	r3, #2
 80004b4:	75fb      	strb	r3, [r7, #23]
 80004b6:	e68c      	b.n	80001d2 <main+0x86>
	  		  break;
 80004b8:	bf00      	nop
 80004ba:	e68a      	b.n	80001d2 <main+0x86>
			  break;
 80004bc:	bf00      	nop
	  switch(NextState){
 80004be:	e688      	b.n	80001d2 <main+0x86>
 80004c0:	40010800 	.word	0x40010800
 80004c4:	200000c0 	.word	0x200000c0

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	; 0x40
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	2228      	movs	r2, #40	; 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fb78 	bl	8002bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2301      	movs	r3, #1
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fc:	2302      	movs	r3, #2
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000506:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fe7f 	bl	8001214 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800051c:	f000 f9b6 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2302      	movs	r3, #2
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800052c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2102      	movs	r1, #2
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f8ea 	bl	8001714 <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f9a1 	bl	800088c <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3740      	adds	r7, #64	; 0x40
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_TIM3_Init+0x94>)
 8000572:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <MX_TIM3_Init+0x98>)
 8000574:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1439;
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <MX_TIM3_Init+0x94>)
 8000578:	f240 529f 	movw	r2, #1439	; 0x59f
 800057c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_TIM3_Init+0x94>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_TIM3_Init+0x94>)
 8000586:	220a      	movs	r2, #10
 8000588:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_TIM3_Init+0x94>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_TIM3_Init+0x94>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000596:	4814      	ldr	r0, [pc, #80]	; (80005e8 <MX_TIM3_Init+0x94>)
 8000598:	f001 fa58 	bl	8001a4c <HAL_TIM_Base_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80005a2:	f000 f973 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <MX_TIM3_Init+0x94>)
 80005b4:	f001 fc22 	bl	8001dfc <HAL_TIM_ConfigClockSource>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80005be:	f000 f965 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4619      	mov	r1, r3
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <MX_TIM3_Init+0x94>)
 80005d0:	f001 fde8 	bl	80021a4 <HAL_TIMEx_MasterConfigSynchronization>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80005da:	f000 f957 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000078 	.word	0x20000078
 80005ec:	40000400 	.word	0x40000400

080005f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_TIM4_Init+0x94>)
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <MX_TIM4_Init+0x98>)
 8000610:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_TIM4_Init+0x94>)
 8000614:	f240 529f 	movw	r2, #1439	; 0x59f
 8000618:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_TIM4_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_TIM4_Init+0x94>)
 8000622:	220a      	movs	r2, #10
 8000624:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_TIM4_Init+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_TIM4_Init+0x94>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <MX_TIM4_Init+0x94>)
 8000634:	f001 fa0a 	bl	8001a4c <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f925 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_TIM4_Init+0x94>)
 8000650:	f001 fbd4 	bl	8001dfc <HAL_TIM_ConfigClockSource>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 f917 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_TIM4_Init+0x94>)
 800066c:	f001 fd9a 	bl	80021a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000676:	f000 f909 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000030 	.word	0x20000030
 8000688:	40000800 	.word	0x40000800

0800068c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART1_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000698:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b4:	220c      	movs	r2, #12
 80006b6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006c6:	f001 fddd 	bl	8002284 <HAL_UART_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80006d0:	f000 f8dc 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000c0 	.word	0x200000c0
 80006dc:	40013800 	.word	0x40013800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f4:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <MX_GPIO_Init+0xf0>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a35      	ldr	r2, [pc, #212]	; (80007d0 <MX_GPIO_Init+0xf0>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <MX_GPIO_Init+0xf0>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0320 	and.w	r3, r3, #32
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MX_GPIO_Init+0xf0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a2f      	ldr	r2, [pc, #188]	; (80007d0 <MX_GPIO_Init+0xf0>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0xf0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xf0>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <MX_GPIO_Init+0xf0>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_GPIO_Init+0xf0>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000742:	4824      	ldr	r0, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xf4>)
 8000744:	f000 fd34 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2150      	movs	r1, #80	; 0x50
 800074c:	4822      	ldr	r0, [pc, #136]	; (80007d8 <MX_GPIO_Init+0xf8>)
 800074e:	f000 fd2f 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	481a      	ldr	r0, [pc, #104]	; (80007d4 <MX_GPIO_Init+0xf4>)
 800076c:	f000 fbc6 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2302      	movs	r3, #2
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xf4>)
 800078a:	f000 fbb7 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800078e:	2310      	movs	r3, #16
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2302      	movs	r3, #2
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_GPIO_Init+0xf8>)
 80007a6:	f000 fba9 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0xf8>)
 80007c2:	f000 fb9b 	bl	8000efc <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40010c00 	.word	0x40010c00

080007dc <HAL_UART_TxCpltCallback>:
}*/




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_UART_TxCpltCallback+0x30>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d10a      	bne.n	8000804 <HAL_UART_TxCpltCallback+0x28>
		GSM_State++;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_UART_TxCpltCallback+0x34>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_UART_TxCpltCallback+0x34>)
 80007f8:	701a      	strb	r2, [r3, #0]
		GSM_Delay = HAL_GetTick();
 80007fa:	f000 f9cf 	bl	8000b9c <HAL_GetTick>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <HAL_UART_TxCpltCallback+0x38>)
 8000802:	601a      	str	r2, [r3, #0]
	}

}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004400 	.word	0x40004400
 8000810:	2000002a 	.word	0x2000002a
 8000814:	2000002c 	.word	0x2000002c

08000818 <HAL_TIM_PeriodElapsedCallback>:

}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM4){ //chequea que la interrupción sea la del timer adecuado
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a15      	ldr	r2, [pc, #84]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d124      	bne.n	8000874 <HAL_TIM_PeriodElapsedCallback+0x5c>

		contador1s++;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000834:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800083a:	f000 fcd1 	bl	80011e0 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000844:	f000 fcb4 	bl	80011b0 <HAL_GPIO_WritePin>
		if(contador1s == 5000) {
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000850:	4293      	cmp	r3, r2
 8000852:	d10f      	bne.n	8000874 <HAL_TIM_PeriodElapsedCallback+0x5c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	480a      	ldr	r0, [pc, #40]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800085a:	f000 fca9 	bl	80011b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000864:	f000 fca4 	bl	80011b0 <HAL_GPIO_WritePin>
			contador1s = 0;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]
			//GSM_Send();
			HAL_TIM_Base_Stop_IT(&htim4);
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000870:	f001 f98e 	bl	8001b90 <HAL_TIM_Base_Stop_IT>

		}

		}*/

}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40000800 	.word	0x40000800
 8000880:	20000028 	.word	0x20000028
 8000884:	40010c00 	.word	0x40010c00
 8000888:	20000030 	.word	0x20000030

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x60>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x60>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a16      	ldr	r2, [pc, #88]	; (8000964 <HAL_TIM_Base_MspInit+0x68>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d10c      	bne.n	8000928 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <HAL_TIM_Base_MspInit+0x6c>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <HAL_TIM_Base_MspInit+0x6c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <HAL_TIM_Base_MspInit+0x6c>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000926:	e018      	b.n	800095a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_TIM_Base_MspInit+0x70>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d113      	bne.n	800095a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_TIM_Base_MspInit+0x6c>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <HAL_TIM_Base_MspInit+0x6c>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_TIM_Base_MspInit+0x6c>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	201e      	movs	r0, #30
 8000950:	f000 fa27 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000954:	201e      	movs	r0, #30
 8000956:	f000 fa40 	bl	8000dda <HAL_NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40000400 	.word	0x40000400
 8000968:	40021000 	.word	0x40021000
 800096c:	40000800 	.word	0x40000800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <HAL_UART_MspInit+0x9c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d139      	bne.n	8000a04 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_UART_MspInit+0xa0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	480f      	ldr	r0, [pc, #60]	; (8000a14 <HAL_UART_MspInit+0xa4>)
 80009d6:	f000 fa91 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <HAL_UART_MspInit+0xa4>)
 80009f0:	f000 fa84 	bl	8000efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2025      	movs	r0, #37	; 0x25
 80009fa:	f000 f9d2 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009fe:	2025      	movs	r0, #37	; 0x25
 8000a00:	f000 f9eb 	bl	8000dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010800 	.word	0x40010800

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <BusFault_Handler+0x4>

08000a36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f888 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM4_IRQHandler+0x10>)
 8000a72:	f001 f8bb 	bl	8001bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000030 	.word	0x20000030

08000a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <USART1_IRQHandler+0x10>)
 8000a86:	f001 fd7b 	bl	8002580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000c0 	.word	0x200000c0

08000a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000aa0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ac6:	f7ff ffe5 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f002 f85b 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff fb3d 	bl	800014c <main>
  bx lr
 8000ad2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ad4:	08002c2c 	.word	0x08002c2c
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000adc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000ae4:	20000108 	.word	0x20000108

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_Init+0x28>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_Init+0x28>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f945 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f808 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff fec6 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f95d 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f925 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x20>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <HAL_IncTick+0x20>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000104 	.word	0x20000104

08000b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <HAL_GetTick+0x10>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000104 	.word	0x20000104

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff fff0 	bl	8000b9c <HAL_GetTick>
 8000bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d005      	beq.n	8000bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_Delay+0x40>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd6:	bf00      	nop
 8000bd8:	f7ff ffe0 	bl	8000b9c <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8f7      	bhi.n	8000bd8 <HAL_Delay+0x28>
  {
  }
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <__NVIC_EnableIRQ+0x34>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff90 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff2d 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff42 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff90 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff35 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffa2 	bl	8000d48 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d005      	beq.n	8000e32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2204      	movs	r2, #4
 8000e2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e051      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 020e 	bic.w	r2, r2, #14
 8000e40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_DMA_Abort_IT+0xd0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d029      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0xa0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <HAL_DMA_Abort_IT+0xd4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d022      	beq.n	8000eac <HAL_DMA_Abort_IT+0x9c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <HAL_DMA_Abort_IT+0xd8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d01a      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0x96>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_DMA_Abort_IT+0xdc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d012      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x90>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_DMA_Abort_IT+0xe0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00a      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x8a>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <HAL_DMA_Abort_IT+0xe4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d102      	bne.n	8000e94 <HAL_DMA_Abort_IT+0x84>
 8000e8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e92:	e00e      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xa2>
 8000e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e98:	e00b      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xa2>
 8000e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9e:	e008      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xa2>
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	e005      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xa2>
 8000ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eaa:	e002      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xa2>
 8000eac:	2310      	movs	r3, #16
 8000eae:	e000      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xa2>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_DMA_Abort_IT+0xe8>)
 8000eb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	4798      	blx	r3
    } 
  }
  return status;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40020008 	.word	0x40020008
 8000ee4:	4002001c 	.word	0x4002001c
 8000ee8:	40020030 	.word	0x40020030
 8000eec:	40020044 	.word	0x40020044
 8000ef0:	40020058 	.word	0x40020058
 8000ef4:	4002006c 	.word	0x4002006c
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b08b      	sub	sp, #44	; 0x2c
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	e127      	b.n	8001160 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f10:	2201      	movs	r2, #1
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	f040 8116 	bne.w	800115a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d034      	beq.n	8000fa0 <HAL_GPIO_Init+0xa4>
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d80d      	bhi.n	8000f56 <HAL_GPIO_Init+0x5a>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x9a>
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d804      	bhi.n	8000f4c <HAL_GPIO_Init+0x50>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d031      	beq.n	8000faa <HAL_GPIO_Init+0xae>
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d01c      	beq.n	8000f84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f4a:	e048      	b.n	8000fde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d043      	beq.n	8000fd8 <HAL_GPIO_Init+0xdc>
 8000f50:	2b11      	cmp	r3, #17
 8000f52:	d01b      	beq.n	8000f8c <HAL_GPIO_Init+0x90>
          break;
 8000f54:	e043      	b.n	8000fde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f56:	4a89      	ldr	r2, [pc, #548]	; (800117c <HAL_GPIO_Init+0x280>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d026      	beq.n	8000faa <HAL_GPIO_Init+0xae>
 8000f5c:	4a87      	ldr	r2, [pc, #540]	; (800117c <HAL_GPIO_Init+0x280>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d806      	bhi.n	8000f70 <HAL_GPIO_Init+0x74>
 8000f62:	4a87      	ldr	r2, [pc, #540]	; (8001180 <HAL_GPIO_Init+0x284>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d020      	beq.n	8000faa <HAL_GPIO_Init+0xae>
 8000f68:	4a86      	ldr	r2, [pc, #536]	; (8001184 <HAL_GPIO_Init+0x288>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01d      	beq.n	8000faa <HAL_GPIO_Init+0xae>
          break;
 8000f6e:	e036      	b.n	8000fde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f70:	4a85      	ldr	r2, [pc, #532]	; (8001188 <HAL_GPIO_Init+0x28c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0xae>
 8000f76:	4a85      	ldr	r2, [pc, #532]	; (800118c <HAL_GPIO_Init+0x290>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d016      	beq.n	8000faa <HAL_GPIO_Init+0xae>
 8000f7c:	4a84      	ldr	r2, [pc, #528]	; (8001190 <HAL_GPIO_Init+0x294>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0xae>
          break;
 8000f82:	e02c      	b.n	8000fde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	623b      	str	r3, [r7, #32]
          break;
 8000f8a:	e028      	b.n	8000fde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	3304      	adds	r3, #4
 8000f92:	623b      	str	r3, [r7, #32]
          break;
 8000f94:	e023      	b.n	8000fde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	623b      	str	r3, [r7, #32]
          break;
 8000f9e:	e01e      	b.n	8000fde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	330c      	adds	r3, #12
 8000fa6:	623b      	str	r3, [r7, #32]
          break;
 8000fa8:	e019      	b.n	8000fde <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	623b      	str	r3, [r7, #32]
          break;
 8000fb6:	e012      	b.n	8000fde <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d105      	bne.n	8000fcc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	611a      	str	r2, [r3, #16]
          break;
 8000fca:	e008      	b.n	8000fde <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	615a      	str	r2, [r3, #20]
          break;
 8000fd6:	e002      	b.n	8000fde <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
          break;
 8000fdc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	2bff      	cmp	r3, #255	; 0xff
 8000fe2:	d801      	bhi.n	8000fe8 <HAL_GPIO_Init+0xec>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	e001      	b.n	8000fec <HAL_GPIO_Init+0xf0>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3304      	adds	r3, #4
 8000fec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	2bff      	cmp	r3, #255	; 0xff
 8000ff2:	d802      	bhi.n	8000ffa <HAL_GPIO_Init+0xfe>
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x104>
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	3b08      	subs	r3, #8
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	210f      	movs	r1, #15
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	401a      	ands	r2, r3
 8001012:	6a39      	ldr	r1, [r7, #32]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	431a      	orrs	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 8096 	beq.w	800115a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800102e:	4b59      	ldr	r3, [pc, #356]	; (8001194 <HAL_GPIO_Init+0x298>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a58      	ldr	r2, [pc, #352]	; (8001194 <HAL_GPIO_Init+0x298>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b56      	ldr	r3, [pc, #344]	; (8001194 <HAL_GPIO_Init+0x298>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001046:	4a54      	ldr	r2, [pc, #336]	; (8001198 <HAL_GPIO_Init+0x29c>)
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x2a0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x19e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4a      	ldr	r2, [pc, #296]	; (80011a0 <HAL_GPIO_Init+0x2a4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x19a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <HAL_GPIO_Init+0x2a8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x196>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_GPIO_Init+0x2ac>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x192>
 800108a:	2303      	movs	r3, #3
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x1a0>
 800108e:	2304      	movs	r3, #4
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x1a0>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x1a0>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x1a0>
 800109a:	2300      	movs	r3, #0
 800109c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ac:	493a      	ldr	r1, [pc, #232]	; (8001198 <HAL_GPIO_Init+0x29c>)
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c6:	4b39      	ldr	r3, [pc, #228]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4938      	ldr	r1, [pc, #224]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	43db      	mvns	r3, r3
 80010dc:	4933      	ldr	r1, [pc, #204]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 80010de:	4013      	ands	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	492e      	ldr	r1, [pc, #184]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4929      	ldr	r1, [pc, #164]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 8001106:	4013      	ands	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	4924      	ldr	r1, [pc, #144]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	608b      	str	r3, [r1, #8]
 8001122:	e006      	b.n	8001132 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	43db      	mvns	r3, r3
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 800112e:	4013      	ands	r3, r2
 8001130:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	491a      	ldr	r1, [pc, #104]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	60cb      	str	r3, [r1, #12]
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	43db      	mvns	r3, r3
 8001154:	4915      	ldr	r1, [pc, #84]	; (80011ac <HAL_GPIO_Init+0x2b0>)
 8001156:	4013      	ands	r3, r2
 8001158:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	3301      	adds	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f47f aed0 	bne.w	8000f10 <HAL_GPIO_Init+0x14>
  }
}
 8001170:	bf00      	nop
 8001172:	372c      	adds	r7, #44	; 0x2c
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	10210000 	.word	0x10210000
 8001180:	10110000 	.word	0x10110000
 8001184:	10120000 	.word	0x10120000
 8001188:	10310000 	.word	0x10310000
 800118c:	10320000 	.word	0x10320000
 8001190:	10220000 	.word	0x10220000
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000
 800119c:	40010800 	.word	0x40010800
 80011a0:	40010c00 	.word	0x40010c00
 80011a4:	40011000 	.word	0x40011000
 80011a8:	40011400 	.word	0x40011400
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4013      	ands	r3, r2
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43d9      	mvns	r1, r3
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	400b      	ands	r3, r1
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	611a      	str	r2, [r3, #16]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e26c      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8087 	beq.w	8001342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00c      	beq.n	800125a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001240:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d112      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
 800124c:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b89      	ldr	r3, [pc, #548]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06c      	beq.n	8001340 <HAL_RCC_OscConfig+0x12c>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d168      	bne.n	8001340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e246      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x76>
 800127c:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a7f      	ldr	r2, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e02e      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a77      	ldr	r2, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0xbc>
 80012b6:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a71      	ldr	r2, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012d0:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a67      	ldr	r2, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc54 	bl	8000b9c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc50 	bl	8000b9c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1fa      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe4>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc40 	bl	8000b9c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc3c 	bl	8000b9c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1e6      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x10c>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134e:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1ba      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4939      	ldr	r1, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fbf5 	bl	8000b9c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fbf1 	bl	8000b9c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e19b      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fbd4 	bl	8000b9c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fbd0 	bl	8000b9c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e17a      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03a      	beq.n	8001498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fbb4 	bl	8000b9c <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fbb0 	bl	8000b9c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e15a      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f000 fada 	bl	8001a10 <RCC_Delay>
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fb9a 	bl	8000b9c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fb96 	bl	8000b9c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d908      	bls.n	800148c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e140      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	42420000 	.word	0x42420000
 8001488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b9e      	ldr	r3, [pc, #632]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a6 	beq.w	80015f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b97      	ldr	r3, [pc, #604]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b94      	ldr	r3, [pc, #592]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a93      	ldr	r2, [pc, #588]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b91      	ldr	r3, [pc, #580]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b8e      	ldr	r3, [pc, #568]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a8a      	ldr	r2, [pc, #552]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb57 	bl	8000b9c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fb53 	bl	8000b9c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0fd      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 8001518:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e02d      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x334>
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e01c      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x356>
 8001550:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a69      	ldr	r2, [pc, #420]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 800156a:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a66      	ldr	r2, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a63      	ldr	r2, [pc, #396]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d015      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb07 	bl	8000b9c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fb03 	bl	8000b9c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0ab      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ee      	beq.n	8001592 <HAL_RCC_OscConfig+0x37e>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff faf1 	bl	8000b9c <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff faed 	bl	8000b9c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e095      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8081 	beq.w	80016fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d061      	beq.n	80016cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d146      	bne.n	800169e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fac1 	bl	8000b9c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fabd 	bl	8000b9c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e067      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	492d      	ldr	r1, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a19      	ldr	r1, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	430b      	orrs	r3, r1
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fa91 	bl	8000b9c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fa8d 	bl	8000b9c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e037      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x46a>
 800169c:	e02f      	b.n	80016fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa7a 	bl	8000b9c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fa76 	bl	8000b9c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e020      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x498>
 80016ca:	e018      	b.n	80016fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e013      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
 8001710:	42420060 	.word	0x42420060

08001714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0d0      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d910      	bls.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0207 	bic.w	r2, r3, #7
 800173e:	4965      	ldr	r1, [pc, #404]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b8      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800177a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d040      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d115      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e073      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06b      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4936      	ldr	r1, [pc, #216]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff f9ca 	bl	8000b9c <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff f9c6 	bl	8000b9c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e053      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d210      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 0207 	bic.w	r2, r3, #7
 800184a:	4922      	ldr	r1, [pc, #136]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e032      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f821 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a6:	4601      	mov	r1, r0
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	fa21 f303 	lsr.w	r3, r1, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1cc>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1d0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f928 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08002c0c 	.word	0x08002c0c
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b490      	push	{r4, r7}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018f0:	1d3c      	adds	r4, r7, #4
 80018f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x40>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x46>
 8001926:	e02d      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800192a:	623b      	str	r3, [r7, #32]
      break;
 800192c:	e02d      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193a:	4413      	add	r3, r2
 800193c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001940:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c5b      	lsrs	r3, r3, #17
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800195a:	4413      	add	r3, r2
 800195c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001966:	fb02 f203 	mul.w	r2, r2, r3
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e004      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	623b      	str	r3, [r7, #32]
      break;
 8001982:	e002      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001986:	623b      	str	r3, [r7, #32]
      break;
 8001988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198a:	6a3b      	ldr	r3, [r7, #32]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bc90      	pop	{r4, r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	08002bf8 	.word	0x08002bf8
 800199c:	08002c08 	.word	0x08002c08
 80019a0:	40021000 	.word	0x40021000
 80019a4:	007a1200 	.word	0x007a1200
 80019a8:	003d0900 	.word	0x003d0900

080019ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <HAL_RCC_GetHCLKFreq+0x10>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000000 	.word	0x20000000

080019c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019c4:	f7ff fff2 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019c8:	4601      	mov	r1, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08002c1c 	.word	0x08002c1c

080019e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ec:	f7ff ffde 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019f0:	4601      	mov	r1, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	0adb      	lsrs	r3, r3, #11
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08002c1c 	.word	0x08002c1c

08001a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <RCC_Delay+0x34>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <RCC_Delay+0x38>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0a5b      	lsrs	r3, r3, #9
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a2c:	bf00      	nop
  }
  while (Delay --);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	60fa      	str	r2, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f9      	bne.n	8001a2c <RCC_Delay+0x1c>
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000000 	.word	0x20000000
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e041      	b.n	8001ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7fe ff42 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f000 fa92 	bl	8001fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d001      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e03a      	b.n	8001b7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_TIM_Base_Start_IT+0x98>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00e      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x58>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2e:	d009      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x58>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x58>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_TIM_Base_Start_IT+0xa0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d111      	bne.n	8001b68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d010      	beq.n	8001b78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b66:	e007      	b.n	8001b78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800

08001b90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	f241 1311 	movw	r3, #4369	; 0x1111
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_TIM_Base_Stop_IT+0x48>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	f240 4344 	movw	r3, #1092	; 0x444
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_TIM_Base_Stop_IT+0x48>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0202 	mvn.w	r2, #2
 8001c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f9a4 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f997 	bl	8001f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f9a6 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0204 	mvn.w	r2, #4
 8001c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f97a 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f96d 	bl	8001f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f97c 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0208 	mvn.w	r2, #8
 8001cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f950 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f943 	bl	8001f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f952 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0210 	mvn.w	r2, #16
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f926 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f919 	bl	8001f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f928 	bl	8001f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0201 	mvn.w	r2, #1
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fd54 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7a:	2b80      	cmp	r3, #128	; 0x80
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d107      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa6b 	bl	8002272 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db4:	2b40      	cmp	r3, #64	; 0x40
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8ec 	bl	8001fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0220 	mvn.w	r2, #32
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fa36 	bl	8002260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_TIM_ConfigClockSource+0x18>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0a6      	b.n	8001f62 <HAL_TIM_ConfigClockSource+0x166>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	d067      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0x120>
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d80b      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x6c>
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d073      	beq.n	8001f3c <HAL_TIM_ConfigClockSource+0x140>
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d802      	bhi.n	8001e5e <HAL_TIM_ConfigClockSource+0x62>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d06f      	beq.n	8001f3c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e5c:	e078      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d06c      	beq.n	8001f3c <HAL_TIM_ConfigClockSource+0x140>
 8001e62:	2b30      	cmp	r3, #48	; 0x30
 8001e64:	d06a      	beq.n	8001f3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001e66:	e073      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e68:	2b70      	cmp	r3, #112	; 0x70
 8001e6a:	d00d      	beq.n	8001e88 <HAL_TIM_ConfigClockSource+0x8c>
 8001e6c:	2b70      	cmp	r3, #112	; 0x70
 8001e6e:	d804      	bhi.n	8001e7a <HAL_TIM_ConfigClockSource+0x7e>
 8001e70:	2b50      	cmp	r3, #80	; 0x50
 8001e72:	d033      	beq.n	8001edc <HAL_TIM_ConfigClockSource+0xe0>
 8001e74:	2b60      	cmp	r3, #96	; 0x60
 8001e76:	d041      	beq.n	8001efc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001e78:	e06a      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7e:	d066      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x152>
 8001e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e84:	d017      	beq.n	8001eb6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001e86:	e063      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f000 f965 	bl	8002166 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eaa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	609a      	str	r2, [r3, #8]
      break;
 8001eb4:	e04c      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f000 f94e 	bl	8002166 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ed8:	609a      	str	r2, [r3, #8]
      break;
 8001eda:	e039      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f000 f8c5 	bl	8002078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2150      	movs	r1, #80	; 0x50
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f91c 	bl	8002132 <TIM_ITRx_SetConfig>
      break;
 8001efa:	e029      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f000 f8e3 	bl	80020d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2160      	movs	r1, #96	; 0x60
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f90c 	bl	8002132 <TIM_ITRx_SetConfig>
      break;
 8001f1a:	e019      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f000 f8a5 	bl	8002078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2140      	movs	r1, #64	; 0x40
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f8fc 	bl	8002132 <TIM_ITRx_SetConfig>
      break;
 8001f3a:	e009      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 f8f3 	bl	8002132 <TIM_ITRx_SetConfig>
        break;
 8001f4c:	e000      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <TIM_Base_SetConfig+0xb8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00b      	beq.n	8001fe4 <TIM_Base_SetConfig+0x30>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd2:	d007      	beq.n	8001fe4 <TIM_Base_SetConfig+0x30>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a26      	ldr	r2, [pc, #152]	; (8002070 <TIM_Base_SetConfig+0xbc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0x30>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <TIM_Base_SetConfig+0xc0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d108      	bne.n	8001ff6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	; (800206c <TIM_Base_SetConfig+0xb8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00b      	beq.n	8002016 <TIM_Base_SetConfig+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d007      	beq.n	8002016 <TIM_Base_SetConfig+0x62>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a19      	ldr	r2, [pc, #100]	; (8002070 <TIM_Base_SetConfig+0xbc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d003      	beq.n	8002016 <TIM_Base_SetConfig+0x62>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <TIM_Base_SetConfig+0xc0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d108      	bne.n	8002028 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <TIM_Base_SetConfig+0xb8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d103      	bne.n	800205c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	615a      	str	r2, [r3, #20]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800

08002078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 0201 	bic.w	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f023 030a 	bic.w	r3, r3, #10
 80020b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	621a      	str	r2, [r3, #32]
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f023 0210 	bic.w	r2, r3, #16
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	031b      	lsls	r3, r3, #12
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	621a      	str	r2, [r3, #32]
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	f043 0307 	orr.w	r3, r3, #7
 8002154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b087      	sub	sp, #28
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	431a      	orrs	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4313      	orrs	r3, r2
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	609a      	str	r2, [r3, #8]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e046      	b.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00e      	beq.n	800221e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d009      	beq.n	800221e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d004      	beq.n	800221e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10c      	bne.n	8002238 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4313      	orrs	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800

08002260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e03f      	b.n	8002316 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fb60 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fbcd 	bl	8002a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b08a      	sub	sp, #40	; 0x28
 8002322:	af02      	add	r7, sp, #8
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	d17c      	bne.n	8002438 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_UART_Transmit+0x2c>
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e075      	b.n	800243a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_UART_Transmit+0x3e>
 8002358:	2302      	movs	r3, #2
 800235a:	e06e      	b.n	800243a <HAL_UART_Transmit+0x11c>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2221      	movs	r2, #33	; 0x21
 800236e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002372:	f7fe fc13 	bl	8000b9c <HAL_GetTick>
 8002376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238c:	d108      	bne.n	80023a0 <HAL_UART_Transmit+0x82>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d104      	bne.n	80023a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e003      	b.n	80023a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80023b0:	e02a      	b.n	8002408 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f9f1 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e036      	b.n	800243a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10b      	bne.n	80023ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	3302      	adds	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e007      	b.n	80023fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	3301      	adds	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1cf      	bne.n	80023b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f9c1 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e006      	b.n	800243a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b08a      	sub	sp, #40	; 0x28
 8002446:	af02      	add	r7, sp, #8
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b20      	cmp	r3, #32
 8002460:	f040 8089 	bne.w	8002576 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_UART_Receive+0x2e>
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e081      	b.n	8002578 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_UART_Receive+0x40>
 800247e:	2302      	movs	r3, #2
 8002480:	e07a      	b.n	8002578 <HAL_UART_Receive+0x136>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2222      	movs	r2, #34	; 0x22
 8002494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002498:	f7fe fb80 	bl	8000b9c <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	88fa      	ldrh	r2, [r7, #6]
 80024a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	d108      	bne.n	80024c6 <HAL_UART_Receive+0x84>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d104      	bne.n	80024c6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e003      	b.n	80024ce <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024d6:	e043      	b.n	8002560 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2200      	movs	r2, #0
 80024e0:	2120      	movs	r1, #32
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f95e 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e042      	b.n	8002578 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10c      	bne.n	8002512 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002504:	b29a      	uxth	r2, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	3302      	adds	r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e01f      	b.n	8002552 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d007      	beq.n	800252c <HAL_UART_Receive+0xea>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_UART_Receive+0xf8>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e008      	b.n	800254c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002546:	b2da      	uxtb	r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3301      	adds	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1b6      	bne.n	80024d8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_UART_IRQHandler+0x52>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f9cc 	bl	8002968 <UART_Receive_IT>
      return;
 80025d0:	e0d1      	b.n	8002776 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80b0 	beq.w	800273a <HAL_UART_IRQHandler+0x1ba>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_UART_IRQHandler+0x70>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80a5 	beq.w	800273a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_UART_IRQHandler+0x90>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_UART_IRQHandler+0xb0>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	f043 0202 	orr.w	r2, r3, #2
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_UART_IRQHandler+0xd0>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	f043 0204 	orr.w	r2, r3, #4
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00f      	beq.n	800267a <HAL_UART_IRQHandler+0xfa>
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_UART_IRQHandler+0xee>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	f043 0208 	orr.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d078      	beq.n	8002774 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_UART_IRQHandler+0x11c>
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f966 	bl	8002968 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_UART_IRQHandler+0x144>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d031      	beq.n	8002728 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8b7 	bl	8002838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d023      	beq.n	8002720 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_UART_IRQHandler+0x1fc>)
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fb87 	bl	8000e10 <HAL_DMA_Abort_IT>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d016      	beq.n	8002736 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002712:	4610      	mov	r0, r2
 8002714:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002716:	e00e      	b.n	8002736 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f83a 	bl	8002792 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271e:	e00a      	b.n	8002736 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f836 	bl	8002792 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002726:	e006      	b.n	8002736 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f832 	bl	8002792 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002734:	e01e      	b.n	8002774 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002736:	bf00      	nop
    return;
 8002738:	e01c      	b.n	8002774 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_UART_IRQHandler+0x1d6>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f8a3 	bl	800289a <UART_Transmit_IT>
    return;
 8002754:	e00f      	b.n	8002776 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_UART_IRQHandler+0x1f6>
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8e4 	bl	8002938 <UART_EndTransmit_IT>
    return;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002774:	bf00      	nop
  }
}
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	08002873 	.word	0x08002873

08002780 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b4:	e02c      	b.n	8002810 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d028      	beq.n	8002810 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80027c4:	f7fe f9ea 	bl	8000b9c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d21d      	bcs.n	8002810 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e00f      	b.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	429a      	cmp	r2, r3
 800282c:	d0c3      	beq.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800284e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff ff80 	bl	8002792 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b21      	cmp	r3, #33	; 0x21
 80028ac:	d13e      	bne.n	800292c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b6:	d114      	bne.n	80028e2 <UART_Transmit_IT+0x48>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	621a      	str	r2, [r3, #32]
 80028e0:	e008      	b.n	80028f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6211      	str	r1, [r2, #32]
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4619      	mov	r1, r3
 8002902:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fd ff3f 	bl	80007dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b22      	cmp	r3, #34	; 0x22
 800297a:	d170      	bne.n	8002a5e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002984:	d117      	bne.n	80029b6 <UART_Receive_IT+0x4e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d113      	bne.n	80029b6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	1c9a      	adds	r2, r3, #2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
 80029b4:	e026      	b.n	8002a04 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d007      	beq.n	80029da <UART_Receive_IT+0x72>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <UART_Receive_IT+0x80>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e008      	b.n	80029fa <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4619      	mov	r1, r3
 8002a12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d120      	bne.n	8002a5a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0220 	bic.w	r2, r2, #32
 8002a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fe95 	bl	8002780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e002      	b.n	8002a60 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002aa2:	f023 030c 	bic.w	r3, r3, #12
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2c      	ldr	r2, [pc, #176]	; (8002b7c <UART_SetConfig+0x114>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d103      	bne.n	8002ad8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ad0:	f7fe ff8a 	bl	80019e8 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	e002      	b.n	8002ade <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f7fe ff72 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 8002adc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009a      	lsls	r2, r3, #2
 8002ae8:	441a      	add	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <UART_SetConfig+0x118>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	0119      	lsls	r1, r3, #4
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009a      	lsls	r2, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <UART_SetConfig+0x118>)
 8002b16:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2064      	movs	r0, #100	; 0x64
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	3332      	adds	r3, #50	; 0x32
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <UART_SetConfig+0x118>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b34:	4419      	add	r1, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009a      	lsls	r2, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <UART_SetConfig+0x118>)
 8002b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2064      	movs	r0, #100	; 0x64
 8002b56:	fb00 f303 	mul.w	r3, r0, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	3332      	adds	r3, #50	; 0x32
 8002b60:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <UART_SetConfig+0x118>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	440a      	add	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	2500      	movs	r5, #0
 8002b88:	4e0c      	ldr	r6, [pc, #48]	; (8002bbc <__libc_init_array+0x38>)
 8002b8a:	4c0d      	ldr	r4, [pc, #52]	; (8002bc0 <__libc_init_array+0x3c>)
 8002b8c:	1ba4      	subs	r4, r4, r6
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	42a5      	cmp	r5, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	f000 f822 	bl	8002bdc <_init>
 8002b98:	2500      	movs	r5, #0
 8002b9a:	4e0a      	ldr	r6, [pc, #40]	; (8002bc4 <__libc_init_array+0x40>)
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	; (8002bc8 <__libc_init_array+0x44>)
 8002b9e:	1ba4      	subs	r4, r4, r6
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	42a5      	cmp	r5, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bac:	4798      	blx	r3
 8002bae:	3501      	adds	r5, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bb6:	4798      	blx	r3
 8002bb8:	3501      	adds	r5, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	08002c24 	.word	0x08002c24
 8002bc0:	08002c24 	.word	0x08002c24
 8002bc4:	08002c24 	.word	0x08002c24
 8002bc8:	08002c28 	.word	0x08002c28

08002bcc <memset>:
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4402      	add	r2, r0
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <memset+0xa>
 8002bd4:	4770      	bx	lr
 8002bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bda:	e7f9      	b.n	8002bd0 <memset+0x4>

08002bdc <_init>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr

08002be8 <_fini>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr
