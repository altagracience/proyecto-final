
Nodov2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c28  08003c28  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c28  08003c28  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c28  08003c28  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08003c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000016c  08003d9c  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003d9c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f31e  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f73  00000000  00000000  0002f4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  00031428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00032328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019179  00000000  00000000  00033130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b785  00000000  00000000  0004c2a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ccb9  00000000  00000000  00057a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e46e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  000e4764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003be4 	.word	0x08003be4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
 8000148:	08003be4 	.word	0x08003be4

0800014c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000186:	bf00      	nop
     __ASM volatile ("NOP");
 8000188:	bf00      	nop
  __ASM volatile ("NOP");
 800018a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
  }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b2:	f000 ff13 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b6:	f000 f8f1 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ba:	f000 f9e3 	bl	8000584 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001be:	f000 f933 	bl	8000428 <MX_SPI1_Init>
  MX_TIM4_Init();
 80001c2:	f000 f967 	bl	8000494 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80001c6:	f000 f9b3 	bl	8000530 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  	uint8_t gRSSI_value;

  	char ch[3]={0, 0, 0};
 80001ca:	2300      	movs	r3, #0
 80001cc:	713b      	strb	r3, [r7, #4]
 80001ce:	2300      	movs	r3, #0
 80001d0:	717b      	strb	r3, [r7, #5]
 80001d2:	2300      	movs	r3, #0
 80001d4:	71bb      	strb	r3, [r7, #6]
  	char in[3]={0, 0, 0};
 80001d6:	2300      	movs	r3, #0
 80001d8:	703b      	strb	r3, [r7, #0]
 80001da:	2300      	movs	r3, #0
 80001dc:	707b      	strb	r3, [r7, #1]
 80001de:	2300      	movs	r3, #0
 80001e0:	70bb      	strb	r3, [r7, #2]

  	uint16_t err;


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // DE - Comunicacion RS485 - Se coloca en bajo para estar en modo recepcion
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	4864      	ldr	r0, [pc, #400]	; (800037c <main+0x1d0>)
 80001ea:	f001 fa70 	bl	80016ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // RE - Comunicacion RS485 - Se coloca en bajo para escuchar todo el tiempo
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f4:	4861      	ldr	r0, [pc, #388]	; (800037c <main+0x1d0>)
 80001f6:	f001 fa6a 	bl	80016ce <HAL_GPIO_WritePin>

	uint16_t marcstate=0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	81bb      	strh	r3, [r7, #12]


	//Init rf driver
	rf_begin(&hspi1, AKS_115_kb, MHz434, CS_GPIO_Port, CS_Pin, GDO0_Pin);
 80001fe:	2308      	movs	r3, #8
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2310      	movs	r3, #16
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	4b5d      	ldr	r3, [pc, #372]	; (800037c <main+0x1d0>)
 8000208:	2202      	movs	r2, #2
 800020a:	2107      	movs	r1, #7
 800020c:	485c      	ldr	r0, [pc, #368]	; (8000380 <main+0x1d4>)
 800020e:	f000 fbe3 	bl	80009d8 <rf_begin>
	rf_write_strobe(SRX);
 8000212:	2034      	movs	r0, #52	; 0x34
 8000214:	f000 fcac 	bl	8000b70 <rf_write_strobe>

	while(marcstate != RX){
 8000218:	e004      	b.n	8000224 <main+0x78>
		marcstate = (rf_read_register(MARCSTATE)); //read out state of cc1100 to be sure in RX
 800021a:	20f5      	movs	r0, #245	; 0xf5
 800021c:	f000 fcb9 	bl	8000b92 <rf_read_register>
 8000220:	4603      	mov	r3, r0
 8000222:	81bb      	strh	r3, [r7, #12]
	while(marcstate != RX){
 8000224:	89bb      	ldrh	r3, [r7, #12]
 8000226:	2b0d      	cmp	r3, #13
 8000228:	d1f7      	bne.n	800021a <main+0x6e>
	}

	HAL_TIM_Base_Start_IT(&htim4);
 800022a:	4856      	ldr	r0, [pc, #344]	; (8000384 <main+0x1d8>)
 800022c:	f002 fc58 	bl	8002ae0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		in[0] = in[1] = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	707b      	strb	r3, [r7, #1]
 8000234:	787b      	ldrb	r3, [r7, #1]
 8000236:	703b      	strb	r3, [r7, #0]
		ch[0] = ch[1] = ch[2] = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	71bb      	strb	r3, [r7, #6]
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	717b      	strb	r3, [r7, #5]
 8000240:	797b      	ldrb	r3, [r7, #5]
 8000242:	713b      	strb	r3, [r7, #4]

		HAL_Delay(25);
 8000244:	2019      	movs	r0, #25
 8000246:	f000 ff2b 	bl	80010a0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800024a:	2200      	movs	r2, #0
 800024c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000250:	484a      	ldr	r0, [pc, #296]	; (800037c <main+0x1d0>)
 8000252:	f001 fa3c 	bl	80016ce <HAL_GPIO_WritePin>

		HAL_UART_Receive(&huart1, (uint8_t *)in, 2, 100);
 8000256:	4639      	mov	r1, r7
 8000258:	2364      	movs	r3, #100	; 0x64
 800025a:	2202      	movs	r2, #2
 800025c:	484a      	ldr	r0, [pc, #296]	; (8000388 <main+0x1dc>)
 800025e:	f003 f8ea 	bl	8003436 <HAL_UART_Receive>
				gRSSI_value = 0;
				Inte = 1;
			}
		}*/

		if(in[0] == 'A' && in[1] == 1){
 8000262:	783b      	ldrb	r3, [r7, #0]
 8000264:	2b41      	cmp	r3, #65	; 0x41
 8000266:	d115      	bne.n	8000294 <main+0xe8>
 8000268:	787b      	ldrb	r3, [r7, #1]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d112      	bne.n	8000294 <main+0xe8>
			gRSSI_value = RSSI_val[i_rssi-1 < 0 ? 9 : i_rssi-1];
 800026e:	4b47      	ldr	r3, [pc, #284]	; (800038c <main+0x1e0>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	2b00      	cmp	r3, #0
 8000276:	db03      	blt.n	8000280 <main+0xd4>
 8000278:	4b44      	ldr	r3, [pc, #272]	; (800038c <main+0x1e0>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	3b01      	subs	r3, #1
 800027e:	e000      	b.n	8000282 <main+0xd6>
 8000280:	2309      	movs	r3, #9
 8000282:	4a43      	ldr	r2, [pc, #268]	; (8000390 <main+0x1e4>)
 8000284:	5cd3      	ldrb	r3, [r2, r3]
 8000286:	73fb      	strb	r3, [r7, #15]
			HAL_TIM_Base_Stop_IT(&htim4);
 8000288:	483e      	ldr	r0, [pc, #248]	; (8000384 <main+0x1d8>)
 800028a:	f002 fc7b 	bl	8002b84 <HAL_TIM_Base_Stop_IT>
			Inte = 0;
 800028e:	4b41      	ldr	r3, [pc, #260]	; (8000394 <main+0x1e8>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
		}

		if (in[1] == 1){
 8000294:	787b      	ldrb	r3, [r7, #1]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d11a      	bne.n	80002d0 <main+0x124>
			if (gRSSI_value == 0){
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d10c      	bne.n	80002ba <main+0x10e>
				gRSSI_value = RSSI_val[i_rssi-1 < 0 ? 9 : i_rssi-1];
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <main+0x1e0>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db03      	blt.n	80002b2 <main+0x106>
 80002aa:	4b38      	ldr	r3, [pc, #224]	; (800038c <main+0x1e0>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	e000      	b.n	80002b4 <main+0x108>
 80002b2:	2309      	movs	r3, #9
 80002b4:	4a36      	ldr	r2, [pc, #216]	; (8000390 <main+0x1e4>)
 80002b6:	5cd3      	ldrb	r3, [r2, r3]
 80002b8:	73fb      	strb	r3, [r7, #15]
			}
			if (Inte == 1){
 80002ba:	4b36      	ldr	r3, [pc, #216]	; (8000394 <main+0x1e8>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d02f      	beq.n	8000322 <main+0x176>
				HAL_TIM_Base_Stop_IT(&htim4);
 80002c2:	4830      	ldr	r0, [pc, #192]	; (8000384 <main+0x1d8>)
 80002c4:	f002 fc5e 	bl	8002b84 <HAL_TIM_Base_Stop_IT>
				Inte = 0;
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <main+0x1e8>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
 80002ce:	e028      	b.n	8000322 <main+0x176>
			}
		}

		else if (in[0] == 'A' && in[1] == 2){
 80002d0:	783b      	ldrb	r3, [r7, #0]
 80002d2:	2b41      	cmp	r3, #65	; 0x41
 80002d4:	d125      	bne.n	8000322 <main+0x176>
 80002d6:	787b      	ldrb	r3, [r7, #1]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d122      	bne.n	8000322 <main+0x176>
			for(int j = 0; j<10; j++){
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	e007      	b.n	80002f2 <main+0x146>
				RSSI_val[j] = 90;
 80002e2:	4a2b      	ldr	r2, [pc, #172]	; (8000390 <main+0x1e4>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	4413      	add	r3, r2
 80002e8:	225a      	movs	r2, #90	; 0x5a
 80002ea:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j<10; j++){
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	2b09      	cmp	r3, #9
 80002f6:	ddf4      	ble.n	80002e2 <main+0x136>
			}
			HAL_TIM_Base_Start_IT(&htim4);
 80002f8:	4822      	ldr	r0, [pc, #136]	; (8000384 <main+0x1d8>)
 80002fa:	f002 fbf1 	bl	8002ae0 <HAL_TIM_Base_Start_IT>
			Inte = 1;
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <main+0x1e8>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
			bInhibicion = 0;
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <main+0x1ec>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
			gRSSI_value = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	73fb      	strb	r3, [r7, #15]
			ch[0] = ch[1] = ch[2] = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	71bb      	strb	r3, [r7, #6]
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	717b      	strb	r3, [r7, #5]
 8000316:	797b      	ldrb	r3, [r7, #5]
 8000318:	713b      	strb	r3, [r7, #4]
			in[0] = in[1] = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	707b      	strb	r3, [r7, #1]
 800031e:	787b      	ldrb	r3, [r7, #1]
 8000320:	703b      	strb	r3, [r7, #0]
		}



		if(in[0] == ID_nodo && in[1] != 2){
 8000322:	783b      	ldrb	r3, [r7, #0]
 8000324:	2b43      	cmp	r3, #67	; 0x43
 8000326:	d183      	bne.n	8000230 <main+0x84>
 8000328:	787b      	ldrb	r3, [r7, #1]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d080      	beq.n	8000230 <main+0x84>

			ch[0] = ID_nodo;
 800032e:	2343      	movs	r3, #67	; 0x43
 8000330:	713b      	strb	r3, [r7, #4]
			ch[1] = gRSSI_value;
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	717b      	strb	r3, [r7, #5]
			ch[2] = bInhibicion;
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <main+0x1ec>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	71bb      	strb	r3, [r7, #6]

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000342:	480e      	ldr	r0, [pc, #56]	; (800037c <main+0x1d0>)
 8000344:	f001 f9c3 	bl	80016ce <HAL_GPIO_WritePin>
			HAL_Delay(30);
 8000348:	201e      	movs	r0, #30
 800034a:	f000 fea9 	bl	80010a0 <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 3, HAL_MAX_DELAY);
 800034e:	1d39      	adds	r1, r7, #4
 8000350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000354:	2203      	movs	r2, #3
 8000356:	480c      	ldr	r0, [pc, #48]	; (8000388 <main+0x1dc>)
 8000358:	f002 ffdb 	bl	8003312 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 800035c:	4639      	mov	r1, r7
 800035e:	230a      	movs	r3, #10
 8000360:	2201      	movs	r2, #1
 8000362:	4809      	ldr	r0, [pc, #36]	; (8000388 <main+0x1dc>)
 8000364:	f003 f867 	bl	8003436 <HAL_UART_Receive>
			HAL_Delay(30);
 8000368:	201e      	movs	r0, #30
 800036a:	f000 fe99 	bl	80010a0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000374:	4801      	ldr	r0, [pc, #4]	; (800037c <main+0x1d0>)
 8000376:	f001 f9aa 	bl	80016ce <HAL_GPIO_WritePin>
		in[0] = in[1] = 0;
 800037a:	e759      	b.n	8000230 <main+0x84>
 800037c:	40010800 	.word	0x40010800
 8000380:	20000220 	.word	0x20000220
 8000384:	20000198 	.word	0x20000198
 8000388:	200001e0 	.word	0x200001e0
 800038c:	20000193 	.word	0x20000193
 8000390:	20000004 	.word	0x20000004
 8000394:	2000000e 	.word	0x2000000e
 8000398:	20000194 	.word	0x20000194

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	; 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fc12 	bl	8003bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	2301      	movs	r3, #1
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d0:	2302      	movs	r3, #2
 80003d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0318 	add.w	r3, r7, #24
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 f9a3 	bl	8001730 <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f0:	f000 faca 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	230f      	movs	r3, #15
 80003f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2302      	movs	r3, #2
 80003fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fc0e 	bl	8001c30 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041a:	f000 fab5 	bl	8000988 <Error_Handler>
  }
}
 800041e:	bf00      	nop
 8000420:	3740      	adds	r7, #64	; 0x40
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_SPI1_Init+0x64>)
 800042e:	4a18      	ldr	r2, [pc, #96]	; (8000490 <MX_SPI1_Init+0x68>)
 8000430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_SPI1_Init+0x64>)
 8000434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_SPI1_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_SPI1_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_SPI1_Init+0x64>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_SPI1_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_SPI1_Init+0x64>)
 8000454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000458:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_SPI1_Init+0x64>)
 800045c:	2238      	movs	r2, #56	; 0x38
 800045e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <MX_SPI1_Init+0x64>)
 8000462:	2200      	movs	r2, #0
 8000464:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_SPI1_Init+0x64>)
 8000468:	2200      	movs	r2, #0
 800046a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <MX_SPI1_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_SPI1_Init+0x64>)
 8000474:	220a      	movs	r2, #10
 8000476:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_SPI1_Init+0x64>)
 800047a:	f001 fd75 	bl	8001f68 <HAL_SPI_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000484:	f000 fa80 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000220 	.word	0x20000220
 8000490:	40013000 	.word	0x40013000

08000494 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004b0:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <MX_TIM4_Init+0x94>)
 80004b2:	4a1e      	ldr	r2, [pc, #120]	; (800052c <MX_TIM4_Init+0x98>)
 80004b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <MX_TIM4_Init+0x94>)
 80004b8:	f240 529f 	movw	r2, #1439	; 0x59f
 80004bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_TIM4_Init+0x94>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_TIM4_Init+0x94>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_TIM4_Init+0x94>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_TIM4_Init+0x94>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004d6:	4814      	ldr	r0, [pc, #80]	; (8000528 <MX_TIM4_Init+0x94>)
 80004d8:	f002 fab2 	bl	8002a40 <HAL_TIM_Base_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 fa51 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4619      	mov	r1, r3
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <MX_TIM4_Init+0x94>)
 80004f4:	f002 fc7c 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 fa43 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800050a:	463b      	mov	r3, r7
 800050c:	4619      	mov	r1, r3
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <MX_TIM4_Init+0x94>)
 8000510:	f002 fe42 	bl	8003198 <HAL_TIMEx_MasterConfigSynchronization>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800051a:	f000 fa35 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000198 	.word	0x20000198
 800052c:	40000800 	.word	0x40000800

08000530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <MX_USART1_UART_Init+0x50>)
 8000538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_USART1_UART_Init+0x4c>)
 800053c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_USART1_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000554:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000558:	220c      	movs	r2, #12
 800055a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <MX_USART1_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_USART1_UART_Init+0x4c>)
 800056a:	f002 fe85 	bl	8003278 <HAL_UART_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000574:	f000 fa08 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200001e0 	.word	0x200001e0
 8000580:	40013800 	.word	0x40013800

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x144>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a4a      	ldr	r2, [pc, #296]	; (80006c8 <MX_GPIO_Init+0x144>)
 800059e:	f043 0310 	orr.w	r3, r3, #16
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0310 	and.w	r3, r3, #16
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b0:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a44      	ldr	r2, [pc, #272]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b3f      	ldr	r3, [pc, #252]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a3e      	ldr	r2, [pc, #248]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005e6:	f043 0308 	orr.w	r3, r3, #8
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <MX_GPIO_Init+0x144>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	4833      	ldr	r0, [pc, #204]	; (80006cc <MX_GPIO_Init+0x148>)
 8000600:	f001 f865 	bl	80016ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800060a:	4831      	ldr	r0, [pc, #196]	; (80006d0 <MX_GPIO_Init+0x14c>)
 800060c:	f001 f85f 	bl	80016ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000610:	2200      	movs	r2, #0
 8000612:	f64b 4140 	movw	r1, #48192	; 0xbc40
 8000616:	482f      	ldr	r0, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x150>)
 8000618:	f001 f859 	bl	80016ce <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	482c      	ldr	r0, [pc, #176]	; (80006d4 <MX_GPIO_Init+0x150>)
 8000622:	f001 f854 	bl	80016ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	4823      	ldr	r0, [pc, #140]	; (80006cc <MX_GPIO_Init+0x148>)
 8000640:	f000 fed4 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000644:	2304      	movs	r3, #4
 8000646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <MX_GPIO_Init+0x14c>)
 8000658:	f000 fec8 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GDO0_Pin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 800065c:	2308      	movs	r3, #8
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_GPIO_Init+0x154>)
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4818      	ldr	r0, [pc, #96]	; (80006d0 <MX_GPIO_Init+0x14c>)
 8000670:	f000 febc 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin PA8 PA11 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_8|GPIO_PIN_11;
 8000674:	f44f 6311 	mov.w	r3, #2320	; 0x910
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2302      	movs	r3, #2
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <MX_GPIO_Init+0x14c>)
 800068e:	f000 fead 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB15 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000692:	f64b 43c0 	movw	r3, #48320	; 0xbcc0
 8000696:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <MX_GPIO_Init+0x150>)
 80006ac:	f000 fe9e 	bl	80013ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2009      	movs	r0, #9
 80006b6:	f000 fdec 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006ba:	2009      	movs	r0, #9
 80006bc:	f000 fe05 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	10210000 	.word	0x10210000

080006dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	uint8_t data_in;


	if(htim->Instance == TIM4){ //chequea que la interrupción sea la del timer adecuado
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a84      	ldr	r2, [pc, #528]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x220>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	f040 8102 	bne.w	80008f4 <HAL_TIM_PeriodElapsedCallback+0x218>


		data_in = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2); //leo el valor de dato de entrada
 80006f0:	2104      	movs	r1, #4
 80006f2:	4883      	ldr	r0, [pc, #524]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80006f4:	f000 ffd4 	bl	80016a0 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	72fb      	strb	r3, [r7, #11]


		switch(state)
 80006fc:	4b81      	ldr	r3, [pc, #516]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000704:	2b01      	cmp	r3, #1
 8000706:	d048      	beq.n	800079a <HAL_TIM_PeriodElapsedCallback+0xbe>
 8000708:	e087      	b.n	800081a <HAL_TIM_PeriodElapsedCallback+0x13e>
		{
			case 0:
				a_promediar += data_in;
 800070a:	7afb      	ldrb	r3, [r7, #11]
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b7e      	ldr	r3, [pc, #504]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b7c      	ldr	r3, [pc, #496]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000718:	801a      	strh	r2, [r3, #0]
				contador20ms++;
 800071a:	4b7c      	ldr	r3, [pc, #496]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x230>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b7a      	ldr	r3, [pc, #488]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000724:	801a      	strh	r2, [r3, #0]
				if(contador20ms == 499){ 							// 500 cuentas equivalen a 20ms por la frecuencia de 25kHz de la interrupcion
 8000726:	4b79      	ldr	r3, [pc, #484]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800072e:	4293      	cmp	r3, r2
 8000730:	d170      	bne.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x138>
					promedio = (int) ((a_promediar * 100) / 500); 	//calculo el promedio de 1 en 20 ms
 8000732:	4b75      	ldr	r3, [pc, #468]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	fb03 f302 	mul.w	r3, r3, r2
 800073e:	4a74      	ldr	r2, [pc, #464]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1152      	asrs	r2, r2, #5
 8000746:	17db      	asrs	r3, r3, #31
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b71      	ldr	r3, [pc, #452]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800074e:	801a      	strh	r2, [r3, #0]

					if(promedio > threshold) sync_mx = sync_mx << 1; //sync_mx es una variable de 16 bits que me permite testear cuantos bloques consecutivos de 20ms hubo un porcentaje de 1 que supere el threshold
 8000750:	4b70      	ldr	r3, [pc, #448]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b28      	cmp	r3, #40	; 0x28
 8000756:	d906      	bls.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8000758:	4b6f      	ldr	r3, [pc, #444]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b6d      	ldr	r3, [pc, #436]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	e002      	b.n	800076c <HAL_TIM_PeriodElapsedCallback+0x90>
					else sync_mx = 1;
 8000766:	4b6c      	ldr	r3, [pc, #432]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000768:	2201      	movs	r2, #1
 800076a:	801a      	strh	r2, [r3, #0]

 					if(sync_mx == 0)  {
 800076c:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d105      	bne.n	8000780 <HAL_TIM_PeriodElapsedCallback+0xa4>
						state = 1; //si surgen 16 bloques consecutivos sospechamos inhibición y hacemos análisis en 150ms
 8000774:	4b63      	ldr	r3, [pc, #396]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
						sync_mx = 1;
 800077a:	4b67      	ldr	r3, [pc, #412]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800077c:	2201      	movs	r2, #1
 800077e:	801a      	strh	r2, [r3, #0]
					}
					contador20ms = 0;
 8000780:	4b62      	ldr	r3, [pc, #392]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000782:	2200      	movs	r2, #0
 8000784:	801a      	strh	r2, [r3, #0]
					a_promediar = 0;
 8000786:	4b60      	ldr	r3, [pc, #384]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000788:	2200      	movs	r2, #0
 800078a:	801a      	strh	r2, [r3, #0]
					bInhibicion = 0;
 800078c:	4b63      	ldr	r3, [pc, #396]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
					promedio = 0;
 8000792:	4b60      	ldr	r3, [pc, #384]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
				}
				break;
 8000798:	e03c      	b.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x138>

			case 1:
				a_promediar += data_in;
 800079a:	7afb      	ldrb	r3, [r7, #11]
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b5a      	ldr	r3, [pc, #360]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b58      	ldr	r3, [pc, #352]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80007a8:	801a      	strh	r2, [r3, #0]
				contador150ms++;
 80007aa:	4b5d      	ldr	r3, [pc, #372]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b5b      	ldr	r3, [pc, #364]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007b4:	801a      	strh	r2, [r3, #0]
				if(contador150ms == 3749) {
 80007b6:	4b5a      	ldr	r3, [pc, #360]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	f640 62a5 	movw	r2, #3749	; 0xea5
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12a      	bne.n	8000818 <HAL_TIM_PeriodElapsedCallback+0x13c>
					promedio = (int) ((a_promediar * 100) / 3750); 	//calculo el promedio de unos en 150 ms
 80007c2:	4b51      	ldr	r3, [pc, #324]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	fb03 f302 	mul.w	r3, r3, r2
 80007ce:	4a55      	ldr	r2, [pc, #340]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	1292      	asrs	r2, r2, #10
 80007d6:	17db      	asrs	r3, r3, #31
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80007de:	801a      	strh	r2, [r3, #0]
					if(promedio > threshold){
 80007e0:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	2b28      	cmp	r3, #40	; 0x28
 80007e6:	d908      	bls.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x11e>
						bInhibicion = 1;
 80007e8:	4b4c      	ldr	r3, [pc, #304]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim4);
 80007ee:	484e      	ldr	r0, [pc, #312]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80007f0:	f002 f9c8 	bl	8002b84 <HAL_TIM_Base_Stop_IT>
						Inte = 0;
 80007f4:	4b4d      	ldr	r3, [pc, #308]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
					}
					contador150ms = 0; // 3750 cuentas equivalen a 150ms por la frecuencia de 25kHz de la interrupcion
 80007fa:	4b49      	ldr	r3, [pc, #292]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	801a      	strh	r2, [r3, #0]
					state = 0;
 8000800:	4b40      	ldr	r3, [pc, #256]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
					a_promediar = 0;
 8000806:	4b40      	ldr	r3, [pc, #256]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
					promedio = 0;
 800080c:	4b41      	ldr	r3, [pc, #260]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800080e:	2200      	movs	r2, #0
 8000810:	801a      	strh	r2, [r3, #0]
				}

				break;
 8000812:	e001      	b.n	8000818 <HAL_TIM_PeriodElapsedCallback+0x13c>
				break;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <HAL_TIM_PeriodElapsedCallback+0x13e>
				break;
 8000818:	bf00      	nop
		}

		contador20ms_rssi++;
 800081a:	4b45      	ldr	r3, [pc, #276]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b43      	ldr	r3, [pc, #268]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000824:	801a      	strh	r2, [r3, #0]
		if(contador20ms_rssi == 499){ 							// 500 cuentas equivalen a 20ms por la frecuencia de 25kHz de la interrupcion
 8000826:	4b42      	ldr	r3, [pc, #264]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800082e:	4293      	cmp	r3, r2
 8000830:	d160      	bne.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0x218>

			if(i_rssi < 10){
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b09      	cmp	r3, #9
 8000838:	d82c      	bhi.n	8000894 <HAL_TIM_PeriodElapsedCallback+0x1b8>
				RSSI_val[i_rssi] = RSSI_level(); 					//Llamo a función que devuelve el valor del rssi
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461c      	mov	r4, r3
 8000840:	f000 f880 	bl	8000944 <RSSI_level>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800084a:	551a      	strb	r2, [r3, r4]
				if (RSSI_val[i_rssi] > 120 || RSSI_val[i_rssi] < 10)
 800084c:	4b39      	ldr	r3, [pc, #228]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000854:	5c9b      	ldrb	r3, [r3, r2]
 8000856:	2b78      	cmp	r3, #120	; 0x78
 8000858:	d806      	bhi.n	8000868 <HAL_TIM_PeriodElapsedCallback+0x18c>
 800085a:	4b36      	ldr	r3, [pc, #216]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000862:	5c9b      	ldrb	r3, [r3, r2]
 8000864:	2b09      	cmp	r3, #9
 8000866:	d807      	bhi.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x19c>
					RSSI_val[i_rssi] = suma_RSSI;
 8000868:	4b34      	ldr	r3, [pc, #208]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800086a:	8819      	ldrh	r1, [r3, #0]
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	b2c9      	uxtb	r1, r1
 8000874:	4b30      	ldr	r3, [pc, #192]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000876:	5499      	strb	r1, [r3, r2]
				i_rssi++;
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000882:	701a      	strb	r2, [r3, #0]

				if(i_rssi >= 10)
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b09      	cmp	r3, #9
 800088a:	d906      	bls.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1be>
					i_rssi = 0;
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e002      	b.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1be>
			}
			else i_rssi = 0;
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]


			for(int i = 0; i<10; i++){
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e00d      	b.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x1e0>
				suma_RSSI += RSSI_val[i];
 80008a0:	4a25      	ldr	r2, [pc, #148]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b22      	ldr	r3, [pc, #136]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008b4:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i<10; i++){
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b09      	cmp	r3, #9
 80008c0:	ddee      	ble.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			}

			suma_RSSI = (uint16_t)(suma_RSSI/10);
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80008c8:	fba2 2303 	umull	r2, r3, r2, r3
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008d2:	801a      	strh	r2, [r3, #0]

			if(suma_RSSI <= 30) {
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	2b1e      	cmp	r3, #30
 80008da:	d808      	bhi.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x212>
				bInhibicion = 2;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80008de:	2202      	movs	r2, #2
 80008e0:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);  // Si RSSI promedio es <= 30 es inhibicion por potencia
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80008e4:	f002 f94e 	bl	8002b84 <HAL_TIM_Base_Stop_IT>
				Inte = 0;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
			}
			contador20ms_rssi = 0;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	801a      	strh	r2, [r3, #0]


		}
	}

}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	40000800 	.word	0x40000800
 8000900:	40010800 	.word	0x40010800
 8000904:	20000192 	.word	0x20000192
 8000908:	2000018a 	.word	0x2000018a
 800090c:	2000018c 	.word	0x2000018c
 8000910:	10624dd3 	.word	0x10624dd3
 8000914:	20000188 	.word	0x20000188
 8000918:	20000000 	.word	0x20000000
 800091c:	20000194 	.word	0x20000194
 8000920:	2000018e 	.word	0x2000018e
 8000924:	45e7b273 	.word	0x45e7b273
 8000928:	20000198 	.word	0x20000198
 800092c:	2000000e 	.word	0x2000000e
 8000930:	20000190 	.word	0x20000190
 8000934:	20000193 	.word	0x20000193
 8000938:	20000004 	.word	0x20000004
 800093c:	20000002 	.word	0x20000002
 8000940:	cccccccd 	.word	0xcccccccd

08000944 <RSSI_level>:

uint8_t RSSI_level(){ //esta funcion devuelve el valor en dBm del RSSI
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	int result_RSSI, result;

	result = rf_read_register(RSSI); 			//leo el registro que almacena el RSSI
 800094a:	20f4      	movs	r0, #244	; 0xf4
 800094c:	f000 f921 	bl	8000b92 <rf_read_register>
 8000950:	4603      	mov	r3, r0
 8000952:	603b      	str	r3, [r7, #0]
	if(result < 128){  							//Transformo a dBm segun su valor
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2b7f      	cmp	r3, #127	; 0x7f
 8000958:	dc06      	bgt.n	8000968 <RSSI_level+0x24>
		result_RSSI = (int)(result/2)-74;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	0fda      	lsrs	r2, r3, #31
 800095e:	4413      	add	r3, r2
 8000960:	105b      	asrs	r3, r3, #1
 8000962:	3b4a      	subs	r3, #74	; 0x4a
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	e007      	b.n	8000978 <RSSI_level+0x34>
	}
	else{
		result_RSSI = (int)((result -256)/2)-74;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800096e:	0fda      	lsrs	r2, r3, #31
 8000970:	4413      	add	r3, r2
 8000972:	105b      	asrs	r3, r3, #1
 8000974:	3b4a      	subs	r3, #74	; 0x4a
 8000976:	607b      	str	r3, [r7, #4]
	}


	return (uint8_t)((-1)*result_RSSI);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	425b      	negs	r3, r3
 800097e:	b2db      	uxtb	r3, r3
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <DWT_Delay_us+0x3c>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80009a2:	f001 fa91 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 80009a6:	4602      	mov	r2, r0
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <DWT_Delay_us+0x40>)
 80009aa:	fba3 2302 	umull	r2, r3, r3, r2
 80009ae:	0c9b      	lsrs	r3, r3, #18
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	fb02 f303 	mul.w	r3, r2, r3
 80009b6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80009b8:	bf00      	nop
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <DWT_Delay_us+0x3c>)
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	1ad2      	subs	r2, r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d3f8      	bcc.n	80009ba <DWT_Delay_us+0x26>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	e0001000 	.word	0xe0001000
 80009d4:	431bde83 	.word	0x431bde83

080009d8 <rf_begin>:
/* Private user code ---------------------------------------------------------*/

/* RF DRIVER ----------------------------------------------------------------------------------------------------------------------*/

/*--------------------------[CC1101 Init and Settings]------------------------------*/
uint8_t rf_begin(SPI_HandleTypeDef* hspi, MODULATION_TypeDef mode, ISMBAND_TypeDef ism_band, GPIO_TypeDef* cs_port, uint16_t cs_pin, uint16_t gdo0){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	72fb      	strb	r3, [r7, #11]
 80009e6:	4613      	mov	r3, r2
 80009e8:	72bb      	strb	r3, [r7, #10]
	 * @param gdo0: Pin number of the pin connected to C1101 CGDO0, used for interruptions. Interruption is configured as FALLING EDGE.
	 *
	 */

	//Pinout linking
	hal_spi = hspi;
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <rf_begin+0x6c>)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 80009f0:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <rf_begin+0x70>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <rf_begin+0x74>)
 80009f8:	8b3b      	ldrh	r3, [r7, #24]
 80009fa:	8013      	strh	r3, [r2, #0]
	GDO0_Pin = gdo0;
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <rf_begin+0x78>)
 80009fe:	8bbb      	ldrh	r3, [r7, #28]
 8000a00:	8013      	strh	r3, [r2, #0]

	//Turn on the chip
	rf_reset();
 8000a02:	f000 f827 	bl	8000a54 <rf_reset>
	HAL_Delay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f000 fb4a 	bl	80010a0 <HAL_Delay>

	//Check that the SPI works
	if(!rf_check()){
 8000a0c:	f000 f848 	bl	8000aa0 <rf_check>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <rf_begin+0x42>
		return FALSE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e010      	b.n	8000a3c <rf_begin+0x64>
	}


	rf_write_strobe(SFTX); //Flush TX FIFO
 8000a1a:	203b      	movs	r0, #59	; 0x3b
 8000a1c:	f000 f8a8 	bl	8000b70 <rf_write_strobe>
	HAL_Delay(1); //TODO I don't think this is really needed
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fb3d 	bl	80010a0 <HAL_Delay>
	rf_write_strobe(SFRX); //Flush RX FIFO
 8000a26:	203a      	movs	r0, #58	; 0x3a
 8000a28:	f000 f8a2 	bl	8000b70 <rf_write_strobe>
	HAL_Delay(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fb37 	bl	80010a0 <HAL_Delay>

	rf_set_modulation_mode(mode);
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f851 	bl	8000adc <rf_set_modulation_mode>

	return TRUE;
 8000a3a:	2301      	movs	r3, #1


}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000027c 	.word	0x2000027c
 8000a48:	20000278 	.word	0x20000278
 8000a4c:	20000282 	.word	0x20000282
 8000a50:	20000280 	.word	0x20000280

08000a54 <rf_reset>:

void rf_reset(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	/**
	 * @brief Turns on the RF chip with a specific sequence on the CS pin and a SRES command.
	 * The former is only needed on a cold start.
	 */
	DWT_Delay_Init();
 8000a58:	f7ff fb78 	bl	800014c <DWT_Delay_Init>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <rf_reset+0x44>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <rf_reset+0x48>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	f000 fe31 	bl	80016ce <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f7ff ff91 	bl	8000994 <DWT_Delay_us>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <rf_reset+0x44>)
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <rf_reset+0x48>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f000 fe26 	bl	80016ce <HAL_GPIO_WritePin>
	DWT_Delay_us(40);
 8000a82:	2028      	movs	r0, #40	; 0x28
 8000a84:	f7ff ff86 	bl	8000994 <DWT_Delay_us>

	rf_write_strobe(SRES);
 8000a88:	2030      	movs	r0, #48	; 0x30
 8000a8a:	f000 f871 	bl	8000b70 <rf_write_strobe>
	HAL_Delay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fb06 	bl	80010a0 <HAL_Delay>

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000278 	.word	0x20000278
 8000a9c:	20000282 	.word	0x20000282

08000aa0 <rf_check>:

uint8_t rf_check(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
	/**
	 * @brief Checks the version of the RF chip to check if SPI is OK. It checks 10 times to make sure wires are really OK.
	 */

	uint8_t ok = TRUE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t version;
	for(i=0; i<10; i++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71bb      	strb	r3, [r7, #6]
 8000aae:	e00c      	b.n	8000aca <rf_check+0x2a>
		version = rf_read_register(VERSION);
 8000ab0:	20f1      	movs	r0, #241	; 0xf1
 8000ab2:	f000 f86e 	bl	8000b92 <rf_read_register>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	717b      	strb	r3, [r7, #5]
		if(version!=0x14)
 8000aba:	797b      	ldrb	r3, [r7, #5]
 8000abc:	2b14      	cmp	r3, #20
 8000abe:	d001      	beq.n	8000ac4 <rf_check+0x24>
			ok = FALSE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<10; i++){
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	71bb      	strb	r3, [r7, #6]
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	2b09      	cmp	r3, #9
 8000ace:	d9ef      	bls.n	8000ab0 <rf_check+0x10>
	if (ok){
		//printf("RF check: OK\n\r");
	}else{
		//printf("RF check: No luck :(\n\r");
	}
	return ok;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <rf_set_modulation_mode>:

void rf_set_modulation_mode(MODULATION_TypeDef mode){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	 * @brief Loads the wanted modulation preset to the CC1101.
	 */

    uint8_t* cfg_reg;

    switch (mode)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d825      	bhi.n	8000b3a <rf_set_modulation_mode+0x5e>
 8000aee:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <rf_set_modulation_mode+0x18>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b11 	.word	0x08000b11
 8000af8:	08000b17 	.word	0x08000b17
 8000afc:	08000b1d 	.word	0x08000b1d
 8000b00:	08000b23 	.word	0x08000b23
 8000b04:	08000b29 	.word	0x08000b29
 8000b08:	08000b2f 	.word	0x08000b2f
 8000b0c:	08000b35 	.word	0x08000b35
    {
        case GFSK_1_2_kb:
        			cfg_reg = cc1100_GFSK_1_2_kb;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <rf_set_modulation_mode+0x78>)
 8000b12:	60fb      	str	r3, [r7, #12]
                    break;
 8000b14:	e014      	b.n	8000b40 <rf_set_modulation_mode+0x64>
        case GFSK_38_4_kb:
                    cfg_reg = cc1100_GFSK_38_4_kb;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <rf_set_modulation_mode+0x7c>)
 8000b18:	60fb      	str	r3, [r7, #12]
                    break;
 8000b1a:	e011      	b.n	8000b40 <rf_set_modulation_mode+0x64>
        case GFSK_100_kb:
        			cfg_reg = cc1100_GFSK_100_kb;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <rf_set_modulation_mode+0x80>)
 8000b1e:	60fb      	str	r3, [r7, #12]
                    break;
 8000b20:	e00e      	b.n	8000b40 <rf_set_modulation_mode+0x64>
        case MSK_250_kb:
        			cfg_reg = cc1100_MSK_250_kb;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <rf_set_modulation_mode+0x84>)
 8000b24:	60fb      	str	r3, [r7, #12]
                    break;
 8000b26:	e00b      	b.n	8000b40 <rf_set_modulation_mode+0x64>
        case MSK_500_kb:
        			cfg_reg = cc1100_MSK_500_kb;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <rf_set_modulation_mode+0x88>)
 8000b2a:	60fb      	str	r3, [r7, #12]
                    break;
 8000b2c:	e008      	b.n	8000b40 <rf_set_modulation_mode+0x64>
        case OOK_4_8_kb:
        			cfg_reg = cc1100_OOK_4_8_kb;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <rf_set_modulation_mode+0x8c>)
 8000b30:	60fb      	str	r3, [r7, #12]
                    break;
 8000b32:	e005      	b.n	8000b40 <rf_set_modulation_mode+0x64>
        case AKS_115_kb:
					cfg_reg = cc1100_AKS_115_kb;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <rf_set_modulation_mode+0x90>)
 8000b36:	60fb      	str	r3, [r7, #12]
					break;
 8000b38:	e002      	b.n	8000b40 <rf_set_modulation_mode+0x64>
        default:
        			cfg_reg = cc1100_GFSK_38_4_kb;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <rf_set_modulation_mode+0x7c>)
 8000b3c:	60fb      	str	r3, [r7, #12]
                    break;
 8000b3e:	bf00      	nop
    }

    rf_write_data(WRITE_BURST(0), cfg_reg, CFG_REGISTER);                            //writes all 47 config register
 8000b40:	222f      	movs	r2, #47	; 0x2f
 8000b42:	68f9      	ldr	r1, [r7, #12]
 8000b44:	2040      	movs	r0, #64	; 0x40
 8000b46:	f000 f83a 	bl	8000bbe <rf_write_data>

    //   test_cargar_cfg();

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000040 	.word	0x20000040
 8000b58:	20000070 	.word	0x20000070
 8000b5c:	200000a0 	.word	0x200000a0
 8000b60:	200000d0 	.word	0x200000d0
 8000b64:	20000100 	.word	0x20000100
 8000b68:	20000130 	.word	0x20000130
 8000b6c:	20000010 	.word	0x20000010

08000b70 <rf_write_strobe>:
}


/* SPI Comm ----------------------------------------------------------------*/

void rf_write_strobe(uint8_t strobe){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Writes command to the CC1101 to change its state-machine state.
	 */
	strobe = WRITE(strobe);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, NULL, 0);
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f839 	bl	8000bfc <__spi_write>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <rf_read_register>:

uint8_t rf_read_register(uint8_t reg){
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Reads the content of a single 1-byte register.
	 * @Returns The register value.
	 */
	uint8_t data;
	reg= READ(reg);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	71fb      	strb	r3, [r7, #7]
	__spi_read(&reg, &data, 1);
 8000ba6:	f107 010f 	add.w	r1, r7, #15
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	2201      	movs	r2, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f860 	bl	8000c74 <__spi_read>
	return data;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <rf_write_data>:
		addr = READ(addr);
	}
	__spi_read(&addr, data, size);
}

void rf_write_data(uint8_t addr, uint8_t* data, uint8_t size){
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	6039      	str	r1, [r7, #0]
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	71bb      	strb	r3, [r7, #6]
	 * @brief Writes multiple data.
	 * @param addr Base address.
	 * @param data The buffer where the data to be written is located.
	 * @param size Number of bytes to be written.
	 */
	if(size>1){
 8000bce:	79bb      	ldrb	r3, [r7, #6]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d905      	bls.n	8000be0 <rf_write_data+0x22>
		addr = WRITE_BURST(addr);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e001      	b.n	8000be4 <rf_write_data+0x26>
	}else{
		addr = WRITE(addr);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	71fb      	strb	r3, [r7, #7]
	}
	__spi_write(&addr, data, size);
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	6839      	ldr	r1, [r7, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f805 	bl	8000bfc <__spi_write>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <__spi_write>:

/* SPI Handling -------------------------------------------------------------*/

HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <__spi_write+0x6c>)
 8000c0c:	6818      	ldr	r0, [r3, #0]
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <__spi_write+0x70>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	f000 fd5a 	bl	80016ce <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <__spi_write+0x74>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c22:	2201      	movs	r2, #1
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	f001 fa23 	bl	8002070 <HAL_SPI_Transmit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	75fb      	strb	r3, [r7, #23]
	if(status==HAL_OK && pData!=NULL)
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10c      	bne.n	8000c4e <__spi_write+0x52>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d009      	beq.n	8000c4e <__spi_write+0x52>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <__spi_write+0x74>)
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	88fa      	ldrh	r2, [r7, #6]
 8000c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	f001 fa13 	bl	8002070 <HAL_SPI_Transmit>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <__spi_write+0x6c>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <__spi_write+0x70>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f000 fd38 	bl	80016ce <HAL_GPIO_WritePin>
	return status;
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000278 	.word	0x20000278
 8000c6c:	20000282 	.word	0x20000282
 8000c70:	2000027c 	.word	0x2000027c

08000c74 <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <__spi_read+0x60>)
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <__spi_read+0x64>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f000 fd1e 	bl	80016ce <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <__spi_read+0x68>)
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	68f9      	ldr	r1, [r7, #12]
 8000c9e:	f001 f9e7 	bl	8002070 <HAL_SPI_Transmit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <__spi_read+0x68>)
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	88fa      	ldrh	r2, [r7, #6]
 8000cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	f001 fb19 	bl	80022e8 <HAL_SPI_Receive>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <__spi_read+0x60>)
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <__spi_read+0x64>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f000 fd02 	bl	80016ce <HAL_GPIO_WritePin>

	return status;
 8000cca:	7dfb      	ldrb	r3, [r7, #23]

}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000278 	.word	0x20000278
 8000cd8:	20000282 	.word	0x20000282
 8000cdc:	2000027c 	.word	0x2000027c

08000ce0 <HAL_GPIO_EXTI_Callback>:

/* Interrupts ---------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
	/*
	if (GPIO_Pin == GPIO_PIN_15)
		TX_RX_BEGAN = 1;
	*/
	if(GPIO_Pin == GDO0_Pin){
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x24>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	88fa      	ldrh	r2, [r7, #6]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d102      	bne.n	8000cfa <HAL_GPIO_EXTI_Callback+0x1a>
		GDO0_FLAG = 1;
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
	}
	/*
	if(GPIO_Pin == CS_Pin){ //User B1 Button (the blue one on F446ZE)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
	}*/
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000280 	.word	0x20000280
 8000d08:	20000195 	.word	0x20000195

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_MspInit+0x5c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <HAL_MspInit+0x5c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_MspInit+0x5c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_MspInit+0x5c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_MspInit+0x5c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_MspInit+0x5c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_MspInit+0x60>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_MspInit+0x60>)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010000 	.word	0x40010000

08000d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <HAL_SPI_MspInit+0x88>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d12f      	bne.n	8000df0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <HAL_SPI_MspInit+0x90>)
 8000dd4:	f000 fb0a 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd8:	2340      	movs	r3, #64	; 0x40
 8000dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_SPI_MspInit+0x90>)
 8000dec:	f000 fafe 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010800 	.word	0x40010800

08000e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_TIM_Base_MspInit+0x44>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d113      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_TIM_Base_MspInit+0x48>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_TIM_Base_MspInit+0x48>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_TIM_Base_MspInit+0x48>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2102      	movs	r1, #2
 8000e32:	201e      	movs	r0, #30
 8000e34:	f000 fa2d 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e38:	201e      	movs	r0, #30
 8000e3a:	f000 fa46 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40000800 	.word	0x40000800
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_UART_MspInit+0x9c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d139      	bne.n	8000ee4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <HAL_UART_MspInit+0xa4>)
 8000eb6:	f000 fa99 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_UART_MspInit+0xa4>)
 8000ed0:	f000 fa8c 	bl	80013ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2025      	movs	r0, #37	; 0x25
 8000eda:	f000 f9da 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ede:	2025      	movs	r0, #37	; 0x25
 8000ee0:	f000 f9f3 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <BusFault_Handler+0x4>

08000f16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f890 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f50:	2008      	movs	r0, #8
 8000f52:	f000 fbd5 	bl	8001700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM4_IRQHandler+0x10>)
 8000f62:	f001 fe3d 	bl	8002be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000198 	.word	0x20000198

08000f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <USART1_IRQHandler+0x10>)
 8000f76:	f002 fafd 	bl	8003574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001e0 	.word	0x200001e0

08000f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f92:	e003      	b.n	8000f9c <LoopCopyDataInit>

08000f94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f9a:	3104      	adds	r1, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fa0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fa4:	d3f6      	bcc.n	8000f94 <CopyDataInit>
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fa8:	e002      	b.n	8000fb0 <LoopFillZerobss>

08000faa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fac:	f842 3b04 	str.w	r3, [r2], #4

08000fb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fb4:	d3f9      	bcc.n	8000faa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffe5 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f002 fde7 	bl	8003b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff f8f5 	bl	80001ac <main>
  bx lr
 8000fc2:	4770      	bx	lr
  ldr r3, =_sidata
 8000fc4:	08003c30 	.word	0x08003c30
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fcc:	2000016c 	.word	0x2000016c
  ldr r2, =_sbss
 8000fd0:	2000016c 	.word	0x2000016c
  ldr r3, = _ebss
 8000fd4:	20000288 	.word	0x20000288

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x28>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f945 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fe88 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f95d 	bl	80012e6 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001044:	f000 f925 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000160 	.word	0x20000160
 8001060:	20000168 	.word	0x20000168
 8001064:	20000164 	.word	0x20000164

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <HAL_IncTick+0x20>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000168 	.word	0x20000168
 8001088:	20000284 	.word	0x20000284

0800108c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000284 	.word	0x20000284

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff fff0 	bl	800108c <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_Delay+0x40>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffe0 	bl	800108c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000168 	.word	0x20000168

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4906      	ldr	r1, [pc, #24]	; (800117c <__NVIC_EnableIRQ+0x34>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800125c:	f7ff ff90 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff2d 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff42 	bl	800112c <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff90 	bl	80011d4 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5f 	bl	8001180 <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff35 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001312:	2b02      	cmp	r3, #2
 8001314:	d005      	beq.n	8001322 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2204      	movs	r2, #4
 800131a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e051      	b.n	80013c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 020e 	bic.w	r2, r2, #14
 8001330:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0201 	bic.w	r2, r2, #1
 8001340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_DMA_Abort_IT+0xd0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d029      	beq.n	80013a0 <HAL_DMA_Abort_IT+0xa0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <HAL_DMA_Abort_IT+0xd4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d022      	beq.n	800139c <HAL_DMA_Abort_IT+0x9c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_DMA_Abort_IT+0xd8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d01a      	beq.n	8001396 <HAL_DMA_Abort_IT+0x96>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_DMA_Abort_IT+0xdc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d012      	beq.n	8001390 <HAL_DMA_Abort_IT+0x90>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <HAL_DMA_Abort_IT+0xe0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00a      	beq.n	800138a <HAL_DMA_Abort_IT+0x8a>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <HAL_DMA_Abort_IT+0xe4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d102      	bne.n	8001384 <HAL_DMA_Abort_IT+0x84>
 800137e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001382:	e00e      	b.n	80013a2 <HAL_DMA_Abort_IT+0xa2>
 8001384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001388:	e00b      	b.n	80013a2 <HAL_DMA_Abort_IT+0xa2>
 800138a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138e:	e008      	b.n	80013a2 <HAL_DMA_Abort_IT+0xa2>
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	e005      	b.n	80013a2 <HAL_DMA_Abort_IT+0xa2>
 8001396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139a:	e002      	b.n	80013a2 <HAL_DMA_Abort_IT+0xa2>
 800139c:	2310      	movs	r3, #16
 800139e:	e000      	b.n	80013a2 <HAL_DMA_Abort_IT+0xa2>
 80013a0:	2301      	movs	r3, #1
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_DMA_Abort_IT+0xe8>)
 80013a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	4798      	blx	r3
    } 
  }
  return status;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020008 	.word	0x40020008
 80013d4:	4002001c 	.word	0x4002001c
 80013d8:	40020030 	.word	0x40020030
 80013dc:	40020044 	.word	0x40020044
 80013e0:	40020058 	.word	0x40020058
 80013e4:	4002006c 	.word	0x4002006c
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b08b      	sub	sp, #44	; 0x2c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e127      	b.n	8001650 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001400:	2201      	movs	r2, #1
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8116 	bne.w	800164a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b12      	cmp	r3, #18
 8001424:	d034      	beq.n	8001490 <HAL_GPIO_Init+0xa4>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d80d      	bhi.n	8001446 <HAL_GPIO_Init+0x5a>
 800142a:	2b02      	cmp	r3, #2
 800142c:	d02b      	beq.n	8001486 <HAL_GPIO_Init+0x9a>
 800142e:	2b02      	cmp	r3, #2
 8001430:	d804      	bhi.n	800143c <HAL_GPIO_Init+0x50>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d031      	beq.n	800149a <HAL_GPIO_Init+0xae>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d01c      	beq.n	8001474 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143a:	e048      	b.n	80014ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800143c:	2b03      	cmp	r3, #3
 800143e:	d043      	beq.n	80014c8 <HAL_GPIO_Init+0xdc>
 8001440:	2b11      	cmp	r3, #17
 8001442:	d01b      	beq.n	800147c <HAL_GPIO_Init+0x90>
          break;
 8001444:	e043      	b.n	80014ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001446:	4a89      	ldr	r2, [pc, #548]	; (800166c <HAL_GPIO_Init+0x280>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d026      	beq.n	800149a <HAL_GPIO_Init+0xae>
 800144c:	4a87      	ldr	r2, [pc, #540]	; (800166c <HAL_GPIO_Init+0x280>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d806      	bhi.n	8001460 <HAL_GPIO_Init+0x74>
 8001452:	4a87      	ldr	r2, [pc, #540]	; (8001670 <HAL_GPIO_Init+0x284>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d020      	beq.n	800149a <HAL_GPIO_Init+0xae>
 8001458:	4a86      	ldr	r2, [pc, #536]	; (8001674 <HAL_GPIO_Init+0x288>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01d      	beq.n	800149a <HAL_GPIO_Init+0xae>
          break;
 800145e:	e036      	b.n	80014ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001460:	4a85      	ldr	r2, [pc, #532]	; (8001678 <HAL_GPIO_Init+0x28c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0xae>
 8001466:	4a85      	ldr	r2, [pc, #532]	; (800167c <HAL_GPIO_Init+0x290>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d016      	beq.n	800149a <HAL_GPIO_Init+0xae>
 800146c:	4a84      	ldr	r2, [pc, #528]	; (8001680 <HAL_GPIO_Init+0x294>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0xae>
          break;
 8001472:	e02c      	b.n	80014ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e028      	b.n	80014ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	3304      	adds	r3, #4
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e023      	b.n	80014ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	3308      	adds	r3, #8
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e01e      	b.n	80014ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	330c      	adds	r3, #12
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e019      	b.n	80014ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014a2:	2304      	movs	r3, #4
 80014a4:	623b      	str	r3, [r7, #32]
          break;
 80014a6:	e012      	b.n	80014ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d105      	bne.n	80014bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b0:	2308      	movs	r3, #8
 80014b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	611a      	str	r2, [r3, #16]
          break;
 80014ba:	e008      	b.n	80014ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014bc:	2308      	movs	r3, #8
 80014be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	615a      	str	r2, [r3, #20]
          break;
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2bff      	cmp	r3, #255	; 0xff
 80014d2:	d801      	bhi.n	80014d8 <HAL_GPIO_Init+0xec>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	e001      	b.n	80014dc <HAL_GPIO_Init+0xf0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3304      	adds	r3, #4
 80014dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2bff      	cmp	r3, #255	; 0xff
 80014e2:	d802      	bhi.n	80014ea <HAL_GPIO_Init+0xfe>
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x104>
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	3b08      	subs	r3, #8
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	210f      	movs	r1, #15
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	6a39      	ldr	r1, [r7, #32]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	431a      	orrs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8096 	beq.w	800164a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800151e:	4b59      	ldr	r3, [pc, #356]	; (8001684 <HAL_GPIO_Init+0x298>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_GPIO_Init+0x298>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b56      	ldr	r3, [pc, #344]	; (8001684 <HAL_GPIO_Init+0x298>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001536:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_GPIO_Init+0x29c>)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4b      	ldr	r2, [pc, #300]	; (800168c <HAL_GPIO_Init+0x2a0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x19e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_GPIO_Init+0x2a4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x19a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a49      	ldr	r2, [pc, #292]	; (8001694 <HAL_GPIO_Init+0x2a8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x196>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <HAL_GPIO_Init+0x2ac>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x192>
 800157a:	2303      	movs	r3, #3
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x1a0>
 800157e:	2304      	movs	r3, #4
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x1a0>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x1a0>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x1a0>
 800158a:	2300      	movs	r3, #0
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800159c:	493a      	ldr	r1, [pc, #232]	; (8001688 <HAL_GPIO_Init+0x29c>)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4938      	ldr	r1, [pc, #224]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c4:	4b35      	ldr	r3, [pc, #212]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	4933      	ldr	r1, [pc, #204]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	492e      	ldr	r1, [pc, #184]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
 80015ea:	e006      	b.n	80015fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4929      	ldr	r1, [pc, #164]	; (800169c <HAL_GPIO_Init+0x2b0>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_GPIO_Init+0x2b0>)
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	4924      	ldr	r1, [pc, #144]	; (800169c <HAL_GPIO_Init+0x2b0>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_GPIO_Init+0x2b0>)
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	43db      	mvns	r3, r3
 800161c:	491f      	ldr	r1, [pc, #124]	; (800169c <HAL_GPIO_Init+0x2b0>)
 800161e:	4013      	ands	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_GPIO_Init+0x2b0>)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	491a      	ldr	r1, [pc, #104]	; (800169c <HAL_GPIO_Init+0x2b0>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	60cb      	str	r3, [r1, #12]
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_GPIO_Init+0x2b0>)
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	43db      	mvns	r3, r3
 8001644:	4915      	ldr	r1, [pc, #84]	; (800169c <HAL_GPIO_Init+0x2b0>)
 8001646:	4013      	ands	r3, r2
 8001648:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	3301      	adds	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	fa22 f303 	lsr.w	r3, r2, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	f47f aed0 	bne.w	8001400 <HAL_GPIO_Init+0x14>
  }
}
 8001660:	bf00      	nop
 8001662:	372c      	adds	r7, #44	; 0x2c
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	10210000 	.word	0x10210000
 8001670:	10110000 	.word	0x10110000
 8001674:	10120000 	.word	0x10120000
 8001678:	10310000 	.word	0x10310000
 800167c:	10320000 	.word	0x10320000
 8001680:	10220000 	.word	0x10220000
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000
 800168c:	40010800 	.word	0x40010800
 8001690:	40010c00 	.word	0x40010c00
 8001694:	40011000 	.word	0x40011000
 8001698:	40011400 	.word	0x40011400
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016de:	787b      	ldrb	r3, [r7, #1]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ea:	e003      	b.n	80016f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	041a      	lsls	r2, r3, #16
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fade 	bl	8000ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e26c      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8087 	beq.w	800185e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001750:	4b92      	ldr	r3, [pc, #584]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b04      	cmp	r3, #4
 800175a:	d00c      	beq.n	8001776 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800175c:	4b8f      	ldr	r3, [pc, #572]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d112      	bne.n	800178e <HAL_RCC_OscConfig+0x5e>
 8001768:	4b8c      	ldr	r3, [pc, #560]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d10b      	bne.n	800178e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001776:	4b89      	ldr	r3, [pc, #548]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d06c      	beq.n	800185c <HAL_RCC_OscConfig+0x12c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d168      	bne.n	800185c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e246      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x76>
 8001798:	4b80      	ldr	r3, [pc, #512]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a7f      	ldr	r2, [pc, #508]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e02e      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x98>
 80017ae:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a7a      	ldr	r2, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b78      	ldr	r3, [pc, #480]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a77      	ldr	r2, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0xbc>
 80017d2:	4b72      	ldr	r3, [pc, #456]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a71      	ldr	r2, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6e      	ldr	r2, [pc, #440]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017ec:	4b6b      	ldr	r3, [pc, #428]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a6a      	ldr	r2, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a67      	ldr	r2, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fc3e 	bl	800108c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fc3a 	bl	800108c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1fa      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0xe4>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fc2a 	bl	800108c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fc26 	bl	800108c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1e6      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x10c>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186a:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	d11c      	bne.n	80018bc <HAL_RCC_OscConfig+0x18c>
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d116      	bne.n	80018bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x176>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e1ba      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4939      	ldr	r1, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	e03a      	b.n	8001932 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fbdf 	bl	800108c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff fbdb 	bl	800108c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e19b      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4927      	ldr	r1, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fbbe 	bl	800108c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fbba 	bl	800108c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e17a      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d03a      	beq.n	80019b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d019      	beq.n	800197a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff fb9e 	bl	800108c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fb9a 	bl	800108c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e15a      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f000 fada 	bl	8001f2c <RCC_Delay>
 8001978:	e01c      	b.n	80019b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fb84 	bl	800108c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001986:	e00f      	b.n	80019a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fb80 	bl	800108c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d908      	bls.n	80019a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e140      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	42420000 	.word	0x42420000
 80019a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e9      	bne.n	8001988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80a6 	beq.w	8001b0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c6:	4b97      	ldr	r3, [pc, #604]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b94      	ldr	r3, [pc, #592]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a93      	ldr	r2, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b91      	ldr	r3, [pc, #580]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b8e      	ldr	r3, [pc, #568]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fa:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a8a      	ldr	r2, [pc, #552]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fb41 	bl	800108c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff fb3d 	bl	800108c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0fd      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x312>
 8001a34:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a7a      	ldr	r2, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e02d      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x334>
 8001a4a:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a75      	ldr	r2, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a72      	ldr	r2, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	e01c      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x356>
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a6c      	ldr	r2, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a69      	ldr	r2, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a66      	ldr	r2, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d015      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff faf1 	bl	800108c <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff faed 	bl	800108c <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0ab      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ee      	beq.n	8001aae <HAL_RCC_OscConfig+0x37e>
 8001ad0:	e014      	b.n	8001afc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fadb 	bl	800108c <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff fad7 	bl	800108c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e095      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af0:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ee      	bne.n	8001ada <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d105      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a47      	ldr	r2, [pc, #284]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8081 	beq.w	8001c1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d061      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d146      	bne.n	8001bba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <HAL_RCC_OscConfig+0x4fc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff faab 	bl	800108c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff faa7 	bl	800108c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e067      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d108      	bne.n	8001b74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	492d      	ldr	r1, [pc, #180]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a19      	ldr	r1, [r3, #32]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	430b      	orrs	r3, r1
 8001b86:	4927      	ldr	r1, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_OscConfig+0x4fc>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff fa7b 	bl	800108c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff fa77 	bl	800108c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e037      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x46a>
 8001bb8:	e02f      	b.n	8001c1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_RCC_OscConfig+0x4fc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa64 	bl	800108c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff fa60 	bl	800108c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e020      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x498>
 8001be6:	e018      	b.n	8001c1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e013      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	42420060 	.word	0x42420060

08001c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0d0      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d910      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 0207 	bic.w	r2, r3, #7
 8001c5a:	4965      	ldr	r1, [pc, #404]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b8      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	494d      	ldr	r1, [pc, #308]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d040      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e07f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e073      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06b      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4936      	ldr	r1, [pc, #216]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d20:	f7ff f9b4 	bl	800108c <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7ff f9b0 	bl	800108c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e053      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d50:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d210      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	4922      	ldr	r1, [pc, #136]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e032      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4916      	ldr	r1, [pc, #88]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dbe:	f000 f821 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1cc>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1d0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f912 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08003c10 	.word	0x08003c10
 8001dfc:	20000160 	.word	0x20000160
 8001e00:	20000164 	.word	0x20000164

08001e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	b490      	push	{r4, r7}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e0c:	1d3c      	adds	r4, r7, #4
 8001e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x40>
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x46>
 8001e42:	e02d      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e46:	623b      	str	r3, [r7, #32]
      break;
 8001e48:	e02d      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	0c9b      	lsrs	r3, r3, #18
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e56:	4413      	add	r3, r2
 8001e58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0c5b      	lsrs	r3, r3, #17
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e76:	4413      	add	r3, r2
 8001e78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e82:	fb02 f203 	mul.w	r2, r2, r3
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e004      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	623b      	str	r3, [r7, #32]
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ea2:	623b      	str	r3, [r7, #32]
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc90      	pop	{r4, r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	08003bfc 	.word	0x08003bfc
 8001eb8:	08003c0c 	.word	0x08003c0c
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	007a1200 	.word	0x007a1200
 8001ec4:	003d0900 	.word	0x003d0900

08001ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	20000160 	.word	0x20000160

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ee0:	f7ff fff2 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08003c20 	.word	0x08003c20

08001f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f08:	f7ff ffde 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001f0c:	4601      	mov	r1, r0
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	0adb      	lsrs	r3, r3, #11
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	08003c20 	.word	0x08003c20

08001f2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <RCC_Delay+0x34>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <RCC_Delay+0x38>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0a5b      	lsrs	r3, r3, #9
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f48:	bf00      	nop
  }
  while (Delay --);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	60fa      	str	r2, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f9      	bne.n	8001f48 <RCC_Delay+0x1c>
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000160 	.word	0x20000160
 8001f64:	10624dd3 	.word	0x10624dd3

08001f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e076      	b.n	8002068 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f8a:	d009      	beq.n	8001fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
 8001f92:	e005      	b.n	8001fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fed8 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	ea42 0103 	orr.w	r1, r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	0c1a      	lsrs	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f002 0204 	and.w	r2, r2, #4
 8002046:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002056:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_SPI_Transmit+0x22>
 800208e:	2302      	movs	r3, #2
 8002090:	e126      	b.n	80022e0 <HAL_SPI_Transmit+0x270>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800209a:	f7fe fff7 	bl	800108c <HAL_GetTick>
 800209e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d002      	beq.n	80020b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
 80020b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020b4:	e10b      	b.n	80022ce <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_SPI_Transmit+0x52>
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020c6:	e102      	b.n	80022ce <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	88fa      	ldrh	r2, [r7, #6]
 80020e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210e:	d10f      	bne.n	8002130 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800211e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d007      	beq.n	800214e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002156:	d14b      	bne.n	80021f0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_SPI_Transmit+0xf6>
 8002160:	8afb      	ldrh	r3, [r7, #22]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d13e      	bne.n	80021e4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	881a      	ldrh	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	1c9a      	adds	r2, r3, #2
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800218a:	e02b      	b.n	80021e4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d112      	bne.n	80021c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	881a      	ldrh	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	1c9a      	adds	r2, r3, #2
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80021be:	e011      	b.n	80021e4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c0:	f7fe ff64 	bl	800108c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d803      	bhi.n	80021d8 <HAL_SPI_Transmit+0x168>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d6:	d102      	bne.n	80021de <HAL_SPI_Transmit+0x16e>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021e2:	e074      	b.n	80022ce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ce      	bne.n	800218c <HAL_SPI_Transmit+0x11c>
 80021ee:	e04c      	b.n	800228a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_SPI_Transmit+0x18e>
 80021f8:	8afb      	ldrh	r3, [r7, #22]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d140      	bne.n	8002280 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	330c      	adds	r3, #12
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002224:	e02c      	b.n	8002280 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b02      	cmp	r3, #2
 8002232:	d113      	bne.n	800225c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	86da      	strh	r2, [r3, #54]	; 0x36
 800225a:	e011      	b.n	8002280 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800225c:	f7fe ff16 	bl	800108c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d803      	bhi.n	8002274 <HAL_SPI_Transmit+0x204>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002272:	d102      	bne.n	800227a <HAL_SPI_Transmit+0x20a>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800227e:	e026      	b.n	80022ce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1cd      	bne.n	8002226 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fbb8 	bl	8002a04 <SPI_EndRxTxTransaction>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	77fb      	strb	r3, [r7, #31]
 80022ca:	e000      	b.n	80022ce <HAL_SPI_Transmit+0x25e>
  }

error:
 80022cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022de:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002304:	d112      	bne.n	800232c <HAL_SPI_Receive+0x44>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10e      	bne.n	800232c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2204      	movs	r2, #4
 8002312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f8f1 	bl	800250a <HAL_SPI_TransmitReceive>
 8002328:	4603      	mov	r3, r0
 800232a:	e0ea      	b.n	8002502 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_SPI_Receive+0x52>
 8002336:	2302      	movs	r3, #2
 8002338:	e0e3      	b.n	8002502 <HAL_SPI_Receive+0x21a>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002342:	f7fe fea3 	bl	800108c <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d002      	beq.n	800235a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002354:	2302      	movs	r3, #2
 8002356:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002358:	e0ca      	b.n	80024f0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_SPI_Receive+0x7e>
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
    goto error;
 800236a:	e0c1      	b.n	80024f0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2204      	movs	r2, #4
 8002370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b2:	d10f      	bne.n	80023d4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d007      	beq.n	80023f2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d162      	bne.n	80024c0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023fa:	e02e      	b.n	800245a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d115      	bne.n	8002436 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f103 020c 	add.w	r2, r3, #12
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002434:	e011      	b.n	800245a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002436:	f7fe fe29 	bl	800108c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d803      	bhi.n	800244e <HAL_SPI_Receive+0x166>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244c:	d102      	bne.n	8002454 <HAL_SPI_Receive+0x16c>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002458:	e04a      	b.n	80024f0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1cb      	bne.n	80023fc <HAL_SPI_Receive+0x114>
 8002464:	e031      	b.n	80024ca <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d113      	bne.n	800249c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	b292      	uxth	r2, r2
 8002480:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	1c9a      	adds	r2, r3, #2
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800249a:	e011      	b.n	80024c0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800249c:	f7fe fdf6 	bl	800108c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d803      	bhi.n	80024b4 <HAL_SPI_Receive+0x1cc>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b2:	d102      	bne.n	80024ba <HAL_SPI_Receive+0x1d2>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024be:	e017      	b.n	80024f0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1cd      	bne.n	8002466 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa46 	bl	8002960 <SPI_EndRxTransaction>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	75fb      	strb	r3, [r7, #23]
 80024ec:	e000      	b.n	80024f0 <HAL_SPI_Receive+0x208>
  }

error :
 80024ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002500:	7dfb      	ldrb	r3, [r7, #23]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b08c      	sub	sp, #48	; 0x30
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002518:	2301      	movs	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_SPI_TransmitReceive+0x26>
 800252c:	2302      	movs	r3, #2
 800252e:	e18a      	b.n	8002846 <HAL_SPI_TransmitReceive+0x33c>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002538:	f7fe fda8 	bl	800108c <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002556:	2b01      	cmp	r3, #1
 8002558:	d00f      	beq.n	800257a <HAL_SPI_TransmitReceive+0x70>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002560:	d107      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x68>
 800256a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800256e:	2b04      	cmp	r3, #4
 8002570:	d003      	beq.n	800257a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002578:	e15b      	b.n	8002832 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_SPI_TransmitReceive+0x82>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_TransmitReceive+0x82>
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002592:	e14e      	b.n	8002832 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b04      	cmp	r3, #4
 800259e:	d003      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2205      	movs	r2, #5
 80025a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d007      	beq.n	80025fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002604:	d178      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_SPI_TransmitReceive+0x10a>
 800260e:	8b7b      	ldrh	r3, [r7, #26]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d166      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	1c9a      	adds	r2, r3, #2
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002638:	e053      	b.n	80026e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	d11b      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x176>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x176>
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d113      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	1c9a      	adds	r2, r3, #2
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b01      	cmp	r3, #1
 800268c:	d119      	bne.n	80026c2 <HAL_SPI_TransmitReceive+0x1b8>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d014      	beq.n	80026c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	b292      	uxth	r2, r2
 80026a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	1c9a      	adds	r2, r3, #2
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026be:	2301      	movs	r3, #1
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026c2:	f7fe fce3 	bl	800108c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d807      	bhi.n	80026e2 <HAL_SPI_TransmitReceive+0x1d8>
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d003      	beq.n	80026e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026e0:	e0a7      	b.n	8002832 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1a6      	bne.n	800263a <HAL_SPI_TransmitReceive+0x130>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1a1      	bne.n	800263a <HAL_SPI_TransmitReceive+0x130>
 80026f6:	e07c      	b.n	80027f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x1fc>
 8002700:	8b7b      	ldrh	r3, [r7, #26]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d16b      	bne.n	80027de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	330c      	adds	r3, #12
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272c:	e057      	b.n	80027de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d11c      	bne.n	8002776 <HAL_SPI_TransmitReceive+0x26c>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d017      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x26c>
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d114      	bne.n	8002776 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d119      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x2ae>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d014      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027b8:	f7fe fc68 	bl	800108c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d803      	bhi.n	80027d0 <HAL_SPI_TransmitReceive+0x2c6>
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ce:	d102      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x2cc>
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027dc:	e029      	b.n	8002832 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1a2      	bne.n	800272e <HAL_SPI_TransmitReceive+0x224>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d19d      	bne.n	800272e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f904 	bl	8002a04 <SPI_EndRxTxTransaction>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800280e:	e010      	b.n	8002832 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	e000      	b.n	8002832 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002830:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002846:	4618      	mov	r0, r3
 8002848:	3730      	adds	r7, #48	; 0x30
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002860:	f7fe fc14 	bl	800108c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002870:	f7fe fc0c 	bl	800108c <HAL_GetTick>
 8002874:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	015b      	lsls	r3, r3, #5
 800287c:	0d1b      	lsrs	r3, r3, #20
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002886:	e054      	b.n	8002932 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288e:	d050      	beq.n	8002932 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002890:	f7fe fbfc 	bl	800108c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	429a      	cmp	r2, r3
 800289e:	d902      	bls.n	80028a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d13d      	bne.n	8002922 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028be:	d111      	bne.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c8:	d004      	beq.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d107      	bne.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ec:	d10f      	bne.n	800290e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800290c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e017      	b.n	8002952 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3b01      	subs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4013      	ands	r3, r2
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	429a      	cmp	r2, r3
 8002940:	bf0c      	ite	eq
 8002942:	2301      	moveq	r3, #1
 8002944:	2300      	movne	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	429a      	cmp	r2, r3
 800294e:	d19b      	bne.n	8002888 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000160 	.word	0x20000160

08002960 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002974:	d111      	bne.n	800299a <SPI_EndRxTransaction+0x3a>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297e:	d004      	beq.n	800298a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	d107      	bne.n	800299a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002998:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a2:	d117      	bne.n	80029d4 <SPI_EndRxTransaction+0x74>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d112      	bne.n	80029d4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2101      	movs	r1, #1
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff ff49 	bl	8002850 <SPI_WaitFlagStateUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01a      	beq.n	80029fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e013      	b.n	80029fc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2200      	movs	r2, #0
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff ff36 	bl	8002850 <SPI_WaitFlagStateUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e000      	b.n	80029fc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7ff ff18 	bl	8002850 <SPI_WaitFlagStateUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e000      	b.n	8002a38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe f9cc 	bl	8000e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f000 fa92 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e03a      	b.n	8002b6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_TIM_Base_Start_IT+0x98>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x58>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d009      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x58>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_TIM_Base_Start_IT+0x9c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x58>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d010      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	e007      	b.n	8002b6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800

08002b84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10f      	bne.n	8002bcc <HAL_TIM_Base_Stop_IT+0x48>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a1a      	ldr	r2, [r3, #32]
 8002bb2:	f240 4344 	movw	r3, #1092	; 0x444
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_TIM_Base_Stop_IT+0x48>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0202 	mvn.w	r2, #2
 8002c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f9a4 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f997 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f9a6 	bl	8002f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0204 	mvn.w	r2, #4
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f97a 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f96d 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f97c 	bl	8002f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0208 	mvn.w	r2, #8
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f950 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f943 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f952 	bl	8002f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0210 	mvn.w	r2, #16
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f926 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f919 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f928 	bl	8002f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10e      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0201 	mvn.w	r2, #1
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fcbc 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d10e      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa6b 	bl	8003266 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d10e      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d107      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8ec 	bl	8002f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0220 	mvn.w	r2, #32
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fa36 	bl	8003254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIM_ConfigClockSource+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0a6      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x166>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d067      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0x120>
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d80b      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x6c>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d073      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0x140>
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d802      	bhi.n	8002e52 <HAL_TIM_ConfigClockSource+0x62>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d06f      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e50:	e078      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d06c      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0x140>
 8002e56:	2b30      	cmp	r3, #48	; 0x30
 8002e58:	d06a      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e5a:	e073      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e5c:	2b70      	cmp	r3, #112	; 0x70
 8002e5e:	d00d      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x8c>
 8002e60:	2b70      	cmp	r3, #112	; 0x70
 8002e62:	d804      	bhi.n	8002e6e <HAL_TIM_ConfigClockSource+0x7e>
 8002e64:	2b50      	cmp	r3, #80	; 0x50
 8002e66:	d033      	beq.n	8002ed0 <HAL_TIM_ConfigClockSource+0xe0>
 8002e68:	2b60      	cmp	r3, #96	; 0x60
 8002e6a:	d041      	beq.n	8002ef0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e6c:	e06a      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	d066      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x152>
 8002e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e78:	d017      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e7a:	e063      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f000 f965 	bl	800315a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
      break;
 8002ea8:	e04c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f000 f94e 	bl	800315a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ecc:	609a      	str	r2, [r3, #8]
      break;
 8002ece:	e039      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f000 f8c5 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2150      	movs	r1, #80	; 0x50
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f91c 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002eee:	e029      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	461a      	mov	r2, r3
 8002efe:	f000 f8e3 	bl	80030c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2160      	movs	r1, #96	; 0x60
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f90c 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002f0e:	e019      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f000 f8a5 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2140      	movs	r1, #64	; 0x40
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f8fc 	bl	8003126 <TIM_ITRx_SetConfig>
      break;
 8002f2e:	e009      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 f8f3 	bl	8003126 <TIM_ITRx_SetConfig>
        break;
 8002f40:	e000      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
	...

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a29      	ldr	r2, [pc, #164]	; (8003060 <TIM_Base_SetConfig+0xb8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00b      	beq.n	8002fd8 <TIM_Base_SetConfig+0x30>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d007      	beq.n	8002fd8 <TIM_Base_SetConfig+0x30>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a26      	ldr	r2, [pc, #152]	; (8003064 <TIM_Base_SetConfig+0xbc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0x30>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a25      	ldr	r2, [pc, #148]	; (8003068 <TIM_Base_SetConfig+0xc0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <TIM_Base_SetConfig+0xb8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00b      	beq.n	800300a <TIM_Base_SetConfig+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d007      	beq.n	800300a <TIM_Base_SetConfig+0x62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <TIM_Base_SetConfig+0xbc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_Base_SetConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <TIM_Base_SetConfig+0xc0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d108      	bne.n	800301c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a07      	ldr	r2, [pc, #28]	; (8003060 <TIM_Base_SetConfig+0xb8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	615a      	str	r2, [r3, #20]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800

0800306c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f023 0201 	bic.w	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 030a 	bic.w	r3, r3, #10
 80030a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f023 0210 	bic.w	r2, r3, #16
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	031b      	lsls	r3, r3, #12
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003104:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	621a      	str	r2, [r3, #32]
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	f043 0307 	orr.w	r3, r3, #7
 8003148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800315a:	b480      	push	{r7}
 800315c:	b087      	sub	sp, #28
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003174:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	431a      	orrs	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	609a      	str	r2, [r3, #8]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e046      	b.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a16      	ldr	r2, [pc, #88]	; (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fc:	d009      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a10      	ldr	r2, [pc, #64]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800

08003254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e03f      	b.n	800330a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fdd6 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fbd7 	bl	8003a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b08a      	sub	sp, #40	; 0x28
 8003316:	af02      	add	r7, sp, #8
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	d17c      	bne.n	800342c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_UART_Transmit+0x2c>
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e075      	b.n	800342e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_UART_Transmit+0x3e>
 800334c:	2302      	movs	r3, #2
 800334e:	e06e      	b.n	800342e <HAL_UART_Transmit+0x11c>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2221      	movs	r2, #33	; 0x21
 8003362:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003366:	f7fd fe91 	bl	800108c <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d108      	bne.n	8003394 <HAL_UART_Transmit+0x82>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e003      	b.n	800339c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80033a4:	e02a      	b.n	80033fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f9fa 	bl	80037aa <UART_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e036      	b.n	800342e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3302      	adds	r3, #2
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	e007      	b.n	80033ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1cf      	bne.n	80033a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	2140      	movs	r1, #64	; 0x40
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f9ca 	bl	80037aa <UART_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e006      	b.n	800342e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b08a      	sub	sp, #40	; 0x28
 800343a:	af02      	add	r7, sp, #8
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 8089 	bne.w	800356a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_UART_Receive+0x2e>
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e081      	b.n	800356c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_UART_Receive+0x40>
 8003472:	2302      	movs	r3, #2
 8003474:	e07a      	b.n	800356c <HAL_UART_Receive+0x136>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2222      	movs	r2, #34	; 0x22
 8003488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800348c:	f7fd fdfe 	bl	800108c <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	88fa      	ldrh	r2, [r7, #6]
 8003496:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a6:	d108      	bne.n	80034ba <HAL_UART_Receive+0x84>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d104      	bne.n	80034ba <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	e003      	b.n	80034c2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034ca:	e043      	b.n	8003554 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	2120      	movs	r1, #32
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f967 	bl	80037aa <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e042      	b.n	800356c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10c      	bne.n	8003506 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	3302      	adds	r3, #2
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	e01f      	b.n	8003546 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	d007      	beq.n	8003520 <HAL_UART_Receive+0xea>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_UART_Receive+0xf8>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e008      	b.n	8003540 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353a:	b2da      	uxtb	r2, r3
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1b6      	bne.n	80034cc <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
  }
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_UART_IRQHandler+0x52>
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9d5 	bl	800396e <UART_Receive_IT>
      return;
 80035c4:	e0d1      	b.n	800376a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80b0 	beq.w	800372e <HAL_UART_IRQHandler+0x1ba>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_UART_IRQHandler+0x70>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80a5 	beq.w	800372e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_UART_IRQHandler+0x90>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_UART_IRQHandler+0xb0>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	f043 0202 	orr.w	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_UART_IRQHandler+0xd0>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	f043 0204 	orr.w	r2, r3, #4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00f      	beq.n	800366e <HAL_UART_IRQHandler+0xfa>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <HAL_UART_IRQHandler+0xee>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	f043 0208 	orr.w	r2, r3, #8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d078      	beq.n	8003768 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <HAL_UART_IRQHandler+0x11c>
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f96f 	bl	800396e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_UART_IRQHandler+0x144>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d031      	beq.n	800371c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f8c0 	bl	800383e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d023      	beq.n	8003714 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	4a21      	ldr	r2, [pc, #132]	; (8003770 <HAL_UART_IRQHandler+0x1fc>)
 80036ea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fe05 	bl	8001300 <HAL_DMA_Abort_IT>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003706:	4610      	mov	r0, r2
 8003708:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370a:	e00e      	b.n	800372a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f843 	bl	8003798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003712:	e00a      	b.n	800372a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f83f 	bl	8003798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371a:	e006      	b.n	800372a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f83b 	bl	8003798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003728:	e01e      	b.n	8003768 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372a:	bf00      	nop
    return;
 800372c:	e01c      	b.n	8003768 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_UART_IRQHandler+0x1d6>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8ac 	bl	80038a0 <UART_Transmit_IT>
    return;
 8003748:	e00f      	b.n	800376a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_UART_IRQHandler+0x1f6>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8ed 	bl	800393e <UART_EndTransmit_IT>
    return;
 8003764:	bf00      	nop
 8003766:	e000      	b.n	800376a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003768:	bf00      	nop
  }
}
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	08003879 	.word	0x08003879

08003774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ba:	e02c      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c2:	d028      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <UART_WaitOnFlagUntilTimeout+0x30>
 80037ca:	f7fd fc5f 	bl	800108c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d21d      	bcs.n	8003816 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e00f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	429a      	cmp	r2, r3
 8003832:	d0c3      	beq.n	80037bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003854:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff ff80 	bl	8003798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b21      	cmp	r3, #33	; 0x21
 80038b2:	d13e      	bne.n	8003932 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d114      	bne.n	80038e8 <UART_Transmit_IT+0x48>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d110      	bne.n	80038e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]
 80038e6:	e008      	b.n	80038fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	1c59      	adds	r1, r3, #1
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6211      	str	r1, [r2, #32]
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	84d1      	strh	r1, [r2, #38]	; 0x26
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800391c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800392c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003954:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff08 	bl	8003774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b22      	cmp	r3, #34	; 0x22
 8003980:	d170      	bne.n	8003a64 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	d117      	bne.n	80039bc <UART_Receive_IT+0x4e>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d113      	bne.n	80039bc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	1c9a      	adds	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
 80039ba:	e026      	b.n	8003a0a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d007      	beq.n	80039e0 <UART_Receive_IT+0x72>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <UART_Receive_IT+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e008      	b.n	8003a00 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4619      	mov	r1, r3
 8003a18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d120      	bne.n	8003a60 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0220 	bic.w	r2, r2, #32
 8003a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fe95 	bl	8003786 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e002      	b.n	8003a66 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003aaa:	f023 030c 	bic.w	r3, r3, #12
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2c      	ldr	r2, [pc, #176]	; (8003b84 <UART_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7fe fa14 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	e002      	b.n	8003ae6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7fe f9fc 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8003ae4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009a      	lsls	r2, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <UART_SetConfig+0x118>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	0119      	lsls	r1, r3, #4
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <UART_SetConfig+0x118>)
 8003b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2064      	movs	r0, #100	; 0x64
 8003b26:	fb00 f303 	mul.w	r3, r0, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <UART_SetConfig+0x118>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3c:	4419      	add	r1, r3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <UART_SetConfig+0x118>)
 8003b56:	fba3 0302 	umull	r0, r3, r3, r2
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2064      	movs	r0, #100	; 0x64
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	; 0x32
 8003b68:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <UART_SetConfig+0x118>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	440a      	add	r2, r1
 8003b7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40013800 	.word	0x40013800
 8003b88:	51eb851f 	.word	0x51eb851f

08003b8c <__libc_init_array>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	2500      	movs	r5, #0
 8003b90:	4e0c      	ldr	r6, [pc, #48]	; (8003bc4 <__libc_init_array+0x38>)
 8003b92:	4c0d      	ldr	r4, [pc, #52]	; (8003bc8 <__libc_init_array+0x3c>)
 8003b94:	1ba4      	subs	r4, r4, r6
 8003b96:	10a4      	asrs	r4, r4, #2
 8003b98:	42a5      	cmp	r5, r4
 8003b9a:	d109      	bne.n	8003bb0 <__libc_init_array+0x24>
 8003b9c:	f000 f822 	bl	8003be4 <_init>
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	4e0a      	ldr	r6, [pc, #40]	; (8003bcc <__libc_init_array+0x40>)
 8003ba4:	4c0a      	ldr	r4, [pc, #40]	; (8003bd0 <__libc_init_array+0x44>)
 8003ba6:	1ba4      	subs	r4, r4, r6
 8003ba8:	10a4      	asrs	r4, r4, #2
 8003baa:	42a5      	cmp	r5, r4
 8003bac:	d105      	bne.n	8003bba <__libc_init_array+0x2e>
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bb4:	4798      	blx	r3
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	e7ee      	b.n	8003b98 <__libc_init_array+0xc>
 8003bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bbe:	4798      	blx	r3
 8003bc0:	3501      	adds	r5, #1
 8003bc2:	e7f2      	b.n	8003baa <__libc_init_array+0x1e>
 8003bc4:	08003c28 	.word	0x08003c28
 8003bc8:	08003c28 	.word	0x08003c28
 8003bcc:	08003c28 	.word	0x08003c28
 8003bd0:	08003c2c 	.word	0x08003c2c

08003bd4 <memset>:
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4402      	add	r2, r0
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <memset+0xa>
 8003bdc:	4770      	bx	lr
 8003bde:	f803 1b01 	strb.w	r1, [r3], #1
 8003be2:	e7f9      	b.n	8003bd8 <memset+0x4>

08003be4 <_init>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr

08003bf0 <_fini>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr
