
Nodov2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c10  08003c10  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c10  08003c10  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c10  08003c10  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000016c  08003d84  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003d84  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f31e  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f73  00000000  00000000  0002f4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  00031428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00032328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019179  00000000  00000000  00033130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b782  00000000  00000000  0004c2a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ccb9  00000000  00000000  00057a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e46e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  000e4760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bcc 	.word	0x08003bcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
 8000148:	08003bcc 	.word	0x08003bcc

0800014c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000186:	bf00      	nop
     __ASM volatile ("NOP");
 8000188:	bf00      	nop
  __ASM volatile ("NOP");
 800018a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
  }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b2:	f000 ff07 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b6:	f000 f8e5 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ba:	f000 f9d7 	bl	800056c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001be:	f000 f927 	bl	8000410 <MX_SPI1_Init>
  MX_TIM4_Init();
 80001c2:	f000 f95b 	bl	800047c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80001c6:	f000 f9a7 	bl	8000518 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  	uint8_t gRSSI_value;

  	char ch[3]={0, 0, 0};
 80001ca:	2300      	movs	r3, #0
 80001cc:	713b      	strb	r3, [r7, #4]
 80001ce:	2300      	movs	r3, #0
 80001d0:	717b      	strb	r3, [r7, #5]
 80001d2:	2300      	movs	r3, #0
 80001d4:	71bb      	strb	r3, [r7, #6]
  	char in[3]={0, 0, 0};
 80001d6:	2300      	movs	r3, #0
 80001d8:	703b      	strb	r3, [r7, #0]
 80001da:	2300      	movs	r3, #0
 80001dc:	707b      	strb	r3, [r7, #1]
 80001de:	2300      	movs	r3, #0
 80001e0:	70bb      	strb	r3, [r7, #2]

  	uint16_t err;


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // DE - Comunicacion RS485 - Se coloca en bajo para estar en modo recepcion
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	485e      	ldr	r0, [pc, #376]	; (8000364 <main+0x1b8>)
 80001ea:	f001 fa64 	bl	80016b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // RE - Comunicacion RS485 - Se coloca en bajo para escuchar todo el tiempo
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f4:	485b      	ldr	r0, [pc, #364]	; (8000364 <main+0x1b8>)
 80001f6:	f001 fa5e 	bl	80016b6 <HAL_GPIO_WritePin>

	uint16_t marcstate=0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	81bb      	strh	r3, [r7, #12]


	//Init rf driver
	rf_begin(&hspi1, AKS_115_kb, MHz434, CS_GPIO_Port, CS_Pin, GDO0_Pin);
 80001fe:	2308      	movs	r3, #8
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2310      	movs	r3, #16
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	4b57      	ldr	r3, [pc, #348]	; (8000364 <main+0x1b8>)
 8000208:	2202      	movs	r2, #2
 800020a:	2107      	movs	r1, #7
 800020c:	4856      	ldr	r0, [pc, #344]	; (8000368 <main+0x1bc>)
 800020e:	f000 fbd7 	bl	80009c0 <rf_begin>
	rf_write_strobe(SRX);
 8000212:	2034      	movs	r0, #52	; 0x34
 8000214:	f000 fca0 	bl	8000b58 <rf_write_strobe>

	while(marcstate != RX){
 8000218:	e004      	b.n	8000224 <main+0x78>
		marcstate = (rf_read_register(MARCSTATE)); //read out state of cc1100 to be sure in RX
 800021a:	20f5      	movs	r0, #245	; 0xf5
 800021c:	f000 fcad 	bl	8000b7a <rf_read_register>
 8000220:	4603      	mov	r3, r0
 8000222:	81bb      	strh	r3, [r7, #12]
	while(marcstate != RX){
 8000224:	89bb      	ldrh	r3, [r7, #12]
 8000226:	2b0d      	cmp	r3, #13
 8000228:	d1f7      	bne.n	800021a <main+0x6e>
	}

	HAL_TIM_Base_Start_IT(&htim4);
 800022a:	4850      	ldr	r0, [pc, #320]	; (800036c <main+0x1c0>)
 800022c:	f002 fc4c 	bl	8002ac8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		in[0] = in[1] = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	707b      	strb	r3, [r7, #1]
 8000234:	787b      	ldrb	r3, [r7, #1]
 8000236:	703b      	strb	r3, [r7, #0]
		ch[0] = ch[1] = ch[2] = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	71bb      	strb	r3, [r7, #6]
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	717b      	strb	r3, [r7, #5]
 8000240:	797b      	ldrb	r3, [r7, #5]
 8000242:	713b      	strb	r3, [r7, #4]

		HAL_Delay(25);
 8000244:	2019      	movs	r0, #25
 8000246:	f000 ff1f 	bl	8001088 <HAL_Delay>
		HAL_UART_Receive(&huart1, (uint8_t *)in, 2, 100);
 800024a:	4639      	mov	r1, r7
 800024c:	2364      	movs	r3, #100	; 0x64
 800024e:	2202      	movs	r2, #2
 8000250:	4847      	ldr	r0, [pc, #284]	; (8000370 <main+0x1c4>)
 8000252:	f003 f8e4 	bl	800341e <HAL_UART_Receive>
				gRSSI_value = 0;
				Inte = 1;
			}
		}*/

		if(in[0] == 'A' && in[1] == 1){
 8000256:	783b      	ldrb	r3, [r7, #0]
 8000258:	2b41      	cmp	r3, #65	; 0x41
 800025a:	d115      	bne.n	8000288 <main+0xdc>
 800025c:	787b      	ldrb	r3, [r7, #1]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d112      	bne.n	8000288 <main+0xdc>
			gRSSI_value = RSSI_val[i_rssi-1 < 0 ? 9 : i_rssi-1];
 8000262:	4b44      	ldr	r3, [pc, #272]	; (8000374 <main+0x1c8>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	3b01      	subs	r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db03      	blt.n	8000274 <main+0xc8>
 800026c:	4b41      	ldr	r3, [pc, #260]	; (8000374 <main+0x1c8>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	3b01      	subs	r3, #1
 8000272:	e000      	b.n	8000276 <main+0xca>
 8000274:	2309      	movs	r3, #9
 8000276:	4a40      	ldr	r2, [pc, #256]	; (8000378 <main+0x1cc>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	73fb      	strb	r3, [r7, #15]
			HAL_TIM_Base_Stop_IT(&htim4);
 800027c:	483b      	ldr	r0, [pc, #236]	; (800036c <main+0x1c0>)
 800027e:	f002 fc75 	bl	8002b6c <HAL_TIM_Base_Stop_IT>
			Inte = 0;
 8000282:	4b3e      	ldr	r3, [pc, #248]	; (800037c <main+0x1d0>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
		}

		if (in[1] == 1){
 8000288:	787b      	ldrb	r3, [r7, #1]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d11a      	bne.n	80002c4 <main+0x118>
			if (gRSSI_value == 0){
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d10c      	bne.n	80002ae <main+0x102>
				gRSSI_value = RSSI_val[i_rssi-1 < 0 ? 9 : i_rssi-1];
 8000294:	4b37      	ldr	r3, [pc, #220]	; (8000374 <main+0x1c8>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3b01      	subs	r3, #1
 800029a:	2b00      	cmp	r3, #0
 800029c:	db03      	blt.n	80002a6 <main+0xfa>
 800029e:	4b35      	ldr	r3, [pc, #212]	; (8000374 <main+0x1c8>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	e000      	b.n	80002a8 <main+0xfc>
 80002a6:	2309      	movs	r3, #9
 80002a8:	4a33      	ldr	r2, [pc, #204]	; (8000378 <main+0x1cc>)
 80002aa:	5cd3      	ldrb	r3, [r2, r3]
 80002ac:	73fb      	strb	r3, [r7, #15]
			}
			if (Inte == 1){
 80002ae:	4b33      	ldr	r3, [pc, #204]	; (800037c <main+0x1d0>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d02f      	beq.n	8000316 <main+0x16a>
				HAL_TIM_Base_Stop_IT(&htim4);
 80002b6:	482d      	ldr	r0, [pc, #180]	; (800036c <main+0x1c0>)
 80002b8:	f002 fc58 	bl	8002b6c <HAL_TIM_Base_Stop_IT>
				Inte = 0;
 80002bc:	4b2f      	ldr	r3, [pc, #188]	; (800037c <main+0x1d0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e028      	b.n	8000316 <main+0x16a>
			}
		}

		else if (in[0] == 'A' && in[1] == 2){
 80002c4:	783b      	ldrb	r3, [r7, #0]
 80002c6:	2b41      	cmp	r3, #65	; 0x41
 80002c8:	d125      	bne.n	8000316 <main+0x16a>
 80002ca:	787b      	ldrb	r3, [r7, #1]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d122      	bne.n	8000316 <main+0x16a>
			for(int j = 0; j<10; j++){
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
 80002d4:	e007      	b.n	80002e6 <main+0x13a>
				RSSI_val[j] = 90;
 80002d6:	4a28      	ldr	r2, [pc, #160]	; (8000378 <main+0x1cc>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	4413      	add	r3, r2
 80002dc:	225a      	movs	r2, #90	; 0x5a
 80002de:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j<10; j++){
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	2b09      	cmp	r3, #9
 80002ea:	ddf4      	ble.n	80002d6 <main+0x12a>
			}
			HAL_TIM_Base_Start_IT(&htim4);
 80002ec:	481f      	ldr	r0, [pc, #124]	; (800036c <main+0x1c0>)
 80002ee:	f002 fbeb 	bl	8002ac8 <HAL_TIM_Base_Start_IT>
			Inte = 1;
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <main+0x1d0>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
			bInhibicion = 0;
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <main+0x1d4>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]
			gRSSI_value = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	73fb      	strb	r3, [r7, #15]
			ch[0] = ch[1] = ch[2] = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	71bb      	strb	r3, [r7, #6]
 8000306:	79bb      	ldrb	r3, [r7, #6]
 8000308:	717b      	strb	r3, [r7, #5]
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	713b      	strb	r3, [r7, #4]
			in[0] = in[1] = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	707b      	strb	r3, [r7, #1]
 8000312:	787b      	ldrb	r3, [r7, #1]
 8000314:	703b      	strb	r3, [r7, #0]
		}



		if(in[0] == ID_nodo && in[1] != 2){
 8000316:	783b      	ldrb	r3, [r7, #0]
 8000318:	2b43      	cmp	r3, #67	; 0x43
 800031a:	d189      	bne.n	8000230 <main+0x84>
 800031c:	787b      	ldrb	r3, [r7, #1]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d086      	beq.n	8000230 <main+0x84>

			ch[0] = ID_nodo;
 8000322:	2343      	movs	r3, #67	; 0x43
 8000324:	713b      	strb	r3, [r7, #4]
			ch[1] = gRSSI_value;
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	717b      	strb	r3, [r7, #5]
			ch[2] = bInhibicion;
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <main+0x1d4>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	71bb      	strb	r3, [r7, #6]

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <main+0x1b8>)
 8000338:	f001 f9bd 	bl	80016b6 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 3, HAL_MAX_DELAY);
 800033c:	1d39      	adds	r1, r7, #4
 800033e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000342:	2203      	movs	r2, #3
 8000344:	480a      	ldr	r0, [pc, #40]	; (8000370 <main+0x1c4>)
 8000346:	f002 ffd8 	bl	80032fa <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 10);
 800034a:	4639      	mov	r1, r7
 800034c:	230a      	movs	r3, #10
 800034e:	2201      	movs	r2, #1
 8000350:	4807      	ldr	r0, [pc, #28]	; (8000370 <main+0x1c4>)
 8000352:	f003 f864 	bl	800341e <HAL_UART_Receive>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035c:	4801      	ldr	r0, [pc, #4]	; (8000364 <main+0x1b8>)
 800035e:	f001 f9aa 	bl	80016b6 <HAL_GPIO_WritePin>
		in[0] = in[1] = 0;
 8000362:	e765      	b.n	8000230 <main+0x84>
 8000364:	40010800 	.word	0x40010800
 8000368:	20000220 	.word	0x20000220
 800036c:	20000198 	.word	0x20000198
 8000370:	200001e0 	.word	0x200001e0
 8000374:	20000193 	.word	0x20000193
 8000378:	20000004 	.word	0x20000004
 800037c:	2000000e 	.word	0x2000000e
 8000380:	20000194 	.word	0x20000194

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b090      	sub	sp, #64	; 0x40
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0318 	add.w	r3, r7, #24
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fc12 	bl	8003bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c8:	f107 0318 	add.w	r3, r7, #24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 f9a3 	bl	8001718 <HAL_RCC_OscConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d8:	f000 faca 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	230f      	movs	r3, #15
 80003de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e0:	2302      	movs	r3, #2
 80003e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fc0e 	bl	8001c18 <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000402:	f000 fab5 	bl	8000970 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3740      	adds	r7, #64	; 0x40
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_SPI1_Init+0x64>)
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <MX_SPI1_Init+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_SPI1_Init+0x64>)
 800041c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_SPI1_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_SPI1_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_SPI1_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_SPI1_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_SPI1_Init+0x64>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_SPI1_Init+0x64>)
 8000444:	2238      	movs	r2, #56	; 0x38
 8000446:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_SPI1_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <MX_SPI1_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_SPI1_Init+0x64>)
 800045c:	220a      	movs	r2, #10
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_SPI1_Init+0x64>)
 8000462:	f001 fd75 	bl	8001f50 <HAL_SPI_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800046c:	f000 fa80 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000220 	.word	0x20000220
 8000478:	40013000 	.word	0x40013000

0800047c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_TIM4_Init+0x94>)
 800049a:	4a1e      	ldr	r2, [pc, #120]	; (8000514 <MX_TIM4_Init+0x98>)
 800049c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 800049e:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <MX_TIM4_Init+0x94>)
 80004a0:	f240 529f 	movw	r2, #1439	; 0x59f
 80004a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_TIM4_Init+0x94>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_TIM4_Init+0x94>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_TIM4_Init+0x94>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_TIM4_Init+0x94>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004be:	4814      	ldr	r0, [pc, #80]	; (8000510 <MX_TIM4_Init+0x94>)
 80004c0:	f002 fab2 	bl	8002a28 <HAL_TIM_Base_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80004ca:	f000 fa51 	bl	8000970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004d4:	f107 0308 	add.w	r3, r7, #8
 80004d8:	4619      	mov	r1, r3
 80004da:	480d      	ldr	r0, [pc, #52]	; (8000510 <MX_TIM4_Init+0x94>)
 80004dc:	f002 fc7c 	bl	8002dd8 <HAL_TIM_ConfigClockSource>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80004e6:	f000 fa43 	bl	8000970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004f2:	463b      	mov	r3, r7
 80004f4:	4619      	mov	r1, r3
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <MX_TIM4_Init+0x94>)
 80004f8:	f002 fe42 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000502:	f000 fa35 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000198 	.word	0x20000198
 8000514:	40000800 	.word	0x40000800

08000518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_USART1_UART_Init+0x50>)
 8000520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000524:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800053c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000540:	220c      	movs	r2, #12
 8000542:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000552:	f002 fe85 	bl	8003260 <HAL_UART_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800055c:	f000 fa08 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200001e0 	.word	0x200001e0
 8000568:	40013800 	.word	0x40013800

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	4b4b      	ldr	r3, [pc, #300]	; (80006b0 <MX_GPIO_Init+0x144>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a4a      	ldr	r2, [pc, #296]	; (80006b0 <MX_GPIO_Init+0x144>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b48      	ldr	r3, [pc, #288]	; (80006b0 <MX_GPIO_Init+0x144>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0310 	and.w	r3, r3, #16
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000598:	4b45      	ldr	r3, [pc, #276]	; (80006b0 <MX_GPIO_Init+0x144>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a44      	ldr	r2, [pc, #272]	; (80006b0 <MX_GPIO_Init+0x144>)
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <MX_GPIO_Init+0x144>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0320 	and.w	r3, r3, #32
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <MX_GPIO_Init+0x144>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a3e      	ldr	r2, [pc, #248]	; (80006b0 <MX_GPIO_Init+0x144>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <MX_GPIO_Init+0x144>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <MX_GPIO_Init+0x144>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a38      	ldr	r2, [pc, #224]	; (80006b0 <MX_GPIO_Init+0x144>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b36      	ldr	r3, [pc, #216]	; (80006b0 <MX_GPIO_Init+0x144>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e6:	4833      	ldr	r0, [pc, #204]	; (80006b4 <MX_GPIO_Init+0x148>)
 80005e8:	f001 f865 	bl	80016b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80005f2:	4831      	ldr	r0, [pc, #196]	; (80006b8 <MX_GPIO_Init+0x14c>)
 80005f4:	f001 f85f 	bl	80016b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80005f8:	2200      	movs	r2, #0
 80005fa:	f64b 4140 	movw	r1, #48192	; 0xbc40
 80005fe:	482f      	ldr	r0, [pc, #188]	; (80006bc <MX_GPIO_Init+0x150>)
 8000600:	f001 f859 	bl	80016b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	482c      	ldr	r0, [pc, #176]	; (80006bc <MX_GPIO_Init+0x150>)
 800060a:	f001 f854 	bl	80016b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800060e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4823      	ldr	r0, [pc, #140]	; (80006b4 <MX_GPIO_Init+0x148>)
 8000628:	f000 fed4 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800062c:	2304      	movs	r3, #4
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_GPIO_Init+0x14c>)
 8000640:	f000 fec8 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GDO0_Pin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 8000644:	2308      	movs	r3, #8
 8000646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_GPIO_Init+0x154>)
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_GPIO_Init+0x14c>)
 8000658:	f000 febc 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin PA8 PA11 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_8|GPIO_PIN_11;
 800065c:	f44f 6311 	mov.w	r3, #2320	; 0x910
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x14c>)
 8000676:	f000 fead 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB15 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800067a:	f64b 43c0 	movw	r3, #48320	; 0xbcc0
 800067e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <MX_GPIO_Init+0x150>)
 8000694:	f000 fe9e 	bl	80013d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2009      	movs	r0, #9
 800069e:	f000 fdec 	bl	800127a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006a2:	2009      	movs	r0, #9
 80006a4:	f000 fe05 	bl	80012b2 <HAL_NVIC_EnableIRQ>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40011000 	.word	0x40011000
 80006b8:	40010800 	.word	0x40010800
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	10210000 	.word	0x10210000

080006c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

	uint8_t data_in;


	if(htim->Instance == TIM4){ //chequea que la interrupción sea la del timer adecuado
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a84      	ldr	r2, [pc, #528]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	f040 8102 	bne.w	80008dc <HAL_TIM_PeriodElapsedCallback+0x218>


		data_in = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2); //leo el valor de dato de entrada
 80006d8:	2104      	movs	r1, #4
 80006da:	4883      	ldr	r0, [pc, #524]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80006dc:	f000 ffd4 	bl	8001688 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	72fb      	strb	r3, [r7, #11]


		switch(state)
 80006e4:	4b81      	ldr	r3, [pc, #516]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x228>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d048      	beq.n	8000782 <HAL_TIM_PeriodElapsedCallback+0xbe>
 80006f0:	e087      	b.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x13e>
		{
			case 0:
				a_promediar += data_in;
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b7e      	ldr	r3, [pc, #504]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b7c      	ldr	r3, [pc, #496]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000700:	801a      	strh	r2, [r3, #0]
				contador20ms++;
 8000702:	4b7c      	ldr	r3, [pc, #496]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b7a      	ldr	r3, [pc, #488]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800070c:	801a      	strh	r2, [r3, #0]
				if(contador20ms == 499){ 							// 500 cuentas equivalen a 20ms por la frecuencia de 25kHz de la interrupcion
 800070e:	4b79      	ldr	r3, [pc, #484]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000716:	4293      	cmp	r3, r2
 8000718:	d170      	bne.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x138>
					promedio = (int) ((a_promediar * 100) / 500); 	//calculo el promedio de 1 en 20 ms
 800071a:	4b75      	ldr	r3, [pc, #468]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	fb03 f302 	mul.w	r3, r3, r2
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000728:	fb82 1203 	smull	r1, r2, r2, r3
 800072c:	1152      	asrs	r2, r2, #5
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b71      	ldr	r3, [pc, #452]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000736:	801a      	strh	r2, [r3, #0]

					if(promedio > threshold) sync_mx = sync_mx << 1; //sync_mx es una variable de 16 bits que me permite testear cuantos bloques consecutivos de 20ms hubo un porcentaje de 1 que supere el threshold
 8000738:	4b70      	ldr	r3, [pc, #448]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x238>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b28      	cmp	r3, #40	; 0x28
 800073e:	d906      	bls.n	800074e <HAL_TIM_PeriodElapsedCallback+0x8a>
 8000740:	4b6f      	ldr	r3, [pc, #444]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b6d      	ldr	r3, [pc, #436]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800074a:	801a      	strh	r2, [r3, #0]
 800074c:	e002      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x90>
					else sync_mx = 1;
 800074e:	4b6c      	ldr	r3, [pc, #432]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000750:	2201      	movs	r2, #1
 8000752:	801a      	strh	r2, [r3, #0]

 					if(sync_mx == 0)  {
 8000754:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d105      	bne.n	8000768 <HAL_TIM_PeriodElapsedCallback+0xa4>
						state = 1; //si surgen 16 bloques consecutivos sospechamos inhibición y hacemos análisis en 150ms
 800075c:	4b63      	ldr	r3, [pc, #396]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x228>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
						sync_mx = 1;
 8000762:	4b67      	ldr	r3, [pc, #412]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000764:	2201      	movs	r2, #1
 8000766:	801a      	strh	r2, [r3, #0]
					}
					contador20ms = 0;
 8000768:	4b62      	ldr	r3, [pc, #392]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800076a:	2200      	movs	r2, #0
 800076c:	801a      	strh	r2, [r3, #0]
					a_promediar = 0;
 800076e:	4b60      	ldr	r3, [pc, #384]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]
					bInhibicion = 0;
 8000774:	4b63      	ldr	r3, [pc, #396]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
					promedio = 0;
 800077a:	4b60      	ldr	r3, [pc, #384]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x238>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]
				}
				break;
 8000780:	e03c      	b.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x138>

			case 1:
				a_promediar += data_in;
 8000782:	7afb      	ldrb	r3, [r7, #11]
 8000784:	b29a      	uxth	r2, r3
 8000786:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b58      	ldr	r3, [pc, #352]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000790:	801a      	strh	r2, [r3, #0]
				contador150ms++;
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b5b      	ldr	r3, [pc, #364]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800079c:	801a      	strh	r2, [r3, #0]
				if(contador150ms == 3749) {
 800079e:	4b5a      	ldr	r3, [pc, #360]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	f640 62a5 	movw	r2, #3749	; 0xea5
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d12a      	bne.n	8000800 <HAL_TIM_PeriodElapsedCallback+0x13c>
					promedio = (int) ((a_promediar * 100) / 3750); 	//calculo el promedio de unos en 150 ms
 80007aa:	4b51      	ldr	r3, [pc, #324]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	fb03 f302 	mul.w	r3, r3, r2
 80007b6:	4a55      	ldr	r2, [pc, #340]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80007b8:	fb82 1203 	smull	r1, r2, r2, r3
 80007bc:	1292      	asrs	r2, r2, #10
 80007be:	17db      	asrs	r3, r3, #31
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b4d      	ldr	r3, [pc, #308]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x238>)
 80007c6:	801a      	strh	r2, [r3, #0]
					if(promedio > threshold){
 80007c8:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x238>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2b28      	cmp	r3, #40	; 0x28
 80007ce:	d908      	bls.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x11e>
						bInhibicion = 1;
 80007d0:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim4);
 80007d6:	484e      	ldr	r0, [pc, #312]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80007d8:	f002 f9c8 	bl	8002b6c <HAL_TIM_Base_Stop_IT>
						Inte = 0;
 80007dc:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
					}
					contador150ms = 0; // 3750 cuentas equivalen a 150ms por la frecuencia de 25kHz de la interrupcion
 80007e2:	4b49      	ldr	r3, [pc, #292]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	801a      	strh	r2, [r3, #0]
					state = 0;
 80007e8:	4b40      	ldr	r3, [pc, #256]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x228>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
					a_promediar = 0;
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	801a      	strh	r2, [r3, #0]
					promedio = 0;
 80007f4:	4b41      	ldr	r3, [pc, #260]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x238>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	801a      	strh	r2, [r3, #0]
				}

				break;
 80007fa:	e001      	b.n	8000800 <HAL_TIM_PeriodElapsedCallback+0x13c>
				break;
 80007fc:	bf00      	nop
 80007fe:	e000      	b.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x13e>
				break;
 8000800:	bf00      	nop
		}

		contador20ms_rssi++;
 8000802:	4b45      	ldr	r3, [pc, #276]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b43      	ldr	r3, [pc, #268]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800080c:	801a      	strh	r2, [r3, #0]
		if(contador20ms_rssi == 499){ 							// 500 cuentas equivalen a 20ms por la frecuencia de 25kHz de la interrupcion
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000816:	4293      	cmp	r3, r2
 8000818:	d160      	bne.n	80008dc <HAL_TIM_PeriodElapsedCallback+0x218>

			if(i_rssi < 10){
 800081a:	4b40      	ldr	r3, [pc, #256]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b09      	cmp	r3, #9
 8000820:	d82c      	bhi.n	800087c <HAL_TIM_PeriodElapsedCallback+0x1b8>
				RSSI_val[i_rssi] = RSSI_level(); 					//Llamo a función que devuelve el valor del rssi
 8000822:	4b3e      	ldr	r3, [pc, #248]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461c      	mov	r4, r3
 8000828:	f000 f880 	bl	800092c <RSSI_level>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b3b      	ldr	r3, [pc, #236]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000832:	551a      	strb	r2, [r3, r4]
				if (RSSI_val[i_rssi] > 120 || RSSI_val[i_rssi] < 10)
 8000834:	4b39      	ldr	r3, [pc, #228]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b39      	ldr	r3, [pc, #228]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800083c:	5c9b      	ldrb	r3, [r3, r2]
 800083e:	2b78      	cmp	r3, #120	; 0x78
 8000840:	d806      	bhi.n	8000850 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	4b35      	ldr	r3, [pc, #212]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800084a:	5c9b      	ldrb	r3, [r3, r2]
 800084c:	2b09      	cmp	r3, #9
 800084e:	d807      	bhi.n	8000860 <HAL_TIM_PeriodElapsedCallback+0x19c>
					RSSI_val[i_rssi] = suma_RSSI;
 8000850:	4b34      	ldr	r3, [pc, #208]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000852:	8819      	ldrh	r1, [r3, #0]
 8000854:	4b31      	ldr	r3, [pc, #196]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	b2c9      	uxtb	r1, r1
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800085e:	5499      	strb	r1, [r3, r2]
				i_rssi++;
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800086a:	701a      	strb	r2, [r3, #0]

				if(i_rssi >= 10)
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b09      	cmp	r3, #9
 8000872:	d906      	bls.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x1be>
					i_rssi = 0;
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	e002      	b.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x1be>
			}
			else i_rssi = 0;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]


			for(int i = 0; i<10; i++){
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e00d      	b.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				suma_RSSI += RSSI_val[i];
 8000888:	4a25      	ldr	r2, [pc, #148]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800089c:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i<10; i++){
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b09      	cmp	r3, #9
 80008a8:	ddee      	ble.n	8000888 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			}

			suma_RSSI = (uint16_t)(suma_RSSI/10);
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008ba:	801a      	strh	r2, [r3, #0]

			if(suma_RSSI <= 30) {
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	2b1e      	cmp	r3, #30
 80008c2:	d808      	bhi.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x212>
				bInhibicion = 2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);  // Si RSSI promedio es <= 30 es inhibicion por potencia
 80008ca:	4811      	ldr	r0, [pc, #68]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80008cc:	f002 f94e 	bl	8002b6c <HAL_TIM_Base_Stop_IT>
				Inte = 0;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
			}
			contador20ms_rssi = 0;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80008d8:	2200      	movs	r2, #0
 80008da:	801a      	strh	r2, [r3, #0]


		}
	}

}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40000800 	.word	0x40000800
 80008e8:	40010800 	.word	0x40010800
 80008ec:	20000192 	.word	0x20000192
 80008f0:	2000018a 	.word	0x2000018a
 80008f4:	2000018c 	.word	0x2000018c
 80008f8:	10624dd3 	.word	0x10624dd3
 80008fc:	20000188 	.word	0x20000188
 8000900:	20000000 	.word	0x20000000
 8000904:	20000194 	.word	0x20000194
 8000908:	2000018e 	.word	0x2000018e
 800090c:	45e7b273 	.word	0x45e7b273
 8000910:	20000198 	.word	0x20000198
 8000914:	2000000e 	.word	0x2000000e
 8000918:	20000190 	.word	0x20000190
 800091c:	20000193 	.word	0x20000193
 8000920:	20000004 	.word	0x20000004
 8000924:	20000002 	.word	0x20000002
 8000928:	cccccccd 	.word	0xcccccccd

0800092c <RSSI_level>:

uint8_t RSSI_level(){ //esta funcion devuelve el valor en dBm del RSSI
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
	int result_RSSI, result;

	result = rf_read_register(RSSI); 			//leo el registro que almacena el RSSI
 8000932:	20f4      	movs	r0, #244	; 0xf4
 8000934:	f000 f921 	bl	8000b7a <rf_read_register>
 8000938:	4603      	mov	r3, r0
 800093a:	603b      	str	r3, [r7, #0]
	if(result < 128){  							//Transformo a dBm segun su valor
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2b7f      	cmp	r3, #127	; 0x7f
 8000940:	dc06      	bgt.n	8000950 <RSSI_level+0x24>
		result_RSSI = (int)(result/2)-74;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	0fda      	lsrs	r2, r3, #31
 8000946:	4413      	add	r3, r2
 8000948:	105b      	asrs	r3, r3, #1
 800094a:	3b4a      	subs	r3, #74	; 0x4a
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	e007      	b.n	8000960 <RSSI_level+0x34>
	}
	else{
		result_RSSI = (int)((result -256)/2)-74;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000956:	0fda      	lsrs	r2, r3, #31
 8000958:	4413      	add	r3, r2
 800095a:	105b      	asrs	r3, r3, #1
 800095c:	3b4a      	subs	r3, #74	; 0x4a
 800095e:	607b      	str	r3, [r7, #4]
	}


	return (uint8_t)((-1)*result_RSSI);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	425b      	negs	r3, r3
 8000966:	b2db      	uxtb	r3, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <DWT_Delay_us+0x3c>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800098a:	f001 fa91 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 800098e:	4602      	mov	r2, r0
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <DWT_Delay_us+0x40>)
 8000992:	fba3 2302 	umull	r2, r3, r3, r2
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	fb02 f303 	mul.w	r3, r2, r3
 800099e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80009a0:	bf00      	nop
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <DWT_Delay_us+0x3c>)
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1ad2      	subs	r2, r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3f8      	bcc.n	80009a2 <DWT_Delay_us+0x26>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	e0001000 	.word	0xe0001000
 80009bc:	431bde83 	.word	0x431bde83

080009c0 <rf_begin>:
/* Private user code ---------------------------------------------------------*/

/* RF DRIVER ----------------------------------------------------------------------------------------------------------------------*/

/*--------------------------[CC1101 Init and Settings]------------------------------*/
uint8_t rf_begin(SPI_HandleTypeDef* hspi, MODULATION_TypeDef mode, ISMBAND_TypeDef ism_band, GPIO_TypeDef* cs_port, uint16_t cs_pin, uint16_t gdo0){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	72fb      	strb	r3, [r7, #11]
 80009ce:	4613      	mov	r3, r2
 80009d0:	72bb      	strb	r3, [r7, #10]
	 * @param gdo0: Pin number of the pin connected to C1101 CGDO0, used for interruptions. Interruption is configured as FALLING EDGE.
	 *
	 */

	//Pinout linking
	hal_spi = hspi;
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <rf_begin+0x6c>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <rf_begin+0x70>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <rf_begin+0x74>)
 80009e0:	8b3b      	ldrh	r3, [r7, #24]
 80009e2:	8013      	strh	r3, [r2, #0]
	GDO0_Pin = gdo0;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <rf_begin+0x78>)
 80009e6:	8bbb      	ldrh	r3, [r7, #28]
 80009e8:	8013      	strh	r3, [r2, #0]

	//Turn on the chip
	rf_reset();
 80009ea:	f000 f827 	bl	8000a3c <rf_reset>
	HAL_Delay(10);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f000 fb4a 	bl	8001088 <HAL_Delay>

	//Check that the SPI works
	if(!rf_check()){
 80009f4:	f000 f848 	bl	8000a88 <rf_check>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <rf_begin+0x42>
		return FALSE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e010      	b.n	8000a24 <rf_begin+0x64>
	}


	rf_write_strobe(SFTX); //Flush TX FIFO
 8000a02:	203b      	movs	r0, #59	; 0x3b
 8000a04:	f000 f8a8 	bl	8000b58 <rf_write_strobe>
	HAL_Delay(1); //TODO I don't think this is really needed
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 fb3d 	bl	8001088 <HAL_Delay>
	rf_write_strobe(SFRX); //Flush RX FIFO
 8000a0e:	203a      	movs	r0, #58	; 0x3a
 8000a10:	f000 f8a2 	bl	8000b58 <rf_write_strobe>
	HAL_Delay(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fb37 	bl	8001088 <HAL_Delay>

	rf_set_modulation_mode(mode);
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f851 	bl	8000ac4 <rf_set_modulation_mode>

	return TRUE;
 8000a22:	2301      	movs	r3, #1


}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000027c 	.word	0x2000027c
 8000a30:	20000278 	.word	0x20000278
 8000a34:	20000282 	.word	0x20000282
 8000a38:	20000280 	.word	0x20000280

08000a3c <rf_reset>:

void rf_reset(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	/**
	 * @brief Turns on the RF chip with a specific sequence on the CS pin and a SRES command.
	 * The former is only needed on a cold start.
	 */
	DWT_Delay_Init();
 8000a40:	f7ff fb84 	bl	800014c <DWT_Delay_Init>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <rf_reset+0x44>)
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <rf_reset+0x48>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f000 fe31 	bl	80016b6 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f7ff ff91 	bl	800097c <DWT_Delay_us>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <rf_reset+0x44>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <rf_reset+0x48>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f000 fe26 	bl	80016b6 <HAL_GPIO_WritePin>
	DWT_Delay_us(40);
 8000a6a:	2028      	movs	r0, #40	; 0x28
 8000a6c:	f7ff ff86 	bl	800097c <DWT_Delay_us>

	rf_write_strobe(SRES);
 8000a70:	2030      	movs	r0, #48	; 0x30
 8000a72:	f000 f871 	bl	8000b58 <rf_write_strobe>
	HAL_Delay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 fb06 	bl	8001088 <HAL_Delay>

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000278 	.word	0x20000278
 8000a84:	20000282 	.word	0x20000282

08000a88 <rf_check>:

uint8_t rf_check(){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	/**
	 * @brief Checks the version of the RF chip to check if SPI is OK. It checks 10 times to make sure wires are really OK.
	 */

	uint8_t ok = TRUE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t version;
	for(i=0; i<10; i++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	e00c      	b.n	8000ab2 <rf_check+0x2a>
		version = rf_read_register(VERSION);
 8000a98:	20f1      	movs	r0, #241	; 0xf1
 8000a9a:	f000 f86e 	bl	8000b7a <rf_read_register>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	717b      	strb	r3, [r7, #5]
		if(version!=0x14)
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	2b14      	cmp	r3, #20
 8000aa6:	d001      	beq.n	8000aac <rf_check+0x24>
			ok = FALSE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<10; i++){
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	71bb      	strb	r3, [r7, #6]
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	2b09      	cmp	r3, #9
 8000ab6:	d9ef      	bls.n	8000a98 <rf_check+0x10>
	if (ok){
		//printf("RF check: OK\n\r");
	}else{
		//printf("RF check: No luck :(\n\r");
	}
	return ok;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]

}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <rf_set_modulation_mode>:

void rf_set_modulation_mode(MODULATION_TypeDef mode){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	 * @brief Loads the wanted modulation preset to the CC1101.
	 */

    uint8_t* cfg_reg;

    switch (mode)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d825      	bhi.n	8000b22 <rf_set_modulation_mode+0x5e>
 8000ad6:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <rf_set_modulation_mode+0x18>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000af9 	.word	0x08000af9
 8000ae0:	08000aff 	.word	0x08000aff
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000b0b 	.word	0x08000b0b
 8000aec:	08000b11 	.word	0x08000b11
 8000af0:	08000b17 	.word	0x08000b17
 8000af4:	08000b1d 	.word	0x08000b1d
    {
        case GFSK_1_2_kb:
        			cfg_reg = cc1100_GFSK_1_2_kb;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <rf_set_modulation_mode+0x78>)
 8000afa:	60fb      	str	r3, [r7, #12]
                    break;
 8000afc:	e014      	b.n	8000b28 <rf_set_modulation_mode+0x64>
        case GFSK_38_4_kb:
                    cfg_reg = cc1100_GFSK_38_4_kb;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <rf_set_modulation_mode+0x7c>)
 8000b00:	60fb      	str	r3, [r7, #12]
                    break;
 8000b02:	e011      	b.n	8000b28 <rf_set_modulation_mode+0x64>
        case GFSK_100_kb:
        			cfg_reg = cc1100_GFSK_100_kb;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <rf_set_modulation_mode+0x80>)
 8000b06:	60fb      	str	r3, [r7, #12]
                    break;
 8000b08:	e00e      	b.n	8000b28 <rf_set_modulation_mode+0x64>
        case MSK_250_kb:
        			cfg_reg = cc1100_MSK_250_kb;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <rf_set_modulation_mode+0x84>)
 8000b0c:	60fb      	str	r3, [r7, #12]
                    break;
 8000b0e:	e00b      	b.n	8000b28 <rf_set_modulation_mode+0x64>
        case MSK_500_kb:
        			cfg_reg = cc1100_MSK_500_kb;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <rf_set_modulation_mode+0x88>)
 8000b12:	60fb      	str	r3, [r7, #12]
                    break;
 8000b14:	e008      	b.n	8000b28 <rf_set_modulation_mode+0x64>
        case OOK_4_8_kb:
        			cfg_reg = cc1100_OOK_4_8_kb;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <rf_set_modulation_mode+0x8c>)
 8000b18:	60fb      	str	r3, [r7, #12]
                    break;
 8000b1a:	e005      	b.n	8000b28 <rf_set_modulation_mode+0x64>
        case AKS_115_kb:
					cfg_reg = cc1100_AKS_115_kb;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <rf_set_modulation_mode+0x90>)
 8000b1e:	60fb      	str	r3, [r7, #12]
					break;
 8000b20:	e002      	b.n	8000b28 <rf_set_modulation_mode+0x64>
        default:
        			cfg_reg = cc1100_GFSK_38_4_kb;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <rf_set_modulation_mode+0x7c>)
 8000b24:	60fb      	str	r3, [r7, #12]
                    break;
 8000b26:	bf00      	nop
    }

    rf_write_data(WRITE_BURST(0), cfg_reg, CFG_REGISTER);                            //writes all 47 config register
 8000b28:	222f      	movs	r2, #47	; 0x2f
 8000b2a:	68f9      	ldr	r1, [r7, #12]
 8000b2c:	2040      	movs	r0, #64	; 0x40
 8000b2e:	f000 f83a 	bl	8000ba6 <rf_write_data>

    //   test_cargar_cfg();

}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000040 	.word	0x20000040
 8000b40:	20000070 	.word	0x20000070
 8000b44:	200000a0 	.word	0x200000a0
 8000b48:	200000d0 	.word	0x200000d0
 8000b4c:	20000100 	.word	0x20000100
 8000b50:	20000130 	.word	0x20000130
 8000b54:	20000010 	.word	0x20000010

08000b58 <rf_write_strobe>:
}


/* SPI Comm ----------------------------------------------------------------*/

void rf_write_strobe(uint8_t strobe){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Writes command to the CC1101 to change its state-machine state.
	 */
	strobe = WRITE(strobe);
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, NULL, 0);
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f839 	bl	8000be4 <__spi_write>

}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <rf_read_register>:

uint8_t rf_read_register(uint8_t reg){
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Reads the content of a single 1-byte register.
	 * @Returns The register value.
	 */
	uint8_t data;
	reg= READ(reg);
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	71fb      	strb	r3, [r7, #7]
	__spi_read(&reg, &data, 1);
 8000b8e:	f107 010f 	add.w	r1, r7, #15
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2201      	movs	r2, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f860 	bl	8000c5c <__spi_read>
	return data;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <rf_write_data>:
		addr = READ(addr);
	}
	__spi_read(&addr, data, size);
}

void rf_write_data(uint8_t addr, uint8_t* data, uint8_t size){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	6039      	str	r1, [r7, #0]
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	71bb      	strb	r3, [r7, #6]
	 * @brief Writes multiple data.
	 * @param addr Base address.
	 * @param data The buffer where the data to be written is located.
	 * @param size Number of bytes to be written.
	 */
	if(size>1){
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d905      	bls.n	8000bc8 <rf_write_data+0x22>
		addr = WRITE_BURST(addr);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	e001      	b.n	8000bcc <rf_write_data+0x26>
	}else{
		addr = WRITE(addr);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	71fb      	strb	r3, [r7, #7]
	}
	__spi_write(&addr, data, size);
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f805 	bl	8000be4 <__spi_write>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <__spi_write>:

/* SPI Handling -------------------------------------------------------------*/

HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <__spi_write+0x6c>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <__spi_write+0x70>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f000 fd5a 	bl	80016b6 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <__spi_write+0x74>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	f001 fa23 	bl	8002058 <HAL_SPI_Transmit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	75fb      	strb	r3, [r7, #23]
	if(status==HAL_OK && pData!=NULL)
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10c      	bne.n	8000c36 <__spi_write+0x52>
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d009      	beq.n	8000c36 <__spi_write+0x52>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <__spi_write+0x74>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	88fa      	ldrh	r2, [r7, #6]
 8000c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	f001 fa13 	bl	8002058 <HAL_SPI_Transmit>
 8000c32:	4603      	mov	r3, r0
 8000c34:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <__spi_write+0x6c>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__spi_write+0x70>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4619      	mov	r1, r3
 8000c42:	f000 fd38 	bl	80016b6 <HAL_GPIO_WritePin>
	return status;
 8000c46:	7dfb      	ldrb	r3, [r7, #23]

}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000278 	.word	0x20000278
 8000c54:	20000282 	.word	0x20000282
 8000c58:	2000027c 	.word	0x2000027c

08000c5c <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <__spi_read+0x60>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <__spi_read+0x64>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	f000 fd1e 	bl	80016b6 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <__spi_read+0x68>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c82:	2201      	movs	r2, #1
 8000c84:	68f9      	ldr	r1, [r7, #12]
 8000c86:	f001 f9e7 	bl	8002058 <HAL_SPI_Transmit>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <__spi_read+0x68>)
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	88fa      	ldrh	r2, [r7, #6]
 8000c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	f001 fb19 	bl	80022d0 <HAL_SPI_Receive>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <__spi_read+0x60>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <__spi_read+0x64>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	f000 fd02 	bl	80016b6 <HAL_GPIO_WritePin>

	return status;
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]

}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000278 	.word	0x20000278
 8000cc0:	20000282 	.word	0x20000282
 8000cc4:	2000027c 	.word	0x2000027c

08000cc8 <HAL_GPIO_EXTI_Callback>:

/* Interrupts ---------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
	/*
	if (GPIO_Pin == GPIO_PIN_15)
		TX_RX_BEGAN = 1;
	*/
	if(GPIO_Pin == GDO0_Pin){
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_GPIO_EXTI_Callback+0x24>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d102      	bne.n	8000ce2 <HAL_GPIO_EXTI_Callback+0x1a>
		GDO0_FLAG = 1;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
	}
	/*
	if(GPIO_Pin == CS_Pin){ //User B1 Button (the blue one on F446ZE)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
	}*/
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20000280 	.word	0x20000280
 8000cf0:	20000195 	.word	0x20000195

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_MspInit+0x5c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_MspInit+0x60>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_MspInit+0x60>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000

08000d58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <HAL_SPI_MspInit+0x88>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d12f      	bne.n	8000dd8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000da8:	23a0      	movs	r3, #160	; 0xa0
 8000daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_SPI_MspInit+0x90>)
 8000dbc:	f000 fb0a 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_SPI_MspInit+0x90>)
 8000dd4:	f000 fafe 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_TIM_Base_MspInit+0x44>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d113      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_TIM_Base_MspInit+0x48>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <HAL_TIM_Base_MspInit+0x48>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_TIM_Base_MspInit+0x48>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2102      	movs	r1, #2
 8000e1a:	201e      	movs	r0, #30
 8000e1c:	f000 fa2d 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e20:	201e      	movs	r0, #30
 8000e22:	f000 fa46 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40000800 	.word	0x40000800
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d139      	bne.n	8000ecc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <HAL_UART_MspInit+0xa4>)
 8000e9e:	f000 fa99 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <HAL_UART_MspInit+0xa4>)
 8000eb8:	f000 fa8c 	bl	80013d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2025      	movs	r0, #37	; 0x25
 8000ec2:	f000 f9da 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ec6:	2025      	movs	r0, #37	; 0x25
 8000ec8:	f000 f9f3 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010800 	.word	0x40010800

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <BusFault_Handler+0x4>

08000efe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <UsageFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f890 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f38:	2008      	movs	r0, #8
 8000f3a:	f000 fbd5 	bl	80016e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM4_IRQHandler+0x10>)
 8000f4a:	f001 fe3d 	bl	8002bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000198 	.word	0x20000198

08000f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <USART1_IRQHandler+0x10>)
 8000f5e:	f002 fafd 	bl	800355c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200001e0 	.word	0x200001e0

08000f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f7a:	e003      	b.n	8000f84 <LoopCopyDataInit>

08000f7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f82:	3104      	adds	r1, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f84:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f8c:	d3f6      	bcc.n	8000f7c <CopyDataInit>
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f90:	e002      	b.n	8000f98 <LoopFillZerobss>

08000f92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f94:	f842 3b04 	str.w	r3, [r2], #4

08000f98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f9c:	d3f9      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f9e:	f7ff ffe5 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f002 fde7 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa6:	f7ff f901 	bl	80001ac <main>
  bx lr
 8000faa:	4770      	bx	lr
  ldr r3, =_sidata
 8000fac:	08003c18 	.word	0x08003c18
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fb4:	2000016c 	.word	0x2000016c
  ldr r2, =_sbss
 8000fb8:	2000016c 	.word	0x2000016c
  ldr r3, = _ebss
 8000fbc:	20000288 	.word	0x20000288

08000fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_2_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x28>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x28>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f945 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe88 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f95d 	bl	80012ce <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102c:	f000 f925 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000160 	.word	0x20000160
 8001048:	20000168 	.word	0x20000168
 800104c:	20000164 	.word	0x20000164

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x20>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <HAL_IncTick+0x20>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000168 	.word	0x20000168
 8001070:	20000284 	.word	0x20000284

08001074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <HAL_GetTick+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000284 	.word	0x20000284

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff fff0 	bl	8001074 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_Delay+0x40>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffe0 	bl	8001074 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000168 	.word	0x20000168

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4906      	ldr	r1, [pc, #24]	; (8001164 <__NVIC_EnableIRQ+0x34>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001244:	f7ff ff90 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff2d 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff42 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff90 	bl	80011bc <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5f 	bl	8001168 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff35 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d005      	beq.n	800130a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2204      	movs	r2, #4
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e051      	b.n	80013ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 020e 	bic.w	r2, r2, #14
 8001318:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <HAL_DMA_Abort_IT+0xd0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d029      	beq.n	8001388 <HAL_DMA_Abort_IT+0xa0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <HAL_DMA_Abort_IT+0xd4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d022      	beq.n	8001384 <HAL_DMA_Abort_IT+0x9c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <HAL_DMA_Abort_IT+0xd8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d01a      	beq.n	800137e <HAL_DMA_Abort_IT+0x96>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_DMA_Abort_IT+0xdc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d012      	beq.n	8001378 <HAL_DMA_Abort_IT+0x90>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_DMA_Abort_IT+0xe0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00a      	beq.n	8001372 <HAL_DMA_Abort_IT+0x8a>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_DMA_Abort_IT+0xe4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d102      	bne.n	800136c <HAL_DMA_Abort_IT+0x84>
 8001366:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800136a:	e00e      	b.n	800138a <HAL_DMA_Abort_IT+0xa2>
 800136c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001370:	e00b      	b.n	800138a <HAL_DMA_Abort_IT+0xa2>
 8001372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001376:	e008      	b.n	800138a <HAL_DMA_Abort_IT+0xa2>
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	e005      	b.n	800138a <HAL_DMA_Abort_IT+0xa2>
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	e002      	b.n	800138a <HAL_DMA_Abort_IT+0xa2>
 8001384:	2310      	movs	r3, #16
 8001386:	e000      	b.n	800138a <HAL_DMA_Abort_IT+0xa2>
 8001388:	2301      	movs	r3, #1
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <HAL_DMA_Abort_IT+0xe8>)
 800138c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
    } 
  }
  return status;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40020008 	.word	0x40020008
 80013bc:	4002001c 	.word	0x4002001c
 80013c0:	40020030 	.word	0x40020030
 80013c4:	40020044 	.word	0x40020044
 80013c8:	40020058 	.word	0x40020058
 80013cc:	4002006c 	.word	0x4002006c
 80013d0:	40020000 	.word	0x40020000

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	e127      	b.n	8001638 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e8:	2201      	movs	r2, #1
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8116 	bne.w	8001632 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b12      	cmp	r3, #18
 800140c:	d034      	beq.n	8001478 <HAL_GPIO_Init+0xa4>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d80d      	bhi.n	800142e <HAL_GPIO_Init+0x5a>
 8001412:	2b02      	cmp	r3, #2
 8001414:	d02b      	beq.n	800146e <HAL_GPIO_Init+0x9a>
 8001416:	2b02      	cmp	r3, #2
 8001418:	d804      	bhi.n	8001424 <HAL_GPIO_Init+0x50>
 800141a:	2b00      	cmp	r3, #0
 800141c:	d031      	beq.n	8001482 <HAL_GPIO_Init+0xae>
 800141e:	2b01      	cmp	r3, #1
 8001420:	d01c      	beq.n	800145c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001422:	e048      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001424:	2b03      	cmp	r3, #3
 8001426:	d043      	beq.n	80014b0 <HAL_GPIO_Init+0xdc>
 8001428:	2b11      	cmp	r3, #17
 800142a:	d01b      	beq.n	8001464 <HAL_GPIO_Init+0x90>
          break;
 800142c:	e043      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800142e:	4a89      	ldr	r2, [pc, #548]	; (8001654 <HAL_GPIO_Init+0x280>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d026      	beq.n	8001482 <HAL_GPIO_Init+0xae>
 8001434:	4a87      	ldr	r2, [pc, #540]	; (8001654 <HAL_GPIO_Init+0x280>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d806      	bhi.n	8001448 <HAL_GPIO_Init+0x74>
 800143a:	4a87      	ldr	r2, [pc, #540]	; (8001658 <HAL_GPIO_Init+0x284>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d020      	beq.n	8001482 <HAL_GPIO_Init+0xae>
 8001440:	4a86      	ldr	r2, [pc, #536]	; (800165c <HAL_GPIO_Init+0x288>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01d      	beq.n	8001482 <HAL_GPIO_Init+0xae>
          break;
 8001446:	e036      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001448:	4a85      	ldr	r2, [pc, #532]	; (8001660 <HAL_GPIO_Init+0x28c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0xae>
 800144e:	4a85      	ldr	r2, [pc, #532]	; (8001664 <HAL_GPIO_Init+0x290>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d016      	beq.n	8001482 <HAL_GPIO_Init+0xae>
 8001454:	4a84      	ldr	r2, [pc, #528]	; (8001668 <HAL_GPIO_Init+0x294>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0xae>
          break;
 800145a:	e02c      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e028      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	3304      	adds	r3, #4
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e023      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	3308      	adds	r3, #8
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e01e      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	330c      	adds	r3, #12
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e019      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148a:	2304      	movs	r3, #4
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e012      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001498:	2308      	movs	r3, #8
 800149a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	611a      	str	r2, [r3, #16]
          break;
 80014a2:	e008      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a4:	2308      	movs	r3, #8
 80014a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	615a      	str	r2, [r3, #20]
          break;
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2bff      	cmp	r3, #255	; 0xff
 80014ba:	d801      	bhi.n	80014c0 <HAL_GPIO_Init+0xec>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	e001      	b.n	80014c4 <HAL_GPIO_Init+0xf0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3304      	adds	r3, #4
 80014c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2bff      	cmp	r3, #255	; 0xff
 80014ca:	d802      	bhi.n	80014d2 <HAL_GPIO_Init+0xfe>
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x104>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	3b08      	subs	r3, #8
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	210f      	movs	r1, #15
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	6a39      	ldr	r1, [r7, #32]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	431a      	orrs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8096 	beq.w	8001632 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001506:	4b59      	ldr	r3, [pc, #356]	; (800166c <HAL_GPIO_Init+0x298>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a58      	ldr	r2, [pc, #352]	; (800166c <HAL_GPIO_Init+0x298>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <HAL_GPIO_Init+0x298>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800151e:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_GPIO_Init+0x29c>)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <HAL_GPIO_Init+0x2a0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x19e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_GPIO_Init+0x2a4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00d      	beq.n	800156e <HAL_GPIO_Init+0x19a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <HAL_GPIO_Init+0x2a8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x196>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <HAL_GPIO_Init+0x2ac>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_GPIO_Init+0x192>
 8001562:	2303      	movs	r3, #3
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x1a0>
 8001566:	2304      	movs	r3, #4
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x1a0>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x1a0>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x1a0>
 8001572:	2300      	movs	r3, #0
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001584:	493a      	ldr	r1, [pc, #232]	; (8001670 <HAL_GPIO_Init+0x29c>)
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4938      	ldr	r1, [pc, #224]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ac:	4b35      	ldr	r3, [pc, #212]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4933      	ldr	r1, [pc, #204]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	492e      	ldr	r1, [pc, #184]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	43db      	mvns	r3, r3
 80015dc:	4929      	ldr	r1, [pc, #164]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015de:	4013      	ands	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	4924      	ldr	r1, [pc, #144]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
 80015fa:	e006      	b.n	800160a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	43db      	mvns	r3, r3
 8001604:	491f      	ldr	r1, [pc, #124]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 8001606:	4013      	ands	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	491a      	ldr	r1, [pc, #104]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	60cb      	str	r3, [r1, #12]
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4915      	ldr	r1, [pc, #84]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 800162e:	4013      	ands	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f aed0 	bne.w	80013e8 <HAL_GPIO_Init+0x14>
  }
}
 8001648:	bf00      	nop
 800164a:	372c      	adds	r7, #44	; 0x2c
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	10210000 	.word	0x10210000
 8001658:	10110000 	.word	0x10110000
 800165c:	10120000 	.word	0x10120000
 8001660:	10310000 	.word	0x10310000
 8001664:	10320000 	.word	0x10320000
 8001668:	10220000 	.word	0x10220000
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	40010800 	.word	0x40010800
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40011000 	.word	0x40011000
 8001680:	40011400 	.word	0x40011400
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]
 80016c2:	4613      	mov	r3, r2
 80016c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c6:	787b      	ldrb	r3, [r7, #1]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d2:	e003      	b.n	80016dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	041a      	lsls	r2, r3, #16
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	611a      	str	r2, [r3, #16]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fade 	bl	8000cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e26c      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8087 	beq.w	8001846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b04      	cmp	r3, #4
 8001742:	d00c      	beq.n	800175e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001744:	4b8f      	ldr	r3, [pc, #572]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d112      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
 8001750:	4b8c      	ldr	r3, [pc, #560]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d10b      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4b89      	ldr	r3, [pc, #548]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d06c      	beq.n	8001844 <HAL_RCC_OscConfig+0x12c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d168      	bne.n	8001844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e246      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x76>
 8001780:	4b80      	ldr	r3, [pc, #512]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a7f      	ldr	r2, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e02e      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7a      	ldr	r2, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b78      	ldr	r3, [pc, #480]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a77      	ldr	r2, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e01d      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0xbc>
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a71      	ldr	r2, [pc, #452]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6e      	ldr	r2, [pc, #440]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xd4>
 80017d4:	4b6b      	ldr	r3, [pc, #428]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a6a      	ldr	r2, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b68      	ldr	r3, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a67      	ldr	r2, [pc, #412]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fc3e 	bl	8001074 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fc3a 	bl	8001074 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1fa      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0xe4>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fc2a 	bl	8001074 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fc26 	bl	8001074 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1e6      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x10c>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d063      	beq.n	800191a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800185e:	4b49      	ldr	r3, [pc, #292]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d11c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d116      	bne.n	80018a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	4b43      	ldr	r3, [pc, #268]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e1ba      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4939      	ldr	r1, [pc, #228]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	e03a      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x270>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fbdf 	bl	8001074 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fbdb 	bl	8001074 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e19b      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4927      	ldr	r1, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e015      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_OscConfig+0x270>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fbbe 	bl	8001074 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fc:	f7ff fbba 	bl	8001074 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e17a      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03a      	beq.n	800199c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d019      	beq.n	8001962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_RCC_OscConfig+0x274>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff fb9e 	bl	8001074 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fb9a 	bl	8001074 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e15a      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_OscConfig+0x26c>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 fada 	bl	8001f14 <RCC_Delay>
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_RCC_OscConfig+0x274>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fb84 	bl	8001074 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196e:	e00f      	b.n	8001990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fb80 	bl	8001074 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d908      	bls.n	8001990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e140      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	42420000 	.word	0x42420000
 800198c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b9e      	ldr	r3, [pc, #632]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e9      	bne.n	8001970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a6 	beq.w	8001af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b97      	ldr	r3, [pc, #604]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b94      	ldr	r3, [pc, #592]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a93      	ldr	r2, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b91      	ldr	r3, [pc, #580]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b8e      	ldr	r3, [pc, #568]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a8a      	ldr	r2, [pc, #552]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fb41 	bl	8001074 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff fb3d 	bl	8001074 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0fd      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b81      	ldr	r3, [pc, #516]	; (8001c10 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x312>
 8001a1c:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a7a      	ldr	r2, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	e02d      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x334>
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a75      	ldr	r2, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	e01c      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x356>
 8001a54:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a6c      	ldr	r2, [pc, #432]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x36e>
 8001a6e:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a66      	ldr	r2, [pc, #408]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d015      	beq.n	8001aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff faf1 	bl	8001074 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff faed 	bl	8001074 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0ab      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ee      	beq.n	8001a96 <HAL_RCC_OscConfig+0x37e>
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fadb 	bl	8001074 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fad7 	bl	8001074 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e095      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aea:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8081 	beq.w	8001c02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d061      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d146      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff faab 	bl	8001074 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff faa7 	bl	8001074 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e067      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	492d      	ldr	r1, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a19      	ldr	r1, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	4927      	ldr	r1, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fa7b 	bl	8001074 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff fa77 	bl	8001074 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e037      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46a>
 8001ba0:	e02f      	b.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_RCC_OscConfig+0x4fc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fa64 	bl	8001074 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fa60 	bl	8001074 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e020      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x498>
 8001bce:	e018      	b.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e013      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
 8001c14:	42420060 	.word	0x42420060

08001c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0d0      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4965      	ldr	r1, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d040      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e073      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4936      	ldr	r1, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f9b4 	bl	8001074 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff f9b0 	bl	8001074 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e053      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d210      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f821 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001daa:	4601      	mov	r1, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	fa21 f303 	lsr.w	r3, r1, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f912 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08003bf8 	.word	0x08003bf8
 8001de4:	20000160 	.word	0x20000160
 8001de8:	20000164 	.word	0x20000164

08001dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b490      	push	{r4, r7}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df4:	1d3c      	adds	r4, r7, #4
 8001df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x40>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x46>
 8001e2a:	e02d      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2e:	623b      	str	r3, [r7, #32]
      break;
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0c9b      	lsrs	r3, r3, #18
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e3e:	4413      	add	r3, r2
 8001e40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c5b      	lsrs	r3, r3, #17
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e5e:	4413      	add	r3, r2
 8001e60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e6a:	fb02 f203 	mul.w	r2, r2, r3
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	e004      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	623b      	str	r3, [r7, #32]
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e8a:	623b      	str	r3, [r7, #32]
      break;
 8001e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc90      	pop	{r4, r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	08003be4 	.word	0x08003be4
 8001ea0:	08003bf4 	.word	0x08003bf4
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	007a1200 	.word	0x007a1200
 8001eac:	003d0900 	.word	0x003d0900

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000160 	.word	0x20000160

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec8:	f7ff fff2 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4601      	mov	r1, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08003c08 	.word	0x08003c08

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08003c08 	.word	0x08003c08

08001f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <RCC_Delay+0x34>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <RCC_Delay+0x38>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0a5b      	lsrs	r3, r3, #9
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f30:	bf00      	nop
  }
  while (Delay --);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	60fa      	str	r2, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <RCC_Delay+0x1c>
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000160 	.word	0x20000160
 8001f4c:	10624dd3 	.word	0x10624dd3

08001f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e076      	b.n	8002050 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f72:	d009      	beq.n	8001f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
 8001f7a:	e005      	b.n	8001f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fed8 	bl	8000d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	ea42 0103 	orr.w	r1, r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	0c1a      	lsrs	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f002 0204 	and.w	r2, r2, #4
 800202e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_SPI_Transmit+0x22>
 8002076:	2302      	movs	r3, #2
 8002078:	e126      	b.n	80022c8 <HAL_SPI_Transmit+0x270>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002082:	f7fe fff7 	bl	8001074 <HAL_GetTick>
 8002086:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d002      	beq.n	800209e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002098:	2302      	movs	r3, #2
 800209a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800209c:	e10b      	b.n	80022b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_Transmit+0x52>
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020ae:	e102      	b.n	80022b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020f6:	d10f      	bne.n	8002118 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002106:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002116:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002122:	2b40      	cmp	r3, #64	; 0x40
 8002124:	d007      	beq.n	8002136 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800213e:	d14b      	bne.n	80021d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_SPI_Transmit+0xf6>
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d13e      	bne.n	80021cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	1c9a      	adds	r2, r3, #2
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002172:	e02b      	b.n	80021cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d112      	bne.n	80021a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	1c9a      	adds	r2, r3, #2
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80021a6:	e011      	b.n	80021cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a8:	f7fe ff64 	bl	8001074 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d803      	bhi.n	80021c0 <HAL_SPI_Transmit+0x168>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021be:	d102      	bne.n	80021c6 <HAL_SPI_Transmit+0x16e>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021ca:	e074      	b.n	80022b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ce      	bne.n	8002174 <HAL_SPI_Transmit+0x11c>
 80021d6:	e04c      	b.n	8002272 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_SPI_Transmit+0x18e>
 80021e0:	8afb      	ldrh	r3, [r7, #22]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d140      	bne.n	8002268 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	330c      	adds	r3, #12
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800220c:	e02c      	b.n	8002268 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d113      	bne.n	8002244 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	86da      	strh	r2, [r3, #54]	; 0x36
 8002242:	e011      	b.n	8002268 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002244:	f7fe ff16 	bl	8001074 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d803      	bhi.n	800225c <HAL_SPI_Transmit+0x204>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800225a:	d102      	bne.n	8002262 <HAL_SPI_Transmit+0x20a>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002266:	e026      	b.n	80022b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1cd      	bne.n	800220e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fbb8 	bl	80029ec <SPI_EndRxTxTransaction>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	77fb      	strb	r3, [r7, #31]
 80022b2:	e000      	b.n	80022b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80022b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ec:	d112      	bne.n	8002314 <HAL_SPI_Receive+0x44>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10e      	bne.n	8002314 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2204      	movs	r2, #4
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f8f1 	bl	80024f2 <HAL_SPI_TransmitReceive>
 8002310:	4603      	mov	r3, r0
 8002312:	e0ea      	b.n	80024ea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_SPI_Receive+0x52>
 800231e:	2302      	movs	r3, #2
 8002320:	e0e3      	b.n	80024ea <HAL_SPI_Receive+0x21a>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800232a:	f7fe fea3 	bl	8001074 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d002      	beq.n	8002342 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800233c:	2302      	movs	r3, #2
 800233e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002340:	e0ca      	b.n	80024d8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_SPI_Receive+0x7e>
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002352:	e0c1      	b.n	80024d8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2204      	movs	r2, #4
 8002358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239a:	d10f      	bne.n	80023bc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d007      	beq.n	80023da <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d162      	bne.n	80024a8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023e2:	e02e      	b.n	8002442 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d115      	bne.n	800241e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f103 020c 	add.w	r2, r3, #12
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800241c:	e011      	b.n	8002442 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800241e:	f7fe fe29 	bl	8001074 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d803      	bhi.n	8002436 <HAL_SPI_Receive+0x166>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002434:	d102      	bne.n	800243c <HAL_SPI_Receive+0x16c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002440:	e04a      	b.n	80024d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1cb      	bne.n	80023e4 <HAL_SPI_Receive+0x114>
 800244c:	e031      	b.n	80024b2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d113      	bne.n	8002484 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	b292      	uxth	r2, r2
 8002468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	1c9a      	adds	r2, r3, #2
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002482:	e011      	b.n	80024a8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002484:	f7fe fdf6 	bl	8001074 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d803      	bhi.n	800249c <HAL_SPI_Receive+0x1cc>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800249a:	d102      	bne.n	80024a2 <HAL_SPI_Receive+0x1d2>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024a6:	e017      	b.n	80024d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1cd      	bne.n	800244e <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fa46 	bl	8002948 <SPI_EndRxTransaction>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	75fb      	strb	r3, [r7, #23]
 80024d4:	e000      	b.n	80024d8 <HAL_SPI_Receive+0x208>
  }

error :
 80024d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b08c      	sub	sp, #48	; 0x30
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002500:	2301      	movs	r3, #1
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x26>
 8002514:	2302      	movs	r3, #2
 8002516:	e18a      	b.n	800282e <HAL_SPI_TransmitReceive+0x33c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002520:	f7fe fda8 	bl	8001074 <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800252c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800253a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800253e:	2b01      	cmp	r3, #1
 8002540:	d00f      	beq.n	8002562 <HAL_SPI_TransmitReceive+0x70>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002548:	d107      	bne.n	800255a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <HAL_SPI_TransmitReceive+0x68>
 8002552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002556:	2b04      	cmp	r3, #4
 8002558:	d003      	beq.n	8002562 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002560:	e15b      	b.n	800281a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_SPI_TransmitReceive+0x82>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_SPI_TransmitReceive+0x82>
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800257a:	e14e      	b.n	800281a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b04      	cmp	r3, #4
 8002586:	d003      	beq.n	8002590 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2205      	movs	r2, #5
 800258c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	887a      	ldrh	r2, [r7, #2]
 80025b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d007      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	d178      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_SPI_TransmitReceive+0x10a>
 80025f6:	8b7b      	ldrh	r3, [r7, #26]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d166      	bne.n	80026ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	1c9a      	adds	r2, r3, #2
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002620:	e053      	b.n	80026ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d11b      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x176>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x176>
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	2b01      	cmp	r3, #1
 800263e:	d113      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d119      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x1b8>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d014      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	b292      	uxth	r2, r2
 800268c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	1c9a      	adds	r2, r3, #2
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026aa:	f7fe fce3 	bl	8001074 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d807      	bhi.n	80026ca <HAL_SPI_TransmitReceive+0x1d8>
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c0:	d003      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026c8:	e0a7      	b.n	800281a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1a6      	bne.n	8002622 <HAL_SPI_TransmitReceive+0x130>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1a1      	bne.n	8002622 <HAL_SPI_TransmitReceive+0x130>
 80026de:	e07c      	b.n	80027da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x1fc>
 80026e8:	8b7b      	ldrh	r3, [r7, #26]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d16b      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	330c      	adds	r3, #12
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002714:	e057      	b.n	80027c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b02      	cmp	r3, #2
 8002722:	d11c      	bne.n	800275e <HAL_SPI_TransmitReceive+0x26c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d017      	beq.n	800275e <HAL_SPI_TransmitReceive+0x26c>
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d114      	bne.n	800275e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d119      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x2ae>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d014      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800279c:	2301      	movs	r3, #1
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027a0:	f7fe fc68 	bl	8001074 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d803      	bhi.n	80027b8 <HAL_SPI_TransmitReceive+0x2c6>
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b6:	d102      	bne.n	80027be <HAL_SPI_TransmitReceive+0x2cc>
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027c4:	e029      	b.n	800281a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1a2      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x224>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d19d      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f904 	bl	80029ec <SPI_EndRxTxTransaction>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027f6:	e010      	b.n	800281a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	e000      	b.n	800281a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002818:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800282a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800282e:	4618      	mov	r0, r3
 8002830:	3730      	adds	r7, #48	; 0x30
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002848:	f7fe fc14 	bl	8001074 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4413      	add	r3, r2
 8002856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002858:	f7fe fc0c 	bl	8001074 <HAL_GetTick>
 800285c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	0d1b      	lsrs	r3, r3, #20
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800286e:	e054      	b.n	800291a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002876:	d050      	beq.n	800291a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002878:	f7fe fbfc 	bl	8001074 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	429a      	cmp	r2, r3
 8002886:	d902      	bls.n	800288e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d13d      	bne.n	800290a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800289c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028a6:	d111      	bne.n	80028cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b0:	d004      	beq.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ba:	d107      	bne.n	80028cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d4:	d10f      	bne.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e017      	b.n	800293a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3b01      	subs	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	429a      	cmp	r2, r3
 8002936:	d19b      	bne.n	8002870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000160 	.word	0x20000160

08002948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800295c:	d111      	bne.n	8002982 <SPI_EndRxTransaction+0x3a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002966:	d004      	beq.n	8002972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002970:	d107      	bne.n	8002982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002980:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800298a:	d117      	bne.n	80029bc <SPI_EndRxTransaction+0x74>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002994:	d112      	bne.n	80029bc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	2101      	movs	r1, #1
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff ff49 	bl	8002838 <SPI_WaitFlagStateUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01a      	beq.n	80029e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e013      	b.n	80029e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff ff36 	bl	8002838 <SPI_WaitFlagStateUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e000      	b.n	80029e4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff18 	bl	8002838 <SPI_WaitFlagStateUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e000      	b.n	8002a20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e041      	b.n	8002abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe f9cc 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f000 fa92 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d001      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e03a      	b.n	8002b56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <HAL_TIM_Base_Start_IT+0x98>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00e      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x58>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d009      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x58>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x58>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d111      	bne.n	8002b44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d010      	beq.n	8002b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	e007      	b.n	8002b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800

08002b6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10f      	bne.n	8002bb4 <HAL_TIM_Base_Stop_IT+0x48>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_Base_Stop_IT+0x48>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0202 	mvn.w	r2, #2
 8002bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9a4 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f997 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f9a6 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0204 	mvn.w	r2, #4
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f97a 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f96d 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f97c 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0208 	mvn.w	r2, #8
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f950 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f943 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f952 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0210 	mvn.w	r2, #16
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f926 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f919 	bl	8002f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f928 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0201 	mvn.w	r2, #1
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fd fcbc 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fa6b 	bl	800324e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8ec 	bl	8002f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0220 	mvn.w	r2, #32
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa36 	bl	800323c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIM_ConfigClockSource+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0a6      	b.n	8002f3e <HAL_TIM_ConfigClockSource+0x166>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d067      	beq.n	8002ef8 <HAL_TIM_ConfigClockSource+0x120>
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d80b      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x6c>
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d073      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x140>
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d802      	bhi.n	8002e3a <HAL_TIM_ConfigClockSource+0x62>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d06f      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e38:	e078      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d06c      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x140>
 8002e3e:	2b30      	cmp	r3, #48	; 0x30
 8002e40:	d06a      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e42:	e073      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e44:	2b70      	cmp	r3, #112	; 0x70
 8002e46:	d00d      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x8c>
 8002e48:	2b70      	cmp	r3, #112	; 0x70
 8002e4a:	d804      	bhi.n	8002e56 <HAL_TIM_ConfigClockSource+0x7e>
 8002e4c:	2b50      	cmp	r3, #80	; 0x50
 8002e4e:	d033      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0xe0>
 8002e50:	2b60      	cmp	r3, #96	; 0x60
 8002e52:	d041      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e54:	e06a      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d066      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x152>
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d017      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e62:	e063      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6899      	ldr	r1, [r3, #8]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f000 f965 	bl	8003142 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	609a      	str	r2, [r3, #8]
      break;
 8002e90:	e04c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f000 f94e 	bl	8003142 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb4:	609a      	str	r2, [r3, #8]
      break;
 8002eb6:	e039      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f000 f8c5 	bl	8003054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2150      	movs	r1, #80	; 0x50
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f91c 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002ed6:	e029      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f000 f8e3 	bl	80030b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2160      	movs	r1, #96	; 0x60
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f90c 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002ef6:	e019      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f000 f8a5 	bl	8003054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2140      	movs	r1, #64	; 0x40
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f8fc 	bl	800310e <TIM_ITRx_SetConfig>
      break;
 8002f16:	e009      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f000 f8f3 	bl	800310e <TIM_ITRx_SetConfig>
        break;
 8002f28:	e000      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
	...

08002f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a29      	ldr	r2, [pc, #164]	; (8003048 <TIM_Base_SetConfig+0xb8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <TIM_Base_SetConfig+0x30>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fae:	d007      	beq.n	8002fc0 <TIM_Base_SetConfig+0x30>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a26      	ldr	r2, [pc, #152]	; (800304c <TIM_Base_SetConfig+0xbc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_Base_SetConfig+0x30>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a25      	ldr	r2, [pc, #148]	; (8003050 <TIM_Base_SetConfig+0xc0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d108      	bne.n	8002fd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <TIM_Base_SetConfig+0xb8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <TIM_Base_SetConfig+0xbc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0x62>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <TIM_Base_SetConfig+0xc0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a07      	ldr	r2, [pc, #28]	; (8003048 <TIM_Base_SetConfig+0xb8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d103      	bne.n	8003038 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	615a      	str	r2, [r3, #20]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800

08003054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0201 	bic.w	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 030a 	bic.w	r3, r3, #10
 8003090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f023 0210 	bic.w	r2, r3, #16
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	031b      	lsls	r3, r3, #12
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	621a      	str	r2, [r3, #32]
}
 8003104:	bf00      	nop
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	f043 0307 	orr.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003142:	b480      	push	{r7}
 8003144:	b087      	sub	sp, #28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	021a      	lsls	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	431a      	orrs	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4313      	orrs	r3, r2
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	609a      	str	r2, [r3, #8]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e046      	b.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d009      	beq.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10c      	bne.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4313      	orrs	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800

0800323c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e03f      	b.n	80032f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fdd6 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fbd7 	bl	8003a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b08a      	sub	sp, #40	; 0x28
 80032fe:	af02      	add	r7, sp, #8
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	d17c      	bne.n	8003414 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_UART_Transmit+0x2c>
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e075      	b.n	8003416 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x3e>
 8003334:	2302      	movs	r3, #2
 8003336:	e06e      	b.n	8003416 <HAL_UART_Transmit+0x11c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800334e:	f7fd fe91 	bl	8001074 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d108      	bne.n	800337c <HAL_UART_Transmit+0x82>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d104      	bne.n	800337c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e003      	b.n	8003384 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800338c:	e02a      	b.n	80033e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f9fa 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e036      	b.n	8003416 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	3302      	adds	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e007      	b.n	80033d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	3301      	adds	r3, #1
 80033d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1cf      	bne.n	800338e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2140      	movs	r1, #64	; 0x40
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f9ca 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08a      	sub	sp, #40	; 0x28
 8003422:	af02      	add	r7, sp, #8
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	f040 8089 	bne.w	8003552 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_Receive+0x2e>
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e081      	b.n	8003554 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_UART_Receive+0x40>
 800345a:	2302      	movs	r3, #2
 800345c:	e07a      	b.n	8003554 <HAL_UART_Receive+0x136>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003474:	f7fd fdfe 	bl	8001074 <HAL_GetTick>
 8003478:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	88fa      	ldrh	r2, [r7, #6]
 800347e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d108      	bne.n	80034a2 <HAL_UART_Receive+0x84>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	e003      	b.n	80034aa <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034b2:	e043      	b.n	800353c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2120      	movs	r1, #32
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f967 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e042      	b.n	8003554 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10c      	bne.n	80034ee <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	3302      	adds	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	e01f      	b.n	800352e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f6:	d007      	beq.n	8003508 <HAL_UART_Receive+0xea>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_UART_Receive+0xf8>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d106      	bne.n	8003516 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e008      	b.n	8003528 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003522:	b2da      	uxtb	r2, r3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	3301      	adds	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1b6      	bne.n	80034b4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_UART_IRQHandler+0x52>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9d5 	bl	8003956 <UART_Receive_IT>
      return;
 80035ac:	e0d1      	b.n	8003752 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80b0 	beq.w	8003716 <HAL_UART_IRQHandler+0x1ba>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_UART_IRQHandler+0x70>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80a5 	beq.w	8003716 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_UART_IRQHandler+0x90>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_UART_IRQHandler+0xb0>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	f043 0202 	orr.w	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_UART_IRQHandler+0xd0>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00f      	beq.n	8003656 <HAL_UART_IRQHandler+0xfa>
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_UART_IRQHandler+0xee>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	f043 0208 	orr.w	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d078      	beq.n	8003750 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_UART_IRQHandler+0x11c>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f96f 	bl	8003956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_UART_IRQHandler+0x144>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d031      	beq.n	8003704 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f8c0 	bl	8003826 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d023      	beq.n	80036fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	4a21      	ldr	r2, [pc, #132]	; (8003758 <HAL_UART_IRQHandler+0x1fc>)
 80036d2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fe05 	bl	80012e8 <HAL_DMA_Abort_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ee:	4610      	mov	r0, r2
 80036f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f2:	e00e      	b.n	8003712 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f843 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	e00a      	b.n	8003712 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f83f 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003702:	e006      	b.n	8003712 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f83b 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003710:	e01e      	b.n	8003750 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003712:	bf00      	nop
    return;
 8003714:	e01c      	b.n	8003750 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_UART_IRQHandler+0x1d6>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8ac 	bl	8003888 <UART_Transmit_IT>
    return;
 8003730:	e00f      	b.n	8003752 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_UART_IRQHandler+0x1f6>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8ed 	bl	8003926 <UART_EndTransmit_IT>
    return;
 800374c:	bf00      	nop
 800374e:	e000      	b.n	8003752 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003750:	bf00      	nop
  }
}
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	08003861 	.word	0x08003861

0800375c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a2:	e02c      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037aa:	d028      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037b2:	f7fd fc5f 	bl	8001074 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d21d      	bcs.n	80037fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e00f      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d0c3      	beq.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800383c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ff80 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b21      	cmp	r3, #33	; 0x21
 800389a:	d13e      	bne.n	800391a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a4:	d114      	bne.n	80038d0 <UART_Transmit_IT+0x48>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d110      	bne.n	80038d0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]
 80038ce:	e008      	b.n	80038e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	1c59      	adds	r1, r3, #1
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6211      	str	r1, [r2, #32]
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4619      	mov	r1, r3
 80038f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003904:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003914:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff08 	bl	800375c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b22      	cmp	r3, #34	; 0x22
 8003968:	d170      	bne.n	8003a4c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003972:	d117      	bne.n	80039a4 <UART_Receive_IT+0x4e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d113      	bne.n	80039a4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	b29a      	uxth	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	1c9a      	adds	r2, r3, #2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
 80039a2:	e026      	b.n	80039f2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b6:	d007      	beq.n	80039c8 <UART_Receive_IT+0x72>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <UART_Receive_IT+0x80>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e008      	b.n	80039e8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4619      	mov	r1, r3
 8003a00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d120      	bne.n	8003a48 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0220 	bic.w	r2, r2, #32
 8003a14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fe95 	bl	800376e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e002      	b.n	8003a4e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a92:	f023 030c 	bic.w	r3, r3, #12
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <UART_SetConfig+0x114>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ac0:	f7fe fa14 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	e002      	b.n	8003ace <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7fe f9fc 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8003acc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <UART_SetConfig+0x118>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	0119      	lsls	r1, r3, #4
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <UART_SetConfig+0x118>)
 8003b06:	fba3 0302 	umull	r0, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2064      	movs	r0, #100	; 0x64
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	3332      	adds	r3, #50	; 0x32
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <UART_SetConfig+0x118>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b24:	4419      	add	r1, r3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <UART_SetConfig+0x118>)
 8003b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2064      	movs	r0, #100	; 0x64
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <UART_SetConfig+0x118>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	440a      	add	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	51eb851f 	.word	0x51eb851f

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	2500      	movs	r5, #0
 8003b78:	4e0c      	ldr	r6, [pc, #48]	; (8003bac <__libc_init_array+0x38>)
 8003b7a:	4c0d      	ldr	r4, [pc, #52]	; (8003bb0 <__libc_init_array+0x3c>)
 8003b7c:	1ba4      	subs	r4, r4, r6
 8003b7e:	10a4      	asrs	r4, r4, #2
 8003b80:	42a5      	cmp	r5, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	f000 f822 	bl	8003bcc <_init>
 8003b88:	2500      	movs	r5, #0
 8003b8a:	4e0a      	ldr	r6, [pc, #40]	; (8003bb4 <__libc_init_array+0x40>)
 8003b8c:	4c0a      	ldr	r4, [pc, #40]	; (8003bb8 <__libc_init_array+0x44>)
 8003b8e:	1ba4      	subs	r4, r4, r6
 8003b90:	10a4      	asrs	r4, r4, #2
 8003b92:	42a5      	cmp	r5, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9c:	4798      	blx	r3
 8003b9e:	3501      	adds	r5, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba6:	4798      	blx	r3
 8003ba8:	3501      	adds	r5, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	08003c10 	.word	0x08003c10
 8003bb0:	08003c10 	.word	0x08003c10
 8003bb4:	08003c10 	.word	0x08003c10
 8003bb8:	08003c14 	.word	0x08003c14

08003bbc <memset>:
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4402      	add	r2, r0
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d100      	bne.n	8003bc6 <memset+0xa>
 8003bc4:	4770      	bx	lr
 8003bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bca:	e7f9      	b.n	8003bc0 <memset+0x4>

08003bcc <_init>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	bf00      	nop
 8003bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd2:	bc08      	pop	{r3}
 8003bd4:	469e      	mov	lr, r3
 8003bd6:	4770      	bx	lr

08003bd8 <_fini>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	bf00      	nop
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr
