
central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae4  08002ae4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae4  08002ae4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002af8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002af8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d40  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017a1  00000000  00000000  00029d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002b518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b4f  00000000  00000000  0002cb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cae  00000000  00000000  000436df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085f7c  00000000  00000000  0004c38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000309c  00000000  00000000  000d2384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa0 	.word	0x08002aa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002aa0 	.word	0x08002aa0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc01 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f97d 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa39 	bl	80005d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 fa0d 	bl	800057c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000162:	f000 f9bd 	bl	80004e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	eSystemState NextState;
	uint8_t RSSI_value[3];
	uint8_t estado_inhi[3] = {0,0,0};
 8000166:	2300      	movs	r3, #0
 8000168:	733b      	strb	r3, [r7, #12]
 800016a:	2300      	movs	r3, #0
 800016c:	737b      	strb	r3, [r7, #13]
 800016e:	2300      	movs	r3, #0
 8000170:	73bb      	strb	r3, [r7, #14]
	uint8_t cRx = 0;
 8000172:	2300      	movs	r3, #0
 8000174:	75bb      	strb	r3, [r7, #22]
	uint8_t cIn = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	757b      	strb	r3, [r7, #21]
	uint8_t err = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	753b      	strb	r3, [r7, #20]
	bool bPresencia_Inhibi;
	char in[3] = {0, 0, 0};
 800017e:	2300      	movs	r3, #0
 8000180:	723b      	strb	r3, [r7, #8]
 8000182:	2300      	movs	r3, #0
 8000184:	727b      	strb	r3, [r7, #9]
 8000186:	2300      	movs	r3, #0
 8000188:	72bb      	strb	r3, [r7, #10]
	char ch[3] = {0, 0, 0};
 800018a:	2300      	movs	r3, #0
 800018c:	713b      	strb	r3, [r7, #4]
 800018e:	2300      	movs	r3, #0
 8000190:	717b      	strb	r3, [r7, #5]
 8000192:	2300      	movs	r3, #0
 8000194:	71bb      	strb	r3, [r7, #6]


	NextState = RxNodos_State;
 8000196:	2300      	movs	r3, #0
 8000198:	75fb      	strb	r3, [r7, #23]
	bPresencia_Inhibi = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // DE - Comunicacion RS485 - Se coloca en bajo para estar en modo recepcion
 800019e:	2200      	movs	r2, #0
 80001a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a4:	48a8      	ldr	r0, [pc, #672]	; (8000448 <main+0x2fc>)
 80001a6:	f000 ff17 	bl	8000fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // RE - Comunicacion RS485 - Se coloca en bajo para escuchar todo el tiempoc
 80001aa:	2200      	movs	r2, #0
 80001ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b0:	48a5      	ldr	r0, [pc, #660]	; (8000448 <main+0x2fc>)
 80001b2:	f000 ff11 	bl	8000fd8 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Maquina de estados para comunicacion
	  switch(NextState){
 80001b6:	7dfb      	ldrb	r3, [r7, #23]
 80001b8:	2b03      	cmp	r3, #3
 80001ba:	f200 8129 	bhi.w	8000410 <main+0x2c4>
 80001be:	a201      	add	r2, pc, #4	; (adr r2, 80001c4 <main+0x78>)
 80001c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c4:	080001d5 	.word	0x080001d5
 80001c8:	08000207 	.word	0x08000207
 80001cc:	08000241 	.word	0x08000241
 80001d0:	080003df 	.word	0x080003df
		  case RxNodos_State:
			  in[0] = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	723b      	strb	r3, [r7, #8]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001de:	489a      	ldr	r0, [pc, #616]	; (8000448 <main+0x2fc>)
 80001e0:	f000 fefa 	bl	8000fd8 <HAL_GPIO_WritePin>
			  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1000);
 80001e4:	f107 0108 	add.w	r1, r7, #8
 80001e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ec:	2201      	movs	r2, #1
 80001ee:	4897      	ldr	r0, [pc, #604]	; (800044c <main+0x300>)
 80001f0:	f002 f83b 	bl	800226a <HAL_UART_Receive>


			  if(in[0] != 0) NextState = Captura_Inhibicion_Tx_State;
 80001f4:	7a3b      	ldrb	r3, [r7, #8]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <main+0xb4>
 80001fa:	2301      	movs	r3, #1
 80001fc:	75fb      	strb	r3, [r7, #23]

			  else
				  NextState = RxNodos_State;

			  break;
 80001fe:	e121      	b.n	8000444 <main+0x2f8>
				  NextState = RxNodos_State;
 8000200:	2300      	movs	r3, #0
 8000202:	75fb      	strb	r3, [r7, #23]
			  break;
 8000204:	e11e      	b.n	8000444 <main+0x2f8>

		  case Captura_Inhibicion_Tx_State:
			  ch[0] = 'G';
 8000206:	2347      	movs	r3, #71	; 0x47
 8000208:	713b      	strb	r3, [r7, #4]
			  // Pone en modo tx
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800020a:	2201      	movs	r2, #1
 800020c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000210:	488d      	ldr	r0, [pc, #564]	; (8000448 <main+0x2fc>)
 8000212:	f000 fee1 	bl	8000fd8 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10); //Definir palabra a enviar para que todos los nodos escuchen y guarden rssi y estado
 8000216:	1d39      	adds	r1, r7, #4
 8000218:	230a      	movs	r3, #10
 800021a:	2201      	movs	r2, #1
 800021c:	488b      	ldr	r0, [pc, #556]	; (800044c <main+0x300>)
 800021e:	f001 ff92 	bl	8002146 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1);
 8000222:	f107 0108 	add.w	r1, r7, #8
 8000226:	2301      	movs	r3, #1
 8000228:	2201      	movs	r2, #1
 800022a:	4888      	ldr	r0, [pc, #544]	; (800044c <main+0x300>)
 800022c:	f002 f81d 	bl	800226a <HAL_UART_Receive>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000236:	4884      	ldr	r0, [pc, #528]	; (8000448 <main+0x2fc>)
 8000238:	f000 fece 	bl	8000fd8 <HAL_GPIO_WritePin>

			  NextState = Espera_Estados_Rx_State;
 800023c:	2302      	movs	r3, #2
 800023e:	75fb      	strb	r3, [r7, #23]

		  case Espera_Estados_Rx_State:

			  if 	  (cRx == 0) ch[0] = 'a';
 8000240:	7dbb      	ldrb	r3, [r7, #22]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d102      	bne.n	800024c <main+0x100>
 8000246:	2361      	movs	r3, #97	; 0x61
 8000248:	713b      	strb	r3, [r7, #4]
 800024a:	e00a      	b.n	8000262 <main+0x116>
			  else if (cRx == 1) ch[0] = 'b';
 800024c:	7dbb      	ldrb	r3, [r7, #22]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d102      	bne.n	8000258 <main+0x10c>
 8000252:	2362      	movs	r3, #98	; 0x62
 8000254:	713b      	strb	r3, [r7, #4]
 8000256:	e004      	b.n	8000262 <main+0x116>
			  else if (cRx == 2) ch[0] = 'c';
 8000258:	7dbb      	ldrb	r3, [r7, #22]
 800025a:	2b02      	cmp	r3, #2
 800025c:	d101      	bne.n	8000262 <main+0x116>
 800025e:	2363      	movs	r3, #99	; 0x63
 8000260:	713b      	strb	r3, [r7, #4]

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000268:	4877      	ldr	r0, [pc, #476]	; (8000448 <main+0x2fc>)
 800026a:	f000 feb5 	bl	8000fd8 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, 1);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2201      	movs	r2, #1
 8000272:	4619      	mov	r1, r3
 8000274:	4875      	ldr	r0, [pc, #468]	; (800044c <main+0x300>)
 8000276:	f002 f897 	bl	80023a8 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1);
 800027a:	f107 0108 	add.w	r1, r7, #8
 800027e:	2301      	movs	r3, #1
 8000280:	2201      	movs	r2, #1
 8000282:	4872      	ldr	r0, [pc, #456]	; (800044c <main+0x300>)
 8000284:	f001 fff1 	bl	800226a <HAL_UART_Receive>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028e:	486e      	ldr	r0, [pc, #440]	; (8000448 <main+0x2fc>)
 8000290:	f000 fea2 	bl	8000fd8 <HAL_GPIO_WritePin>

			  err = HAL_UART_Receive(&huart1, (uint8_t *)in, 3, 100);
 8000294:	f107 0108 	add.w	r1, r7, #8
 8000298:	2364      	movs	r3, #100	; 0x64
 800029a:	2203      	movs	r2, #3
 800029c:	486b      	ldr	r0, [pc, #428]	; (800044c <main+0x300>)
 800029e:	f001 ffe4 	bl	800226a <HAL_UART_Receive>
 80002a2:	4603      	mov	r3, r0
 80002a4:	753b      	strb	r3, [r7, #20]
			  if(in[0] == 'A'){
 80002a6:	7a3b      	ldrb	r3, [r7, #8]
 80002a8:	2b41      	cmp	r3, #65	; 0x41
 80002aa:	d118      	bne.n	80002de <main+0x192>
				  if (in[1] > 120 || in[1] < 18) RSSI_value[0] = 0;
 80002ac:	7a7b      	ldrb	r3, [r7, #9]
 80002ae:	2b78      	cmp	r3, #120	; 0x78
 80002b0:	d802      	bhi.n	80002b8 <main+0x16c>
 80002b2:	7a7b      	ldrb	r3, [r7, #9]
 80002b4:	2b11      	cmp	r3, #17
 80002b6:	d802      	bhi.n	80002be <main+0x172>
 80002b8:	2300      	movs	r3, #0
 80002ba:	743b      	strb	r3, [r7, #16]
 80002bc:	e001      	b.n	80002c2 <main+0x176>
				  else RSSI_value[0] = in[1];
 80002be:	7a7b      	ldrb	r3, [r7, #9]
 80002c0:	743b      	strb	r3, [r7, #16]
				  if (in[2] > 2) estado_inhi[0] = 0;
 80002c2:	7abb      	ldrb	r3, [r7, #10]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d902      	bls.n	80002ce <main+0x182>
 80002c8:	2300      	movs	r3, #0
 80002ca:	733b      	strb	r3, [r7, #12]
 80002cc:	e001      	b.n	80002d2 <main+0x186>
				  else estado_inhi[0] = in[2];
 80002ce:	7abb      	ldrb	r3, [r7, #10]
 80002d0:	733b      	strb	r3, [r7, #12]

				  cRx++;
 80002d2:	7dbb      	ldrb	r3, [r7, #22]
 80002d4:	3301      	adds	r3, #1
 80002d6:	75bb      	strb	r3, [r7, #22]
				  cIn = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	757b      	strb	r3, [r7, #21]
 80002dc:	e038      	b.n	8000350 <main+0x204>
			  }
			  else if(in[0] == 'B'){
 80002de:	7a3b      	ldrb	r3, [r7, #8]
 80002e0:	2b42      	cmp	r3, #66	; 0x42
 80002e2:	d118      	bne.n	8000316 <main+0x1ca>
				  if (in[1] > 120 || in[1] < 18) RSSI_value[1] = 0;
 80002e4:	7a7b      	ldrb	r3, [r7, #9]
 80002e6:	2b78      	cmp	r3, #120	; 0x78
 80002e8:	d802      	bhi.n	80002f0 <main+0x1a4>
 80002ea:	7a7b      	ldrb	r3, [r7, #9]
 80002ec:	2b11      	cmp	r3, #17
 80002ee:	d802      	bhi.n	80002f6 <main+0x1aa>
 80002f0:	2300      	movs	r3, #0
 80002f2:	747b      	strb	r3, [r7, #17]
 80002f4:	e001      	b.n	80002fa <main+0x1ae>
				  else RSSI_value[1] = in[1];
 80002f6:	7a7b      	ldrb	r3, [r7, #9]
 80002f8:	747b      	strb	r3, [r7, #17]

				  if (in[2] > 2) estado_inhi[1] = 0;
 80002fa:	7abb      	ldrb	r3, [r7, #10]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	d902      	bls.n	8000306 <main+0x1ba>
 8000300:	2300      	movs	r3, #0
 8000302:	737b      	strb	r3, [r7, #13]
 8000304:	e001      	b.n	800030a <main+0x1be>
				  else estado_inhi[1] = in[2];
 8000306:	7abb      	ldrb	r3, [r7, #10]
 8000308:	737b      	strb	r3, [r7, #13]
				  cRx++;
 800030a:	7dbb      	ldrb	r3, [r7, #22]
 800030c:	3301      	adds	r3, #1
 800030e:	75bb      	strb	r3, [r7, #22]
				  cIn = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	757b      	strb	r3, [r7, #21]
 8000314:	e01c      	b.n	8000350 <main+0x204>
			  }
			  else if(in[0] == 'C'){
 8000316:	7a3b      	ldrb	r3, [r7, #8]
 8000318:	2b43      	cmp	r3, #67	; 0x43
 800031a:	d119      	bne.n	8000350 <main+0x204>
				  if (in[1] > 120 || in[1] < 18) RSSI_value[2] = 0;
 800031c:	7a7b      	ldrb	r3, [r7, #9]
 800031e:	2b78      	cmp	r3, #120	; 0x78
 8000320:	d802      	bhi.n	8000328 <main+0x1dc>
 8000322:	7a7b      	ldrb	r3, [r7, #9]
 8000324:	2b11      	cmp	r3, #17
 8000326:	d802      	bhi.n	800032e <main+0x1e2>
 8000328:	2300      	movs	r3, #0
 800032a:	74bb      	strb	r3, [r7, #18]
 800032c:	e001      	b.n	8000332 <main+0x1e6>
				  else RSSI_value[2] = in[1];
 800032e:	7a7b      	ldrb	r3, [r7, #9]
 8000330:	74bb      	strb	r3, [r7, #18]
				  RSSI_value[2] = in[1];
 8000332:	7a7b      	ldrb	r3, [r7, #9]
 8000334:	74bb      	strb	r3, [r7, #18]
				  if (in[2] > 2) estado_inhi[2] = 0;
 8000336:	7abb      	ldrb	r3, [r7, #10]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d902      	bls.n	8000342 <main+0x1f6>
 800033c:	2300      	movs	r3, #0
 800033e:	73bb      	strb	r3, [r7, #14]
 8000340:	e001      	b.n	8000346 <main+0x1fa>
				  else estado_inhi[2] = in[2];
 8000342:	7abb      	ldrb	r3, [r7, #10]
 8000344:	73bb      	strb	r3, [r7, #14]
				  cRx++;
 8000346:	7dbb      	ldrb	r3, [r7, #22]
 8000348:	3301      	adds	r3, #1
 800034a:	75bb      	strb	r3, [r7, #22]
				  cIn = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	757b      	strb	r3, [r7, #21]
			  }

			  if(err == 3)
 8000350:	7d3b      	ldrb	r3, [r7, #20]
 8000352:	2b03      	cmp	r3, #3
 8000354:	d102      	bne.n	800035c <main+0x210>
				  cIn++;
 8000356:	7d7b      	ldrb	r3, [r7, #21]
 8000358:	3301      	adds	r3, #1
 800035a:	757b      	strb	r3, [r7, #21]

			  if(cRx == 3){
 800035c:	7dbb      	ldrb	r3, [r7, #22]
 800035e:	2b03      	cmp	r3, #3
 8000360:	d134      	bne.n	80003cc <main+0x280>

				  cRx = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	75bb      	strb	r3, [r7, #22]
				  ch[0] = 'F';
 8000366:	2346      	movs	r3, #70	; 0x46
 8000368:	713b      	strb	r3, [r7, #4]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000370:	4835      	ldr	r0, [pc, #212]	; (8000448 <main+0x2fc>)
 8000372:	f000 fe31 	bl	8000fd8 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, 1);
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2201      	movs	r2, #1
 800037a:	4619      	mov	r1, r3
 800037c:	4833      	ldr	r0, [pc, #204]	; (800044c <main+0x300>)
 800037e:	f002 f813 	bl	80023a8 <HAL_UART_Transmit_IT>
				  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1);
 8000382:	f107 0108 	add.w	r1, r7, #8
 8000386:	2301      	movs	r3, #1
 8000388:	2201      	movs	r2, #1
 800038a:	4830      	ldr	r0, [pc, #192]	; (800044c <main+0x300>)
 800038c:	f001 ff6d 	bl	800226a <HAL_UART_Receive>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000396:	482c      	ldr	r0, [pc, #176]	; (8000448 <main+0x2fc>)
 8000398:	f000 fe1e 	bl	8000fd8 <HAL_GPIO_WritePin>

				  if(estado_inhi[0] || estado_inhi[1] || estado_inhi[2])  {
 800039c:	7b3b      	ldrb	r3, [r7, #12]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d105      	bne.n	80003ae <main+0x262>
 80003a2:	7b7b      	ldrb	r3, [r7, #13]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d102      	bne.n	80003ae <main+0x262>
 80003a8:	7bbb      	ldrb	r3, [r7, #14]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d004      	beq.n	80003b8 <main+0x26c>
					  HAL_TIM_Base_Start_IT(&htim4);
 80003ae:	4828      	ldr	r0, [pc, #160]	; (8000450 <main+0x304>)
 80003b0:	f001 fab0 	bl	8001914 <HAL_TIM_Base_Start_IT>
					  bPresencia_Inhibi = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	74fb      	strb	r3, [r7, #19]
				  }

				  estado_inhi[0] = estado_inhi[1] = estado_inhi[2] = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	73bb      	strb	r3, [r7, #14]
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	737b      	strb	r3, [r7, #13]
 80003c0:	7b7b      	ldrb	r3, [r7, #13]
 80003c2:	733b      	strb	r3, [r7, #12]

				  bPresencia_Inhibi = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	74fb      	strb	r3, [r7, #19]
				  NextState = RxNodos_State;
 80003c8:	2300      	movs	r3, #0
 80003ca:	75fb      	strb	r3, [r7, #23]

			  }

			  if (cIn >= 50){
 80003cc:	7d7b      	ldrb	r3, [r7, #21]
 80003ce:	2b31      	cmp	r3, #49	; 0x31
 80003d0:	d937      	bls.n	8000442 <main+0x2f6>
				  cIn = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	757b      	strb	r3, [r7, #21]
				  cRx++;
 80003d6:	7dbb      	ldrb	r3, [r7, #22]
 80003d8:	3301      	adds	r3, #1
 80003da:	75bb      	strb	r3, [r7, #22]
			  }


			  break;
 80003dc:	e031      	b.n	8000442 <main+0x2f6>
		  case Reset_Tx_State:
			  ch[0] = 'F';
 80003de:	2346      	movs	r3, #70	; 0x46
 80003e0:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <main+0x2fc>)
 80003ea:	f000 fdf5 	bl	8000fd8 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 80003ee:	1d39      	adds	r1, r7, #4
 80003f0:	230a      	movs	r3, #10
 80003f2:	2201      	movs	r2, #1
 80003f4:	4815      	ldr	r0, [pc, #84]	; (800044c <main+0x300>)
 80003f6:	f001 fea6 	bl	8002146 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <main+0x2fc>)
 8000402:	f000 fde9 	bl	8000fd8 <HAL_GPIO_WritePin>

			  bPresencia_Inhibi = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	74fb      	strb	r3, [r7, #19]
			  NextState = RxNodos_State;
 800040a:	2300      	movs	r3, #0
 800040c:	75fb      	strb	r3, [r7, #23]

			  break;
 800040e:	e019      	b.n	8000444 <main+0x2f8>
		  default:
			  ch[0] = 'F';
 8000410:	2346      	movs	r3, #70	; 0x46
 8000412:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <main+0x2fc>)
 800041c:	f000 fddc 	bl	8000fd8 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 8000420:	1d39      	adds	r1, r7, #4
 8000422:	230a      	movs	r3, #10
 8000424:	2201      	movs	r2, #1
 8000426:	4809      	ldr	r0, [pc, #36]	; (800044c <main+0x300>)
 8000428:	f001 fe8d 	bl	8002146 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <main+0x2fc>)
 8000434:	f000 fdd0 	bl	8000fd8 <HAL_GPIO_WritePin>

			  bPresencia_Inhibi = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	74fb      	strb	r3, [r7, #19]
			  NextState = RxNodos_State;
 800043c:	2300      	movs	r3, #0
 800043e:	75fb      	strb	r3, [r7, #23]
			  break;
 8000440:	e000      	b.n	8000444 <main+0x2f8>
			  break;
 8000442:	bf00      	nop
	  switch(NextState){
 8000444:	e6b7      	b.n	80001b6 <main+0x6a>
 8000446:	bf00      	nop
 8000448:	40010800 	.word	0x40010800
 800044c:	20000074 	.word	0x20000074
 8000450:	2000002c 	.word	0x2000002c

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	; 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fb14 	bl	8002a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000488:	2302      	movs	r3, #2
 800048a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000492:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fdcd 	bl	800103c <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a8:	f000 f93a 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2102      	movs	r1, #2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 f838 	bl	800153c <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d2:	f000 f925 	bl	8000720 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	; 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_TIM4_Init+0x94>)
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <MX_TIM4_Init+0x98>)
 8000500:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_TIM4_Init+0x94>)
 8000504:	f240 529f 	movw	r2, #1439	; 0x59f
 8000508:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_TIM4_Init+0x94>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_TIM4_Init+0x94>)
 8000512:	220a      	movs	r2, #10
 8000514:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_TIM4_Init+0x94>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_TIM4_Init+0x94>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <MX_TIM4_Init+0x94>)
 8000524:	f001 f9a6 	bl	8001874 <HAL_TIM_Base_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 f8f7 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	4619      	mov	r1, r3
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_TIM4_Init+0x94>)
 8000540:	f001 fb70 	bl	8001c24 <HAL_TIM_ConfigClockSource>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 f8e9 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_TIM4_Init+0x94>)
 800055c:	f001 fd36 	bl	8001fcc <HAL_TIMEx_MasterConfigSynchronization>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000566:	f000 f8db 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40000800 	.word	0x40000800

0800057c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <MX_USART1_UART_Init+0x50>)
 8000584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800058c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 800059c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005a4:	220c      	movs	r2, #12
 80005a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005b6:	f001 fd79 	bl	80020ac <HAL_UART_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80005c0:	f000 f8ae 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000074 	.word	0x20000074
 80005cc:	40013800 	.word	0x40013800

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xd0>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <MX_GPIO_Init+0xd0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xd0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_GPIO_Init+0xd0>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_GPIO_Init+0xd0>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <MX_GPIO_Init+0xd4>)
 8000634:	f000 fcd0 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2150      	movs	r1, #80	; 0x50
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <MX_GPIO_Init+0xd8>)
 800063e:	f000 fccb 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000642:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800064c:	2302      	movs	r3, #2
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2302      	movs	r3, #2
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_GPIO_Init+0xd4>)
 800065c:	f000 fb62 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000660:	2310      	movs	r3, #16
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_GPIO_Init+0xd8>)
 8000678:	f000 fb54 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_GPIO_Init+0xd8>)
 8000694:	f000 fb46 	bl	8000d24 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800
 80006a8:	40010c00 	.word	0x40010c00

080006ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM4){ //chequea que la interrupción sea la del timer adecuado
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d124      	bne.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x5c>

		contador1s++;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006c8:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	4812      	ldr	r0, [pc, #72]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80006ce:	f000 fc9b 	bl	8001008 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2110      	movs	r1, #16
 80006d6:	4810      	ldr	r0, [pc, #64]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80006d8:	f000 fc7e 	bl	8000fd8 <HAL_GPIO_WritePin>
		if(contador1s == 5000) {
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d10f      	bne.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x5c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80006ee:	f000 fc73 	bl	8000fd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80006f8:	f000 fc6e 	bl	8000fd8 <HAL_GPIO_WritePin>
			contador1s = 0;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	801a      	strh	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim4);
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000704:	f001 f958 	bl	80019b8 <HAL_TIM_Base_Stop_IT>
		}

	}

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40000800 	.word	0x40000800
 8000714:	20000028 	.word	0x20000028
 8000718:	40010c00 	.word	0x40010c00
 800071c:	2000002c 	.word	0x2000002c

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <HAL_TIM_Base_MspInit+0x44>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d113      	bne.n	80007ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_TIM_Base_MspInit+0x48>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <HAL_TIM_Base_MspInit+0x48>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_TIM_Base_MspInit+0x48>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	201e      	movs	r0, #30
 80007c0:	f000 fa03 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007c4:	201e      	movs	r0, #30
 80007c6:	f000 fa1c 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40000800 	.word	0x40000800
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <HAL_UART_MspInit+0x9c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d139      	bne.n	8000870 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <HAL_UART_MspInit+0xa0>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a1e      	ldr	r2, [pc, #120]	; (800087c <HAL_UART_MspInit+0xa0>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_UART_MspInit+0xa0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_UART_MspInit+0xa0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a18      	ldr	r2, [pc, #96]	; (800087c <HAL_UART_MspInit+0xa0>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_UART_MspInit+0xa0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800082c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480f      	ldr	r0, [pc, #60]	; (8000880 <HAL_UART_MspInit+0xa4>)
 8000842:	f000 fa6f 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <HAL_UART_MspInit+0xa4>)
 800085c:	f000 fa62 	bl	8000d24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2025      	movs	r0, #37	; 0x25
 8000866:	f000 f9b0 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800086a:	2025      	movs	r0, #37	; 0x25
 800086c:	f000 f9c9 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40013800 	.word	0x40013800
 800087c:	40021000 	.word	0x40021000
 8000880:	40010800 	.word	0x40010800

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <HardFault_Handler+0x4>

08000896 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <BusFault_Handler+0x4>

080008a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f888 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <TIM4_IRQHandler+0x10>)
 80008de:	f001 f899 	bl	8001a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000002c 	.word	0x2000002c

080008ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <USART1_IRQHandler+0x10>)
 80008f2:	f001 fd9d 	bl	8002430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000074 	.word	0x20000074

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800090c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800090e:	e003      	b.n	8000918 <LoopCopyDataInit>

08000910 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000912:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000914:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000916:	3104      	adds	r1, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000918:	480a      	ldr	r0, [pc, #40]	; (8000944 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800091c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000920:	d3f6      	bcc.n	8000910 <CopyDataInit>
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000924:	e002      	b.n	800092c <LoopFillZerobss>

08000926 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000928:	f842 3b04 	str.w	r3, [r2], #4

0800092c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000930:	d3f9      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000932:	f7ff ffe5 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f002 f887 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fc07 	bl	800014c <main>
  bx lr
 800093e:	4770      	bx	lr
  ldr r3, =_sidata
 8000940:	08002aec 	.word	0x08002aec
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000948:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800094c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000950:	200000b8 	.word	0x200000b8

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_Init+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_Init+0x28>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f923 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f808 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff feda 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x54>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f93b 	bl	8000c1e <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00e      	b.n	80009d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d80a      	bhi.n	80009ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f000 f903 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <HAL_InitTick+0x5c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <HAL_IncTick+0x20>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200000b4 	.word	0x200000b4

08000a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	200000b4 	.word	0x200000b4

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <__NVIC_EnableIRQ+0x34>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff90 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff2d 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff42 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff90 	bl	8000b0c <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5f 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff35 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d005      	beq.n	8000c5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2204      	movs	r2, #4
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e051      	b.n	8000cfe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 020e 	bic.w	r2, r2, #14
 8000c68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 0201 	bic.w	r2, r2, #1
 8000c78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <HAL_DMA_Abort_IT+0xd0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d029      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0xa0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <HAL_DMA_Abort_IT+0xd4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d022      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x9c>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <HAL_DMA_Abort_IT+0xd8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d01a      	beq.n	8000cce <HAL_DMA_Abort_IT+0x96>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_DMA_Abort_IT+0xdc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d012      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0x90>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <HAL_DMA_Abort_IT+0xe0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00a      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x8a>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <HAL_DMA_Abort_IT+0xe4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d102      	bne.n	8000cbc <HAL_DMA_Abort_IT+0x84>
 8000cb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cba:	e00e      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc0:	e00b      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc6:	e008      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	e005      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	e002      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	e000      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <HAL_DMA_Abort_IT+0xe8>)
 8000cdc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	4798      	blx	r3
    } 
  }
  return status;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	4002001c 	.word	0x4002001c
 8000d10:	40020030 	.word	0x40020030
 8000d14:	40020044 	.word	0x40020044
 8000d18:	40020058 	.word	0x40020058
 8000d1c:	4002006c 	.word	0x4002006c
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e127      	b.n	8000f88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8116 	bne.w	8000f82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b12      	cmp	r3, #18
 8000d5c:	d034      	beq.n	8000dc8 <HAL_GPIO_Init+0xa4>
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d80d      	bhi.n	8000d7e <HAL_GPIO_Init+0x5a>
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d02b      	beq.n	8000dbe <HAL_GPIO_Init+0x9a>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d804      	bhi.n	8000d74 <HAL_GPIO_Init+0x50>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d031      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d01c      	beq.n	8000dac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d72:	e048      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d043      	beq.n	8000e00 <HAL_GPIO_Init+0xdc>
 8000d78:	2b11      	cmp	r3, #17
 8000d7a:	d01b      	beq.n	8000db4 <HAL_GPIO_Init+0x90>
          break;
 8000d7c:	e043      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d7e:	4a89      	ldr	r2, [pc, #548]	; (8000fa4 <HAL_GPIO_Init+0x280>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d026      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d84:	4a87      	ldr	r2, [pc, #540]	; (8000fa4 <HAL_GPIO_Init+0x280>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d806      	bhi.n	8000d98 <HAL_GPIO_Init+0x74>
 8000d8a:	4a87      	ldr	r2, [pc, #540]	; (8000fa8 <HAL_GPIO_Init+0x284>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d020      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d90:	4a86      	ldr	r2, [pc, #536]	; (8000fac <HAL_GPIO_Init+0x288>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01d      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
          break;
 8000d96:	e036      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d98:	4a85      	ldr	r2, [pc, #532]	; (8000fb0 <HAL_GPIO_Init+0x28c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d9e:	4a85      	ldr	r2, [pc, #532]	; (8000fb4 <HAL_GPIO_Init+0x290>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d016      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000da4:	4a84      	ldr	r2, [pc, #528]	; (8000fb8 <HAL_GPIO_Init+0x294>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
          break;
 8000daa:	e02c      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	623b      	str	r3, [r7, #32]
          break;
 8000db2:	e028      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	3304      	adds	r3, #4
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e023      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e01e      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e019      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e012      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de8:	2308      	movs	r3, #8
 8000dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	611a      	str	r2, [r3, #16]
          break;
 8000df2:	e008      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	615a      	str	r2, [r3, #20]
          break;
 8000dfe:	e002      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d801      	bhi.n	8000e10 <HAL_GPIO_Init+0xec>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	e001      	b.n	8000e14 <HAL_GPIO_Init+0xf0>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3304      	adds	r3, #4
 8000e14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2bff      	cmp	r3, #255	; 0xff
 8000e1a:	d802      	bhi.n	8000e22 <HAL_GPIO_Init+0xfe>
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_Init+0x104>
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3b08      	subs	r3, #8
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	210f      	movs	r1, #15
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	6a39      	ldr	r1, [r7, #32]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	431a      	orrs	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 8096 	beq.w	8000f82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <HAL_GPIO_Init+0x298>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <HAL_GPIO_Init+0x298>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x298>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e6e:	4a54      	ldr	r2, [pc, #336]	; (8000fc0 <HAL_GPIO_Init+0x29c>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x2a0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x19e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <HAL_GPIO_Init+0x2a4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x19a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a49      	ldr	r2, [pc, #292]	; (8000fcc <HAL_GPIO_Init+0x2a8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x196>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_GPIO_Init+0x2ac>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x192>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed4:	493a      	ldr	r1, [pc, #232]	; (8000fc0 <HAL_GPIO_Init+0x29c>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eee:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4938      	ldr	r1, [pc, #224]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
 8000efa:	e006      	b.n	8000f0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4933      	ldr	r1, [pc, #204]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	492e      	ldr	r1, [pc, #184]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4929      	ldr	r1, [pc, #164]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	4924      	ldr	r1, [pc, #144]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	608b      	str	r3, [r1, #8]
 8000f4a:	e006      	b.n	8000f5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	491f      	ldr	r1, [pc, #124]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	491a      	ldr	r1, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60cb      	str	r3, [r1, #12]
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	4915      	ldr	r1, [pc, #84]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3301      	adds	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f47f aed0 	bne.w	8000d38 <HAL_GPIO_Init+0x14>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	372c      	adds	r7, #44	; 0x2c
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	10210000 	.word	0x10210000
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	10120000 	.word	0x10120000
 8000fb0:	10310000 	.word	0x10310000
 8000fb4:	10320000 	.word	0x10320000
 8000fb8:	10220000 	.word	0x10220000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40011400 	.word	0x40011400
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4013      	ands	r3, r2
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43d9      	mvns	r1, r3
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	400b      	ands	r3, r1
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	611a      	str	r2, [r3, #16]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e26c      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8087 	beq.w	800116a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105c:	4b92      	ldr	r3, [pc, #584]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d00c      	beq.n	8001082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001068:	4b8f      	ldr	r3, [pc, #572]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d112      	bne.n	800109a <HAL_RCC_OscConfig+0x5e>
 8001074:	4b8c      	ldr	r3, [pc, #560]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001080:	d10b      	bne.n	800109a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4b89      	ldr	r3, [pc, #548]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d06c      	beq.n	8001168 <HAL_RCC_OscConfig+0x12c>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d168      	bne.n	8001168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e246      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x76>
 80010a4:	4b80      	ldr	r3, [pc, #512]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a7f      	ldr	r2, [pc, #508]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e02e      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x98>
 80010ba:	4b7b      	ldr	r3, [pc, #492]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7a      	ldr	r2, [pc, #488]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b78      	ldr	r3, [pc, #480]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a77      	ldr	r2, [pc, #476]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0xbc>
 80010de:	4b72      	ldr	r3, [pc, #456]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a71      	ldr	r2, [pc, #452]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6e      	ldr	r2, [pc, #440]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xd4>
 80010f8:	4b6b      	ldr	r3, [pc, #428]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6a      	ldr	r2, [pc, #424]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b68      	ldr	r3, [pc, #416]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a67      	ldr	r2, [pc, #412]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fc76 	bl	8000a08 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fc72 	bl	8000a08 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1fa      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xe4>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fc62 	bl	8000a08 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fc5e 	bl	8000a08 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1e6      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x10c>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x18c>
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x176>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1ba      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4939      	ldr	r1, [pc, #228]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e03a      	b.n	800123e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <HAL_RCC_OscConfig+0x270>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc17 	bl	8000a08 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fc13 	bl	8000a08 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e19b      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4927      	ldr	r1, [pc, #156]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_RCC_OscConfig+0x270>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fbf6 	bl	8000a08 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fbf2 	bl	8000a08 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e17a      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d03a      	beq.n	80012c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d019      	beq.n	8001286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fbd6 	bl	8000a08 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fbd2 	bl	8000a08 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e15a      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f000 fada 	bl	8001838 <RCC_Delay>
 8001284:	e01c      	b.n	80012c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fbbc 	bl	8000a08 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001292:	e00f      	b.n	80012b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fbb8 	bl	8000a08 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d908      	bls.n	80012b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e140      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	42420000 	.word	0x42420000
 80012b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	4b9e      	ldr	r3, [pc, #632]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e9      	bne.n	8001294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a6 	beq.w	800141a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b97      	ldr	r3, [pc, #604]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10d      	bne.n	80012fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b94      	ldr	r3, [pc, #592]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a93      	ldr	r2, [pc, #588]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b91      	ldr	r3, [pc, #580]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f6:	2301      	movs	r3, #1
 80012f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	4b8e      	ldr	r3, [pc, #568]	; (8001534 <HAL_RCC_OscConfig+0x4f8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d118      	bne.n	8001338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001306:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <HAL_RCC_OscConfig+0x4f8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a8a      	ldr	r2, [pc, #552]	; (8001534 <HAL_RCC_OscConfig+0x4f8>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001312:	f7ff fb79 	bl	8000a08 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff fb75 	bl	8000a08 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	; 0x64
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0fd      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	4b81      	ldr	r3, [pc, #516]	; (8001534 <HAL_RCC_OscConfig+0x4f8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x312>
 8001340:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a7a      	ldr	r2, [pc, #488]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	e02d      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x334>
 8001356:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4a75      	ldr	r2, [pc, #468]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6213      	str	r3, [r2, #32]
 8001362:	4b73      	ldr	r3, [pc, #460]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4a72      	ldr	r2, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	f023 0304 	bic.w	r3, r3, #4
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	e01c      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x356>
 8001378:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a6c      	ldr	r2, [pc, #432]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a69      	ldr	r2, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x36e>
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a66      	ldr	r2, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4b64      	ldr	r3, [pc, #400]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a63      	ldr	r2, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb29 	bl	8000a08 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb25 	bl	8000a08 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0ab      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0ee      	beq.n	80013ba <HAL_RCC_OscConfig+0x37e>
 80013dc:	e014      	b.n	8001408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb13 	bl	8000a08 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fb0f 	bl	8000a08 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e095      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ee      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d105      	bne.n	800141a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a47      	ldr	r2, [pc, #284]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8081 	beq.w	8001526 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001424:	4b42      	ldr	r3, [pc, #264]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b08      	cmp	r3, #8
 800142e:	d061      	beq.n	80014f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d146      	bne.n	80014c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x4fc>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fae3 	bl	8000a08 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff fadf 	bl	8000a08 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e067      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d108      	bne.n	8001480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	492d      	ldr	r1, [pc, #180]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a19      	ldr	r1, [r3, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	430b      	orrs	r3, r1
 8001492:	4927      	ldr	r1, [pc, #156]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x4fc>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fab3 	bl	8000a08 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff faaf 	bl	8000a08 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e037      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46a>
 80014c4:	e02f      	b.n	8001526 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_RCC_OscConfig+0x4fc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fa9c 	bl	8000a08 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fa98 	bl	8000a08 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e020      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x498>
 80014f2:	e018      	b.n	8001526 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e013      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	429a      	cmp	r2, r3
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	40007000 	.word	0x40007000
 8001538:	42420060 	.word	0x42420060

0800153c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0d0      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d910      	bls.n	8001580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b67      	ldr	r3, [pc, #412]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 0207 	bic.w	r2, r3, #7
 8001566:	4965      	ldr	r1, [pc, #404]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b8      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a58      	ldr	r2, [pc, #352]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	494d      	ldr	r1, [pc, #308]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d040      	beq.n	800165c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d115      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e073      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06b      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f023 0203 	bic.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4936      	ldr	r1, [pc, #216]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800162c:	f7ff f9ec 	bl	8000a08 <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff f9e8 	bl	8000a08 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e053      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 020c 	and.w	r2, r3, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	429a      	cmp	r2, r3
 800165a:	d1eb      	bne.n	8001634 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d210      	bcs.n	800168c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 0207 	bic.w	r2, r3, #7
 8001672:	4922      	ldr	r1, [pc, #136]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e032      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4916      	ldr	r1, [pc, #88]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	490e      	ldr	r1, [pc, #56]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ca:	f000 f821 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016ce:	4601      	mov	r1, r0
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	fa21 f303 	lsr.w	r3, r1, r3
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1cc>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x1d0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f94a 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000
 8001700:	40021000 	.word	0x40021000
 8001704:	08002acc 	.word	0x08002acc
 8001708:	20000000 	.word	0x20000000
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	b490      	push	{r4, r7}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001718:	1d3c      	adds	r4, r7, #4
 800171a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x40>
 800174a:	2b08      	cmp	r3, #8
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x46>
 800174e:	e02d      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001752:	623b      	str	r3, [r7, #32]
      break;
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001762:	4413      	add	r3, r2
 8001764:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001768:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0c5b      	lsrs	r3, r3, #17
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001782:	4413      	add	r3, r2
 8001784:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001788:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800178e:	fb02 f203 	mul.w	r2, r2, r3
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
 800179a:	e004      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	623b      	str	r3, [r7, #32]
      break;
 80017aa:	e002      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ae:	623b      	str	r3, [r7, #32]
      break;
 80017b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b2:	6a3b      	ldr	r3, [r7, #32]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc90      	pop	{r4, r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	08002ab8 	.word	0x08002ab8
 80017c4:	08002ac8 	.word	0x08002ac8
 80017c8:	40021000 	.word	0x40021000
 80017cc:	007a1200 	.word	0x007a1200
 80017d0:	003d0900 	.word	0x003d0900

080017d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000000 	.word	0x20000000

080017e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017ec:	f7ff fff2 	bl	80017d4 <HAL_RCC_GetHCLKFreq>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	08002adc 	.word	0x08002adc

08001810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001814:	f7ff ffde 	bl	80017d4 <HAL_RCC_GetHCLKFreq>
 8001818:	4601      	mov	r1, r0
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	0adb      	lsrs	r3, r3, #11
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	08002adc 	.word	0x08002adc

08001838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <RCC_Delay+0x34>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <RCC_Delay+0x38>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0a5b      	lsrs	r3, r3, #9
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001854:	bf00      	nop
  }
  while (Delay --);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	60fa      	str	r2, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <RCC_Delay+0x1c>
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000
 8001870:	10624dd3 	.word	0x10624dd3

08001874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e041      	b.n	800190a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7fe ff78 	bl	8000790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3304      	adds	r3, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f000 fa92 	bl	8001ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d001      	beq.n	800192c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e03a      	b.n	80019a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_TIM_Base_Start_IT+0x98>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00e      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x58>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001956:	d009      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x58>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x58>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d010      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198e:	e007      	b.n	80019a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40000800 	.word	0x40000800

080019b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6a1a      	ldr	r2, [r3, #32]
 80019d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <HAL_TIM_Base_Stop_IT+0x48>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a1a      	ldr	r2, [r3, #32]
 80019e6:	f240 4344 	movw	r3, #1092	; 0x444
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_TIM_Base_Stop_IT+0x48>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d122      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d11b      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0202 	mvn.w	r2, #2
 8001a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f9a4 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001a5c:	e005      	b.n	8001a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f997 	bl	8001d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f9a6 	bl	8001db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d122      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0204 	mvn.w	r2, #4
 8001a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f97a 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001ab0:	e005      	b.n	8001abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f96d 	bl	8001d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f97c 	bl	8001db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d122      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d11b      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0208 	mvn.w	r2, #8
 8001ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f950 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001b04:	e005      	b.n	8001b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f943 	bl	8001d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f952 	bl	8001db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d122      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d11b      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0210 	mvn.w	r2, #16
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2208      	movs	r2, #8
 8001b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f926 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001b58:	e005      	b.n	8001b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f919 	bl	8001d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f928 	bl	8001db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d10e      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0201 	mvn.w	r2, #1
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fd8a 	bl	80006ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba2:	2b80      	cmp	r3, #128	; 0x80
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb0:	2b80      	cmp	r3, #128	; 0x80
 8001bb2:	d107      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fa6b 	bl	800209a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d107      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8ec 	bl	8001dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d107      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0220 	mvn.w	r2, #32
 8001c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fa36 	bl	8002088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_TIM_ConfigClockSource+0x18>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e0a6      	b.n	8001d8a <HAL_TIM_ConfigClockSource+0x166>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b40      	cmp	r3, #64	; 0x40
 8001c72:	d067      	beq.n	8001d44 <HAL_TIM_ConfigClockSource+0x120>
 8001c74:	2b40      	cmp	r3, #64	; 0x40
 8001c76:	d80b      	bhi.n	8001c90 <HAL_TIM_ConfigClockSource+0x6c>
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d073      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x140>
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d802      	bhi.n	8001c86 <HAL_TIM_ConfigClockSource+0x62>
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d06f      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001c84:	e078      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d06c      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x140>
 8001c8a:	2b30      	cmp	r3, #48	; 0x30
 8001c8c:	d06a      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001c8e:	e073      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c90:	2b70      	cmp	r3, #112	; 0x70
 8001c92:	d00d      	beq.n	8001cb0 <HAL_TIM_ConfigClockSource+0x8c>
 8001c94:	2b70      	cmp	r3, #112	; 0x70
 8001c96:	d804      	bhi.n	8001ca2 <HAL_TIM_ConfigClockSource+0x7e>
 8001c98:	2b50      	cmp	r3, #80	; 0x50
 8001c9a:	d033      	beq.n	8001d04 <HAL_TIM_ConfigClockSource+0xe0>
 8001c9c:	2b60      	cmp	r3, #96	; 0x60
 8001c9e:	d041      	beq.n	8001d24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001ca0:	e06a      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca6:	d066      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x152>
 8001ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cac:	d017      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001cae:	e063      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6899      	ldr	r1, [r3, #8]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f000 f965 	bl	8001f8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	609a      	str	r2, [r3, #8]
      break;
 8001cdc:	e04c      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f000 f94e 	bl	8001f8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d00:	609a      	str	r2, [r3, #8]
      break;
 8001d02:	e039      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	461a      	mov	r2, r3
 8001d12:	f000 f8c5 	bl	8001ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2150      	movs	r1, #80	; 0x50
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f91c 	bl	8001f5a <TIM_ITRx_SetConfig>
      break;
 8001d22:	e029      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	461a      	mov	r2, r3
 8001d32:	f000 f8e3 	bl	8001efc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2160      	movs	r1, #96	; 0x60
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f90c 	bl	8001f5a <TIM_ITRx_SetConfig>
      break;
 8001d42:	e019      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f000 f8a5 	bl	8001ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2140      	movs	r1, #64	; 0x40
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f8fc 	bl	8001f5a <TIM_ITRx_SetConfig>
      break;
 8001d62:	e009      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 f8f3 	bl	8001f5a <TIM_ITRx_SetConfig>
        break;
 8001d74:	e000      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
	...

08001ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <TIM_Base_SetConfig+0xb8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00b      	beq.n	8001e0c <TIM_Base_SetConfig+0x30>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfa:	d007      	beq.n	8001e0c <TIM_Base_SetConfig+0x30>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <TIM_Base_SetConfig+0xbc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d003      	beq.n	8001e0c <TIM_Base_SetConfig+0x30>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <TIM_Base_SetConfig+0xc0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d108      	bne.n	8001e1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <TIM_Base_SetConfig+0xb8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00b      	beq.n	8001e3e <TIM_Base_SetConfig+0x62>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d007      	beq.n	8001e3e <TIM_Base_SetConfig+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <TIM_Base_SetConfig+0xbc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d003      	beq.n	8001e3e <TIM_Base_SetConfig+0x62>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <TIM_Base_SetConfig+0xc0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d108      	bne.n	8001e50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <TIM_Base_SetConfig+0xb8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d103      	bne.n	8001e84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	615a      	str	r2, [r3, #20]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800

08001ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f023 0201 	bic.w	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f023 030a 	bic.w	r3, r3, #10
 8001edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	621a      	str	r2, [r3, #32]
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f023 0210 	bic.w	r2, r3, #16
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	031b      	lsls	r3, r3, #12
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	621a      	str	r2, [r3, #32]
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f043 0307 	orr.w	r3, r3, #7
 8001f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	609a      	str	r2, [r3, #8]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b087      	sub	sp, #28
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	021a      	lsls	r2, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	609a      	str	r2, [r3, #8]
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e046      	b.n	8002072 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00e      	beq.n	8002046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d009      	beq.n	8002046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10c      	bne.n	8002060 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800204c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800

08002088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e03f      	b.n	800213e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fb82 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fc1b 	bl	800292c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b08a      	sub	sp, #40	; 0x28
 800214a:	af02      	add	r7, sp, #8
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	d17c      	bne.n	8002260 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_UART_Transmit+0x2c>
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e075      	b.n	8002262 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_UART_Transmit+0x3e>
 8002180:	2302      	movs	r3, #2
 8002182:	e06e      	b.n	8002262 <HAL_UART_Transmit+0x11c>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2221      	movs	r2, #33	; 0x21
 8002196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800219a:	f7fe fc35 	bl	8000a08 <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b4:	d108      	bne.n	80021c8 <HAL_UART_Transmit+0x82>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d104      	bne.n	80021c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	e003      	b.n	80021d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80021d8:	e02a      	b.n	8002230 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2200      	movs	r2, #0
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fa3e 	bl	8002666 <UART_WaitOnFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e036      	b.n	8002262 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10b      	bne.n	8002212 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	3302      	adds	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	e007      	b.n	8002222 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3301      	adds	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1cf      	bne.n	80021da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2200      	movs	r2, #0
 8002242:	2140      	movs	r1, #64	; 0x40
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fa0e 	bl	8002666 <UART_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e006      	b.n	8002262 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08a      	sub	sp, #40	; 0x28
 800226e:	af02      	add	r7, sp, #8
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	f040 8089 	bne.w	800239e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_UART_Receive+0x2e>
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e081      	b.n	80023a0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Receive+0x40>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e07a      	b.n	80023a0 <HAL_UART_Receive+0x136>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2222      	movs	r2, #34	; 0x22
 80022bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fba2 	bl	8000a08 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022da:	d108      	bne.n	80022ee <HAL_UART_Receive+0x84>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	e003      	b.n	80022f6 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80022fe:	e043      	b.n	8002388 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	2120      	movs	r1, #32
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f9ab 	bl	8002666 <UART_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e042      	b.n	80023a0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10c      	bne.n	800233a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	b29b      	uxth	r3, r3
 8002328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232c:	b29a      	uxth	r2, r3
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	3302      	adds	r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e01f      	b.n	800237a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002342:	d007      	beq.n	8002354 <HAL_UART_Receive+0xea>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_UART_Receive+0xf8>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e008      	b.n	8002374 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800236e:	b2da      	uxtb	r2, r3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3301      	adds	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1b6      	bne.n	8002300 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d130      	bne.n	8002424 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_UART_Transmit_IT+0x26>
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e029      	b.n	8002426 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_UART_Transmit_IT+0x38>
 80023dc:	2302      	movs	r3, #2
 80023de:	e022      	b.n	8002426 <HAL_UART_Transmit_IT+0x7e>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2221      	movs	r2, #33	; 0x21
 8002404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_UART_IRQHandler+0x52>
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f9d5 	bl	800282a <UART_Receive_IT>
      return;
 8002480:	e0d1      	b.n	8002626 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80b0 	beq.w	80025ea <HAL_UART_IRQHandler+0x1ba>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_UART_IRQHandler+0x70>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a5 	beq.w	80025ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_UART_IRQHandler+0x90>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_UART_IRQHandler+0xb0>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	f043 0202 	orr.w	r2, r3, #2
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_UART_IRQHandler+0xd0>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00f      	beq.n	800252a <HAL_UART_IRQHandler+0xfa>
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d104      	bne.n	800251e <HAL_UART_IRQHandler+0xee>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	f043 0208 	orr.w	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d078      	beq.n	8002624 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_UART_IRQHandler+0x11c>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f96f 	bl	800282a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf14      	ite	ne
 800255a:	2301      	movne	r3, #1
 800255c:	2300      	moveq	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_UART_IRQHandler+0x144>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d031      	beq.n	80025d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f8c0 	bl	80026fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002596:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <HAL_UART_IRQHandler+0x1fc>)
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fb43 	bl	8000c38 <HAL_DMA_Abort_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d016      	beq.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025c2:	4610      	mov	r0, r2
 80025c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c6:	e00e      	b.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f843 	bl	8002654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ce:	e00a      	b.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f83f 	bl	8002654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d6:	e006      	b.n	80025e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f83b 	bl	8002654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025e4:	e01e      	b.n	8002624 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e6:	bf00      	nop
    return;
 80025e8:	e01c      	b.n	8002624 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_UART_IRQHandler+0x1d6>
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8ac 	bl	800275c <UART_Transmit_IT>
    return;
 8002604:	e00f      	b.n	8002626 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_UART_IRQHandler+0x1f6>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8ed 	bl	80027fa <UART_EndTransmit_IT>
    return;
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002624:	bf00      	nop
  }
}
 8002626:	3720      	adds	r7, #32
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	08002735 	.word	0x08002735

08002630 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002676:	e02c      	b.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d028      	beq.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <UART_WaitOnFlagUntilTimeout+0x30>
 8002686:	f7fe f9bf 	bl	8000a08 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	429a      	cmp	r2, r3
 8002694:	d21d      	bcs.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e00f      	b.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4013      	ands	r3, r2
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	429a      	cmp	r2, r3
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d0c3      	beq.n	8002678 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002710:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff ff80 	bl	8002654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b21      	cmp	r3, #33	; 0x21
 800276e:	d13e      	bne.n	80027ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002778:	d114      	bne.n	80027a4 <UART_Transmit_IT+0x48>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d110      	bne.n	80027a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002796:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	1c9a      	adds	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	621a      	str	r2, [r3, #32]
 80027a2:	e008      	b.n	80027b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6211      	str	r1, [r2, #32]
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29b      	uxth	r3, r3
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4619      	mov	r1, r3
 80027c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e000      	b.n	80027f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ff08 	bl	8002630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b22      	cmp	r3, #34	; 0x22
 800283c:	d170      	bne.n	8002920 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002846:	d117      	bne.n	8002878 <UART_Receive_IT+0x4e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d113      	bne.n	8002878 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002866:	b29a      	uxth	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	1c9a      	adds	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
 8002876:	e026      	b.n	80028c6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d007      	beq.n	800289c <UART_Receive_IT+0x72>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <UART_Receive_IT+0x80>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e008      	b.n	80028bc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4619      	mov	r1, r3
 80028d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d120      	bne.n	800291c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0220 	bic.w	r2, r2, #32
 80028e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fe95 	bl	8002642 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e002      	b.n	8002922 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002966:	f023 030c 	bic.w	r3, r3, #12
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	430b      	orrs	r3, r1
 8002972:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <UART_SetConfig+0x114>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d103      	bne.n	800299c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002994:	f7fe ff3c 	bl	8001810 <HAL_RCC_GetPCLK2Freq>
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	e002      	b.n	80029a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800299c:	f7fe ff24 	bl	80017e8 <HAL_RCC_GetPCLK1Freq>
 80029a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <UART_SetConfig+0x118>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	0119      	lsls	r1, r3, #4
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <UART_SetConfig+0x118>)
 80029da:	fba3 0302 	umull	r0, r3, r3, r2
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2064      	movs	r0, #100	; 0x64
 80029e2:	fb00 f303 	mul.w	r3, r0, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	3332      	adds	r3, #50	; 0x32
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <UART_SetConfig+0x118>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	4419      	add	r1, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009a      	lsls	r2, r3, #2
 8002a04:	441a      	add	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <UART_SetConfig+0x118>)
 8002a12:	fba3 0302 	umull	r0, r3, r3, r2
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2064      	movs	r0, #100	; 0x64
 8002a1a:	fb00 f303 	mul.w	r3, r0, r3
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	3332      	adds	r3, #50	; 0x32
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <UART_SetConfig+0x118>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	f003 020f 	and.w	r2, r3, #15
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	440a      	add	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40013800 	.word	0x40013800
 8002a44:	51eb851f 	.word	0x51eb851f

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2500      	movs	r5, #0
 8002a4c:	4e0c      	ldr	r6, [pc, #48]	; (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1ba4      	subs	r4, r4, r6
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a5      	cmp	r5, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	f000 f822 	bl	8002aa0 <_init>
 8002a5c:	2500      	movs	r5, #0
 8002a5e:	4e0a      	ldr	r6, [pc, #40]	; (8002a88 <__libc_init_array+0x40>)
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x44>)
 8002a62:	1ba4      	subs	r4, r4, r6
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a5      	cmp	r5, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a70:	4798      	blx	r3
 8002a72:	3501      	adds	r5, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a7a:	4798      	blx	r3
 8002a7c:	3501      	adds	r5, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	08002ae4 	.word	0x08002ae4
 8002a84:	08002ae4 	.word	0x08002ae4
 8002a88:	08002ae4 	.word	0x08002ae4
 8002a8c:	08002ae8 	.word	0x08002ae8

08002a90 <memset>:
 8002a90:	4603      	mov	r3, r0
 8002a92:	4402      	add	r2, r0
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d100      	bne.n	8002a9a <memset+0xa>
 8002a98:	4770      	bx	lr
 8002a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9e:	e7f9      	b.n	8002a94 <memset+0x4>

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
