
central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001fb8  08001fb8  00011fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe4  08001fe4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fe4  08001fe4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fe4  08001fe4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe4  08001fe4  00011fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001ff8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001ff8  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056fb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012f9  00000000  00000000  00025730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  00026a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000598  00000000  00000000  00027070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e5f  00000000  00000000  00027608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005778  00000000  00000000  0003d467  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dce6  00000000  00000000  00042bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c08c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001800  00000000  00000000  000c0940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fa0 	.word	0x08001fa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001fa0 	.word	0x08001fa0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fab7 	bl	80006c4 <HAL_Init>
  /* USER CODE BEGIN Init */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f919 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f987 	bl	800046c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f95b 	bl	8000418 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	eSystemState NextState;
	uint8_t RSSI_value[3];
	uint8_t estado_inhi[3];
	uint8_t cRx = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	75bb      	strb	r3, [r7, #22]
	bool bPresencia_Inhibi;
	char in[3] = {0, 0, 0};
 8000166:	2300      	movs	r3, #0
 8000168:	723b      	strb	r3, [r7, #8]
 800016a:	2300      	movs	r3, #0
 800016c:	727b      	strb	r3, [r7, #9]
 800016e:	2300      	movs	r3, #0
 8000170:	72bb      	strb	r3, [r7, #10]
	char ch[3] = {0, 0, 0};
 8000172:	2300      	movs	r3, #0
 8000174:	713b      	strb	r3, [r7, #4]
 8000176:	2300      	movs	r3, #0
 8000178:	717b      	strb	r3, [r7, #5]
 800017a:	2300      	movs	r3, #0
 800017c:	71bb      	strb	r3, [r7, #6]


	NextState = RxNodos_State;
 800017e:	2300      	movs	r3, #0
 8000180:	75fb      	strb	r3, [r7, #23]
	bPresencia_Inhibi = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // DE - Comunicacion RS485 - Se coloca en bajo para estar en modo recepcion
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	487d      	ldr	r0, [pc, #500]	; (8000384 <main+0x238>)
 800018e:	f000 fdd9 	bl	8000d44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // RE - Comunicacion RS485 - Se coloca en bajo para escuchar todo el tiempoc
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000198:	487a      	ldr	r0, [pc, #488]	; (8000384 <main+0x238>)
 800019a:	f000 fdd3 	bl	8000d44 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Maquina de estados para comunicacion
	  switch(NextState){
 800019e:	7dfb      	ldrb	r3, [r7, #23]
 80001a0:	2b03      	cmp	r3, #3
 80001a2:	f200 80d3 	bhi.w	800034c <main+0x200>
 80001a6:	a201      	add	r2, pc, #4	; (adr r2, 80001ac <main+0x60>)
 80001a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ac:	080001bd 	.word	0x080001bd
 80001b0:	080001f3 	.word	0x080001f3
 80001b4:	0800022d 	.word	0x0800022d
 80001b8:	0800031b 	.word	0x0800031b
		  case RxNodos_State:
			  in[0] = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	723b      	strb	r3, [r7, #8]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c6:	486f      	ldr	r0, [pc, #444]	; (8000384 <main+0x238>)
 80001c8:	f000 fdbc 	bl	8000d44 <HAL_GPIO_WritePin>
			  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1000);
 80001cc:	f107 0108 	add.w	r1, r7, #8
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	2201      	movs	r2, #1
 80001d6:	486c      	ldr	r0, [pc, #432]	; (8000388 <main+0x23c>)
 80001d8:	f001 fac7 	bl	800176a <HAL_UART_Receive>

			  if(in[0] != 0){
 80001dc:	7a3b      	ldrb	r3, [r7, #8]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d004      	beq.n	80001ec <main+0xa0>
				  bPresencia_Inhibi = 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	757b      	strb	r3, [r7, #21]
				  NextState = Captura_Inhibicion_Tx_State;
 80001e6:	2301      	movs	r3, #1
 80001e8:	75fb      	strb	r3, [r7, #23]
	  	  	  }
			  else
				  NextState = RxNodos_State;

			  break;
 80001ea:	e0c9      	b.n	8000380 <main+0x234>
				  NextState = RxNodos_State;
 80001ec:	2300      	movs	r3, #0
 80001ee:	75fb      	strb	r3, [r7, #23]
			  break;
 80001f0:	e0c6      	b.n	8000380 <main+0x234>

		  case Captura_Inhibicion_Tx_State:
			  ch[0] = 'G';
 80001f2:	2347      	movs	r3, #71	; 0x47
 80001f4:	713b      	strb	r3, [r7, #4]
			  // Pone en modo tx
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	4861      	ldr	r0, [pc, #388]	; (8000384 <main+0x238>)
 80001fe:	f000 fda1 	bl	8000d44 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, 1); //Definir palabra a enviar para que todos los nodos escuchen y guarden rssi y estado
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2201      	movs	r2, #1
 8000206:	4619      	mov	r1, r3
 8000208:	485f      	ldr	r0, [pc, #380]	; (8000388 <main+0x23c>)
 800020a:	f001 fb4d 	bl	80018a8 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1);
 800020e:	f107 0108 	add.w	r1, r7, #8
 8000212:	2301      	movs	r3, #1
 8000214:	2201      	movs	r2, #1
 8000216:	485c      	ldr	r0, [pc, #368]	; (8000388 <main+0x23c>)
 8000218:	f001 faa7 	bl	800176a <HAL_UART_Receive>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000222:	4858      	ldr	r0, [pc, #352]	; (8000384 <main+0x238>)
 8000224:	f000 fd8e 	bl	8000d44 <HAL_GPIO_WritePin>

			  NextState = Espera_Estados_Rx_State;
 8000228:	2302      	movs	r3, #2
 800022a:	75fb      	strb	r3, [r7, #23]

		  case Espera_Estados_Rx_State:

			  if 	  (cRx == 0) ch[0] = 'a';
 800022c:	7dbb      	ldrb	r3, [r7, #22]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d102      	bne.n	8000238 <main+0xec>
 8000232:	2361      	movs	r3, #97	; 0x61
 8000234:	713b      	strb	r3, [r7, #4]
 8000236:	e00a      	b.n	800024e <main+0x102>
			  else if (cRx == 1) ch[0] = 'b';
 8000238:	7dbb      	ldrb	r3, [r7, #22]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d102      	bne.n	8000244 <main+0xf8>
 800023e:	2362      	movs	r3, #98	; 0x62
 8000240:	713b      	strb	r3, [r7, #4]
 8000242:	e004      	b.n	800024e <main+0x102>
			  else if (cRx == 2) ch[0] = 'c';
 8000244:	7dbb      	ldrb	r3, [r7, #22]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d101      	bne.n	800024e <main+0x102>
 800024a:	2363      	movs	r3, #99	; 0x63
 800024c:	713b      	strb	r3, [r7, #4]

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000254:	484b      	ldr	r0, [pc, #300]	; (8000384 <main+0x238>)
 8000256:	f000 fd75 	bl	8000d44 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, 1);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2201      	movs	r2, #1
 800025e:	4619      	mov	r1, r3
 8000260:	4849      	ldr	r0, [pc, #292]	; (8000388 <main+0x23c>)
 8000262:	f001 fb21 	bl	80018a8 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1);
 8000266:	f107 0108 	add.w	r1, r7, #8
 800026a:	2301      	movs	r3, #1
 800026c:	2201      	movs	r2, #1
 800026e:	4846      	ldr	r0, [pc, #280]	; (8000388 <main+0x23c>)
 8000270:	f001 fa7b 	bl	800176a <HAL_UART_Receive>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027a:	4842      	ldr	r0, [pc, #264]	; (8000384 <main+0x238>)
 800027c:	f000 fd62 	bl	8000d44 <HAL_GPIO_WritePin>

			  HAL_UART_Receive(&huart1, (uint8_t *)in, 3, 1000);
 8000280:	f107 0108 	add.w	r1, r7, #8
 8000284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000288:	2203      	movs	r2, #3
 800028a:	483f      	ldr	r0, [pc, #252]	; (8000388 <main+0x23c>)
 800028c:	f001 fa6d 	bl	800176a <HAL_UART_Receive>
			  if(in[0] == 'A'){
 8000290:	7a3b      	ldrb	r3, [r7, #8]
 8000292:	2b41      	cmp	r3, #65	; 0x41
 8000294:	d107      	bne.n	80002a6 <main+0x15a>
				  RSSI_value[0] = in[1];
 8000296:	7a7b      	ldrb	r3, [r7, #9]
 8000298:	743b      	strb	r3, [r7, #16]
				  estado_inhi[0] = in[2];
 800029a:	7abb      	ldrb	r3, [r7, #10]
 800029c:	733b      	strb	r3, [r7, #12]
				  cRx++;
 800029e:	7dbb      	ldrb	r3, [r7, #22]
 80002a0:	3301      	adds	r3, #1
 80002a2:	75bb      	strb	r3, [r7, #22]
 80002a4:	e014      	b.n	80002d0 <main+0x184>
			  }
			  else if(in[0] == 'B'){
 80002a6:	7a3b      	ldrb	r3, [r7, #8]
 80002a8:	2b42      	cmp	r3, #66	; 0x42
 80002aa:	d107      	bne.n	80002bc <main+0x170>
				  RSSI_value[1] = in[1];
 80002ac:	7a7b      	ldrb	r3, [r7, #9]
 80002ae:	747b      	strb	r3, [r7, #17]
				  estado_inhi[1] = in[2];
 80002b0:	7abb      	ldrb	r3, [r7, #10]
 80002b2:	737b      	strb	r3, [r7, #13]
				  cRx++;
 80002b4:	7dbb      	ldrb	r3, [r7, #22]
 80002b6:	3301      	adds	r3, #1
 80002b8:	75bb      	strb	r3, [r7, #22]
 80002ba:	e009      	b.n	80002d0 <main+0x184>
			  }
			  else if(in[0] == 'C'){
 80002bc:	7a3b      	ldrb	r3, [r7, #8]
 80002be:	2b43      	cmp	r3, #67	; 0x43
 80002c0:	d106      	bne.n	80002d0 <main+0x184>
				  RSSI_value[2] = in[1];
 80002c2:	7a7b      	ldrb	r3, [r7, #9]
 80002c4:	74bb      	strb	r3, [r7, #18]
				  estado_inhi[2] = in[2];
 80002c6:	7abb      	ldrb	r3, [r7, #10]
 80002c8:	73bb      	strb	r3, [r7, #14]
				  cRx++;
 80002ca:	7dbb      	ldrb	r3, [r7, #22]
 80002cc:	3301      	adds	r3, #1
 80002ce:	75bb      	strb	r3, [r7, #22]
			  }

			  if(cRx == 3){
 80002d0:	7dbb      	ldrb	r3, [r7, #22]
 80002d2:	2b03      	cmp	r3, #3
 80002d4:	d153      	bne.n	800037e <main+0x232>

				  cRx = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	75bb      	strb	r3, [r7, #22]
				  ch[0] = 'F';
 80002da:	2346      	movs	r3, #70	; 0x46
 80002dc:	713b      	strb	r3, [r7, #4]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80002de:	2201      	movs	r2, #1
 80002e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e4:	4827      	ldr	r0, [pc, #156]	; (8000384 <main+0x238>)
 80002e6:	f000 fd2d 	bl	8000d44 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, 1);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	4825      	ldr	r0, [pc, #148]	; (8000388 <main+0x23c>)
 80002f2:	f001 fad9 	bl	80018a8 <HAL_UART_Transmit_IT>
				  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1);
 80002f6:	f107 0108 	add.w	r1, r7, #8
 80002fa:	2301      	movs	r3, #1
 80002fc:	2201      	movs	r2, #1
 80002fe:	4822      	ldr	r0, [pc, #136]	; (8000388 <main+0x23c>)
 8000300:	f001 fa33 	bl	800176a <HAL_UART_Receive>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030a:	481e      	ldr	r0, [pc, #120]	; (8000384 <main+0x238>)
 800030c:	f000 fd1a 	bl	8000d44 <HAL_GPIO_WritePin>

				  bPresencia_Inhibi = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	757b      	strb	r3, [r7, #21]
				  NextState = RxNodos_State;
 8000314:	2300      	movs	r3, #0
 8000316:	75fb      	strb	r3, [r7, #23]

			  }


			  break;
 8000318:	e031      	b.n	800037e <main+0x232>
		  case Reset_Tx_State:
			  ch[0] = 'F';
 800031a:	2346      	movs	r3, #70	; 0x46
 800031c:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <main+0x238>)
 8000326:	f000 fd0d 	bl	8000d44 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800032a:	1d39      	adds	r1, r7, #4
 800032c:	230a      	movs	r3, #10
 800032e:	2201      	movs	r2, #1
 8000330:	4815      	ldr	r0, [pc, #84]	; (8000388 <main+0x23c>)
 8000332:	f001 f988 	bl	8001646 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033c:	4811      	ldr	r0, [pc, #68]	; (8000384 <main+0x238>)
 800033e:	f000 fd01 	bl	8000d44 <HAL_GPIO_WritePin>

			  bPresencia_Inhibi = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	757b      	strb	r3, [r7, #21]
			  NextState = RxNodos_State;
 8000346:	2300      	movs	r3, #0
 8000348:	75fb      	strb	r3, [r7, #23]

			  break;
 800034a:	e019      	b.n	8000380 <main+0x234>
		  default:
			  ch[0] = 'F';
 800034c:	2346      	movs	r3, #70	; 0x46
 800034e:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000356:	480b      	ldr	r0, [pc, #44]	; (8000384 <main+0x238>)
 8000358:	f000 fcf4 	bl	8000d44 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800035c:	1d39      	adds	r1, r7, #4
 800035e:	230a      	movs	r3, #10
 8000360:	2201      	movs	r2, #1
 8000362:	4809      	ldr	r0, [pc, #36]	; (8000388 <main+0x23c>)
 8000364:	f001 f96f 	bl	8001646 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <main+0x238>)
 8000370:	f000 fce8 	bl	8000d44 <HAL_GPIO_WritePin>

			  bPresencia_Inhibi = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	757b      	strb	r3, [r7, #21]
			  NextState = RxNodos_State;
 8000378:	2300      	movs	r3, #0
 800037a:	75fb      	strb	r3, [r7, #23]
			  break;
 800037c:	e000      	b.n	8000380 <main+0x234>
			  break;
 800037e:	bf00      	nop
	  switch(NextState){
 8000380:	e70d      	b.n	800019e <main+0x52>
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800
 8000388:	20000028 	.word	0x20000028

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fdf8 	bl	8001f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d0:	f107 0318 	add.w	r3, r7, #24
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 fccd 	bl	8000d74 <HAL_RCC_OscConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e0:	f000 f884 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e4:	230f      	movs	r3, #15
 80003e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	2302      	movs	r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2102      	movs	r1, #2
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 ff38 	bl	8001274 <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040a:	f000 f86f 	bl	80004ec <Error_Handler>
  }
}
 800040e:	bf00      	nop
 8000410:	3740      	adds	r7, #64	; 0x40
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <MX_USART1_UART_Init+0x50>)
 8000420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 8000424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 8000438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800043c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 8000440:	220c      	movs	r2, #12
 8000442:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_USART1_UART_Init+0x4c>)
 8000452:	f001 f8ab 	bl	80015ac <HAL_UART_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800045c:	f000 f846 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000028 	.word	0x20000028
 8000468:	40013800 	.word	0x40013800

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_GPIO_Init+0x78>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <MX_GPIO_Init+0x78>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_GPIO_Init+0x78>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0320 	and.w	r3, r3, #32
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_GPIO_Init+0x78>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a11      	ldr	r2, [pc, #68]	; (80004e4 <MX_GPIO_Init+0x78>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_GPIO_Init+0x78>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80004b6:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_GPIO_Init+0x7c>)
 80004b8:	f000 fc44 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80004bc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80004c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004c6:	2302      	movs	r3, #2
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_GPIO_Init+0x7c>)
 80004d6:	f000 fadb 	bl	8000a90 <HAL_GPIO_Init>

}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_MspInit+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x5c>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x60>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_MspInit+0x60>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <HAL_UART_MspInit+0x9c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d139      	bne.n	80005f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <HAL_UART_MspInit+0xa0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <HAL_UART_MspInit+0xa0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <HAL_UART_MspInit+0xa0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <HAL_UART_MspInit+0xa0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a18      	ldr	r2, [pc, #96]	; (80005fc <HAL_UART_MspInit+0xa0>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <HAL_UART_MspInit+0xa0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <HAL_UART_MspInit+0xa4>)
 80005c2:	f000 fa65 	bl	8000a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <HAL_UART_MspInit+0xa4>)
 80005dc:	f000 fa58 	bl	8000a90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	2025      	movs	r0, #37	; 0x25
 80005e6:	f000 f9a6 	bl	8000936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005ea:	2025      	movs	r0, #37	; 0x25
 80005ec:	f000 f9bf 	bl	800096e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013800 	.word	0x40013800
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <HardFault_Handler+0x4>

08000616 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <MemManage_Handler+0x4>

0800061c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <BusFault_Handler+0x4>

08000622 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <UsageFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000650:	f000 f87e 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <USART1_IRQHandler+0x10>)
 800065e:	f001 f967 	bl	8001930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028

0800066c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000678:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800067a:	e003      	b.n	8000684 <LoopCopyDataInit>

0800067c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800067e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000680:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000682:	3104      	adds	r1, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000688:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800068a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800068c:	d3f6      	bcc.n	800067c <CopyDataInit>
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000690:	e002      	b.n	8000698 <LoopFillZerobss>

08000692 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000694:	f842 3b04 	str.w	r3, [r2], #4

08000698 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800069c:	d3f9      	bcc.n	8000692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069e:	f7ff ffe5 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f001 fc51 	bl	8001f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fd51 	bl	800014c <main>
  bx lr
 80006aa:	4770      	bx	lr
  ldr r3, =_sidata
 80006ac:	08001fec 	.word	0x08001fec
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006b8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006bc:	2000006c 	.word	0x2000006c

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_Init+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_Init+0x28>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 f923 	bl	8000920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f808 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff ff0a 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x54>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f93b 	bl	800098a <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e00e      	b.n	800073c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d80a      	bhi.n	800073a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f000 f903 	bl	8000936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_InitTick+0x5c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008
 8000770:	20000068 	.word	0x20000068

08000774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000068 	.word	0x20000068

08000788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ba:	4a04      	ldr	r2, [pc, #16]	; (80007cc <__NVIC_SetPriorityGrouping+0x44>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	60d3      	str	r3, [r2, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <__NVIC_GetPriorityGrouping+0x18>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	f003 0307 	and.w	r3, r3, #7
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	db0b      	blt.n	8000816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f003 021f 	and.w	r2, r3, #31
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <__NVIC_EnableIRQ+0x34>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	095b      	lsrs	r3, r3, #5
 800080c:	2001      	movs	r0, #1
 800080e:	fa00 f202 	lsl.w	r2, r0, r2
 8000812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0a      	blt.n	800084e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	490c      	ldr	r1, [pc, #48]	; (8000870 <__NVIC_SetPriority+0x4c>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084c:	e00a      	b.n	8000864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <__NVIC_SetPriority+0x50>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	3b04      	subs	r3, #4
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	440b      	add	r3, r1
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f1c3 0307 	rsb	r3, r3, #7
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf28      	it	cs
 8000896:	2304      	movcs	r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3304      	adds	r3, #4
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d902      	bls.n	80008a8 <NVIC_EncodePriority+0x30>
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3b03      	subs	r3, #3
 80008a6:	e000      	b.n	80008aa <NVIC_EncodePriority+0x32>
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43da      	mvns	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43d9      	mvns	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	4313      	orrs	r3, r2
         );
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3724      	adds	r7, #36	; 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008ec:	d301      	bcc.n	80008f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00f      	b.n	8000912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <SysTick_Config+0x40>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fa:	210f      	movs	r1, #15
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f7ff ff90 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <SysTick_Config+0x40>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <SysTick_Config+0x40>)
 800090c:	2207      	movs	r2, #7
 800090e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	e000e010 	.word	0xe000e010

08000920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff2d 	bl	8000788 <__NVIC_SetPriorityGrouping>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000948:	f7ff ff42 	bl	80007d0 <__NVIC_GetPriorityGrouping>
 800094c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	68b9      	ldr	r1, [r7, #8]
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f7ff ff90 	bl	8000878 <NVIC_EncodePriority>
 8000958:	4602      	mov	r2, r0
 800095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff5f 	bl	8000824 <__NVIC_SetPriority>
}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff35 	bl	80007ec <__NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffa2 	bl	80008dc <SysTick_Config>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d005      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2204      	movs	r2, #4
 80009be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e051      	b.n	8000a6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f022 020e 	bic.w	r2, r2, #14
 80009d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0201 	bic.w	r2, r2, #1
 80009e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <HAL_DMA_Abort_IT+0xd0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d029      	beq.n	8000a44 <HAL_DMA_Abort_IT+0xa0>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <HAL_DMA_Abort_IT+0xd4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d022      	beq.n	8000a40 <HAL_DMA_Abort_IT+0x9c>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <HAL_DMA_Abort_IT+0xd8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d01a      	beq.n	8000a3a <HAL_DMA_Abort_IT+0x96>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_DMA_Abort_IT+0xdc>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d012      	beq.n	8000a34 <HAL_DMA_Abort_IT+0x90>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <HAL_DMA_Abort_IT+0xe0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d00a      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x8a>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <HAL_DMA_Abort_IT+0xe4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d102      	bne.n	8000a28 <HAL_DMA_Abort_IT+0x84>
 8000a22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a26:	e00e      	b.n	8000a46 <HAL_DMA_Abort_IT+0xa2>
 8000a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a2c:	e00b      	b.n	8000a46 <HAL_DMA_Abort_IT+0xa2>
 8000a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a32:	e008      	b.n	8000a46 <HAL_DMA_Abort_IT+0xa2>
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	e005      	b.n	8000a46 <HAL_DMA_Abort_IT+0xa2>
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	e002      	b.n	8000a46 <HAL_DMA_Abort_IT+0xa2>
 8000a40:	2310      	movs	r3, #16
 8000a42:	e000      	b.n	8000a46 <HAL_DMA_Abort_IT+0xa2>
 8000a44:	2301      	movs	r3, #1
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_DMA_Abort_IT+0xe8>)
 8000a48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	4798      	blx	r3
    } 
  }
  return status;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40020008 	.word	0x40020008
 8000a78:	4002001c 	.word	0x4002001c
 8000a7c:	40020030 	.word	0x40020030
 8000a80:	40020044 	.word	0x40020044
 8000a84:	40020058 	.word	0x40020058
 8000a88:	4002006c 	.word	0x4002006c
 8000a8c:	40020000 	.word	0x40020000

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b08b      	sub	sp, #44	; 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e127      	b.n	8000cf4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 8116 	bne.w	8000cee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d034      	beq.n	8000b34 <HAL_GPIO_Init+0xa4>
 8000aca:	2b12      	cmp	r3, #18
 8000acc:	d80d      	bhi.n	8000aea <HAL_GPIO_Init+0x5a>
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d02b      	beq.n	8000b2a <HAL_GPIO_Init+0x9a>
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d804      	bhi.n	8000ae0 <HAL_GPIO_Init+0x50>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d031      	beq.n	8000b3e <HAL_GPIO_Init+0xae>
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d01c      	beq.n	8000b18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ade:	e048      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d043      	beq.n	8000b6c <HAL_GPIO_Init+0xdc>
 8000ae4:	2b11      	cmp	r3, #17
 8000ae6:	d01b      	beq.n	8000b20 <HAL_GPIO_Init+0x90>
          break;
 8000ae8:	e043      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aea:	4a89      	ldr	r2, [pc, #548]	; (8000d10 <HAL_GPIO_Init+0x280>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d026      	beq.n	8000b3e <HAL_GPIO_Init+0xae>
 8000af0:	4a87      	ldr	r2, [pc, #540]	; (8000d10 <HAL_GPIO_Init+0x280>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d806      	bhi.n	8000b04 <HAL_GPIO_Init+0x74>
 8000af6:	4a87      	ldr	r2, [pc, #540]	; (8000d14 <HAL_GPIO_Init+0x284>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d020      	beq.n	8000b3e <HAL_GPIO_Init+0xae>
 8000afc:	4a86      	ldr	r2, [pc, #536]	; (8000d18 <HAL_GPIO_Init+0x288>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d01d      	beq.n	8000b3e <HAL_GPIO_Init+0xae>
          break;
 8000b02:	e036      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b04:	4a85      	ldr	r2, [pc, #532]	; (8000d1c <HAL_GPIO_Init+0x28c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d019      	beq.n	8000b3e <HAL_GPIO_Init+0xae>
 8000b0a:	4a85      	ldr	r2, [pc, #532]	; (8000d20 <HAL_GPIO_Init+0x290>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d016      	beq.n	8000b3e <HAL_GPIO_Init+0xae>
 8000b10:	4a84      	ldr	r2, [pc, #528]	; (8000d24 <HAL_GPIO_Init+0x294>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d013      	beq.n	8000b3e <HAL_GPIO_Init+0xae>
          break;
 8000b16:	e02c      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e028      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	3304      	adds	r3, #4
 8000b26:	623b      	str	r3, [r7, #32]
          break;
 8000b28:	e023      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	3308      	adds	r3, #8
 8000b30:	623b      	str	r3, [r7, #32]
          break;
 8000b32:	e01e      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	330c      	adds	r3, #12
 8000b3a:	623b      	str	r3, [r7, #32]
          break;
 8000b3c:	e019      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b46:	2304      	movs	r3, #4
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e012      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d105      	bne.n	8000b60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b54:	2308      	movs	r3, #8
 8000b56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	611a      	str	r2, [r3, #16]
          break;
 8000b5e:	e008      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	615a      	str	r2, [r3, #20]
          break;
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2bff      	cmp	r3, #255	; 0xff
 8000b76:	d801      	bhi.n	8000b7c <HAL_GPIO_Init+0xec>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	e001      	b.n	8000b80 <HAL_GPIO_Init+0xf0>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3304      	adds	r3, #4
 8000b80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	2bff      	cmp	r3, #255	; 0xff
 8000b86:	d802      	bhi.n	8000b8e <HAL_GPIO_Init+0xfe>
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	e002      	b.n	8000b94 <HAL_GPIO_Init+0x104>
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	3b08      	subs	r3, #8
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	6a39      	ldr	r1, [r7, #32]
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 8096 	beq.w	8000cee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc2:	4b59      	ldr	r3, [pc, #356]	; (8000d28 <HAL_GPIO_Init+0x298>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a58      	ldr	r2, [pc, #352]	; (8000d28 <HAL_GPIO_Init+0x298>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <HAL_GPIO_Init+0x298>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bda:	4a54      	ldr	r2, [pc, #336]	; (8000d2c <HAL_GPIO_Init+0x29c>)
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4b      	ldr	r2, [pc, #300]	; (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d013      	beq.n	8000c2e <HAL_GPIO_Init+0x19e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4a      	ldr	r2, [pc, #296]	; (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00d      	beq.n	8000c2a <HAL_GPIO_Init+0x19a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a49      	ldr	r2, [pc, #292]	; (8000d38 <HAL_GPIO_Init+0x2a8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d007      	beq.n	8000c26 <HAL_GPIO_Init+0x196>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d101      	bne.n	8000c22 <HAL_GPIO_Init+0x192>
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e006      	b.n	8000c30 <HAL_GPIO_Init+0x1a0>
 8000c22:	2304      	movs	r3, #4
 8000c24:	e004      	b.n	8000c30 <HAL_GPIO_Init+0x1a0>
 8000c26:	2302      	movs	r3, #2
 8000c28:	e002      	b.n	8000c30 <HAL_GPIO_Init+0x1a0>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <HAL_GPIO_Init+0x1a0>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c32:	f002 0203 	and.w	r2, r2, #3
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	4093      	lsls	r3, r2
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c40:	493a      	ldr	r1, [pc, #232]	; (8000d2c <HAL_GPIO_Init+0x29c>)
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4938      	ldr	r1, [pc, #224]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	4933      	ldr	r1, [pc, #204]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	492e      	ldr	r1, [pc, #184]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	604b      	str	r3, [r1, #4]
 8000c8e:	e006      	b.n	8000c9e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4929      	ldr	r1, [pc, #164]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	4924      	ldr	r1, [pc, #144]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	608b      	str	r3, [r1, #8]
 8000cb6:	e006      	b.n	8000cc6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	491f      	ldr	r1, [pc, #124]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	491a      	ldr	r1, [pc, #104]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60cb      	str	r3, [r1, #12]
 8000cde:	e006      	b.n	8000cee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4915      	ldr	r1, [pc, #84]	; (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f47f aed0 	bne.w	8000aa4 <HAL_GPIO_Init+0x14>
  }
}
 8000d04:	bf00      	nop
 8000d06:	372c      	adds	r7, #44	; 0x2c
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	10210000 	.word	0x10210000
 8000d14:	10110000 	.word	0x10110000
 8000d18:	10120000 	.word	0x10120000
 8000d1c:	10310000 	.word	0x10310000
 8000d20:	10320000 	.word	0x10320000
 8000d24:	10220000 	.word	0x10220000
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40011400 	.word	0x40011400
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d54:	787b      	ldrb	r3, [r7, #1]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d60:	e003      	b.n	8000d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	041a      	lsls	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	611a      	str	r2, [r3, #16]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e26c      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8087 	beq.w	8000ea2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d94:	4b92      	ldr	r3, [pc, #584]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 030c 	and.w	r3, r3, #12
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d00c      	beq.n	8000dba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da0:	4b8f      	ldr	r3, [pc, #572]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d112      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
 8000dac:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db8:	d10b      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dba:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d06c      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x12c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d168      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e246      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dda:	d106      	bne.n	8000dea <HAL_RCC_OscConfig+0x76>
 8000ddc:	4b80      	ldr	r3, [pc, #512]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a7f      	ldr	r2, [pc, #508]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	e02e      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x98>
 8000df2:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a7a      	ldr	r2, [pc, #488]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b78      	ldr	r3, [pc, #480]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a77      	ldr	r2, [pc, #476]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e01d      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0xbc>
 8000e16:	4b72      	ldr	r3, [pc, #456]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a71      	ldr	r2, [pc, #452]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b6f      	ldr	r3, [pc, #444]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a6e      	ldr	r2, [pc, #440]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e00b      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000e30:	4b6b      	ldr	r3, [pc, #428]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a6a      	ldr	r2, [pc, #424]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b68      	ldr	r3, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a67      	ldr	r2, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d013      	beq.n	8000e78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc90 	bl	8000774 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc8c 	bl	8000774 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b64      	cmp	r3, #100	; 0x64
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e1fa      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0xe4>
 8000e76:	e014      	b.n	8000ea2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fc7c 	bl	8000774 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fc78 	bl	8000774 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e1e6      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x10c>
 8000e9e:	e000      	b.n	8000ea2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d063      	beq.n	8000f76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eae:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d11c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x18c>
 8000ec6:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d005      	beq.n	8000eea <HAL_RCC_OscConfig+0x176>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d001      	beq.n	8000eea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e1ba      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4939      	ldr	r1, [pc, #228]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	e03a      	b.n	8000f76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d020      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f08:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fc31 	bl	8000774 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f16:	f7ff fc2d 	bl	8000774 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e19b      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4927      	ldr	r1, [pc, #156]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	600b      	str	r3, [r1, #0]
 8000f48:	e015      	b.n	8000f76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fc10 	bl	8000774 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fc0c 	bl	8000774 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e17a      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d03a      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d019      	beq.n	8000fbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_RCC_OscConfig+0x274>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fbf0 	bl	8000774 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f98:	f7ff fbec 	bl	8000774 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e15a      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 fada 	bl	8001570 <RCC_Delay>
 8000fbc:	e01c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_RCC_OscConfig+0x274>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fbd6 	bl	8000774 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fca:	e00f      	b.n	8000fec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fbd2 	bl	8000774 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d908      	bls.n	8000fec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e140      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	42420000 	.word	0x42420000
 8000fe8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fec:	4b9e      	ldr	r3, [pc, #632]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e9      	bne.n	8000fcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80a6 	beq.w	8001152 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100a:	4b97      	ldr	r3, [pc, #604]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10d      	bne.n	8001032 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a93      	ldr	r2, [pc, #588]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b91      	ldr	r3, [pc, #580]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800102e:	2301      	movs	r3, #1
 8001030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001032:	4b8e      	ldr	r3, [pc, #568]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	2b00      	cmp	r3, #0
 800103c:	d118      	bne.n	8001070 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800103e:	4b8b      	ldr	r3, [pc, #556]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a8a      	ldr	r2, [pc, #552]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800104a:	f7ff fb93 	bl	8000774 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001052:	f7ff fb8f 	bl	8000774 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b64      	cmp	r3, #100	; 0x64
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e0fd      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001064:	4b81      	ldr	r3, [pc, #516]	; (800126c <HAL_RCC_OscConfig+0x4f8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x312>
 8001078:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a7a      	ldr	r2, [pc, #488]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6213      	str	r3, [r2, #32]
 8001084:	e02d      	b.n	80010e2 <HAL_RCC_OscConfig+0x36e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x334>
 800108e:	4b76      	ldr	r3, [pc, #472]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a75      	ldr	r2, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	6213      	str	r3, [r2, #32]
 800109a:	4b73      	ldr	r3, [pc, #460]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a72      	ldr	r2, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	e01c      	b.n	80010e2 <HAL_RCC_OscConfig+0x36e>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d10c      	bne.n	80010ca <HAL_RCC_OscConfig+0x356>
 80010b0:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	4a6c      	ldr	r2, [pc, #432]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6213      	str	r3, [r2, #32]
 80010bc:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a69      	ldr	r2, [pc, #420]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	e00b      	b.n	80010e2 <HAL_RCC_OscConfig+0x36e>
 80010ca:	4b67      	ldr	r3, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4a66      	ldr	r2, [pc, #408]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	6213      	str	r3, [r2, #32]
 80010d6:	4b64      	ldr	r3, [pc, #400]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a63      	ldr	r2, [pc, #396]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f023 0304 	bic.w	r3, r3, #4
 80010e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d015      	beq.n	8001116 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fb43 	bl	8000774 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	e00a      	b.n	8001108 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff fb3f 	bl	8000774 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001100:	4293      	cmp	r3, r2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e0ab      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	4b57      	ldr	r3, [pc, #348]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0ee      	beq.n	80010f2 <HAL_RCC_OscConfig+0x37e>
 8001114:	e014      	b.n	8001140 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb2d 	bl	8000774 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111c:	e00a      	b.n	8001134 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fb29 	bl	8000774 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	f241 3288 	movw	r2, #5000	; 0x1388
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e095      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001134:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1ee      	bne.n	800111e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d105      	bne.n	8001152 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001146:	4b48      	ldr	r3, [pc, #288]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a47      	ldr	r2, [pc, #284]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8081 	beq.w	800125e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800115c:	4b42      	ldr	r3, [pc, #264]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b08      	cmp	r3, #8
 8001166:	d061      	beq.n	800122c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d146      	bne.n	80011fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001170:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <HAL_RCC_OscConfig+0x4fc>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff fafd 	bl	8000774 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff faf9 	bl	8000774 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e067      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f0      	bne.n	800117e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	492d      	ldr	r1, [pc, #180]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a19      	ldr	r1, [r3, #32]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	430b      	orrs	r3, r1
 80011ca:	4927      	ldr	r1, [pc, #156]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x4fc>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff facd 	bl	8000774 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff fac9 	bl	8000774 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e037      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x46a>
 80011fc:	e02f      	b.n	800125e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_RCC_OscConfig+0x4fc>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fab6 	bl	8000774 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff fab2 	bl	8000774 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e020      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x498>
 800122a:	e018      	b.n	800125e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e013      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	429a      	cmp	r2, r3
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001256:	429a      	cmp	r2, r3
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	40007000 	.word	0x40007000
 8001270:	42420060 	.word	0x42420060

08001274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0d0      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d910      	bls.n	80012b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 0207 	bic.w	r2, r3, #7
 800129e:	4965      	ldr	r1, [pc, #404]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0b8      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d020      	beq.n	8001306 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d0:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f4:	4b50      	ldr	r3, [pc, #320]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	494d      	ldr	r1, [pc, #308]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d040      	beq.n	8001394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d115      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e07f      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d107      	bne.n	8001342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001332:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e073      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e06b      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f023 0203 	bic.w	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4936      	ldr	r1, [pc, #216]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001364:	f7ff fa06 	bl	8000774 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	e00a      	b.n	8001382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136c:	f7ff fa02 	bl	8000774 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e053      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 020c 	and.w	r2, r3, #12
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	429a      	cmp	r2, r3
 8001392:	d1eb      	bne.n	800136c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d210      	bcs.n	80013c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	4922      	ldr	r1, [pc, #136]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e032      	b.n	800142a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4916      	ldr	r1, [pc, #88]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	490e      	ldr	r1, [pc, #56]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001402:	f000 f821 	bl	8001448 <HAL_RCC_GetSysClockFreq>
 8001406:	4601      	mov	r1, r0
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_RCC_ClockConfig+0x1c8>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	fa21 f303 	lsr.w	r3, r1, r3
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_RCC_ClockConfig+0x1cc>)
 800141c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_RCC_ClockConfig+0x1d0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f964 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000
 8001438:	40021000 	.word	0x40021000
 800143c:	08001fcc 	.word	0x08001fcc
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001448:	b490      	push	{r4, r7}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001450:	1d3c      	adds	r4, r7, #4
 8001452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b04      	cmp	r3, #4
 8001480:	d002      	beq.n	8001488 <HAL_RCC_GetSysClockFreq+0x40>
 8001482:	2b08      	cmp	r3, #8
 8001484:	d003      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x46>
 8001486:	e02d      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_RCC_GetSysClockFreq+0xbc>)
 800148a:	623b      	str	r3, [r7, #32]
      break;
 800148c:	e02d      	b.n	80014ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	0c9b      	lsrs	r3, r3, #18
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800149a:	4413      	add	r3, r2
 800149c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0c5b      	lsrs	r3, r3, #17
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014ba:	4413      	add	r3, r2
 80014bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014c6:	fb02 f203 	mul.w	r2, r2, r3
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
 80014d2:	e004      	b.n	80014de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	623b      	str	r3, [r7, #32]
      break;
 80014e2:	e002      	b.n	80014ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014e6:	623b      	str	r3, [r7, #32]
      break;
 80014e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ea:	6a3b      	ldr	r3, [r7, #32]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc90      	pop	{r4, r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	08001fb8 	.word	0x08001fb8
 80014fc:	08001fc8 	.word	0x08001fc8
 8001500:	40021000 	.word	0x40021000
 8001504:	007a1200 	.word	0x007a1200
 8001508:	003d0900 	.word	0x003d0900

0800150c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <HAL_RCC_GetHCLKFreq+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000000 	.word	0x20000000

08001520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001524:	f7ff fff2 	bl	800150c <HAL_RCC_GetHCLKFreq>
 8001528:	4601      	mov	r1, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	08001fdc 	.word	0x08001fdc

08001548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800154c:	f7ff ffde 	bl	800150c <HAL_RCC_GetHCLKFreq>
 8001550:	4601      	mov	r1, r0
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	0adb      	lsrs	r3, r3, #11
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_RCC_GetPCLK2Freq+0x24>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001564:	4618      	mov	r0, r3
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	08001fdc 	.word	0x08001fdc

08001570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <RCC_Delay+0x34>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <RCC_Delay+0x38>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0a5b      	lsrs	r3, r3, #9
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800158c:	bf00      	nop
  }
  while (Delay --);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1e5a      	subs	r2, r3, #1
 8001592:	60fa      	str	r2, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f9      	bne.n	800158c <RCC_Delay+0x1c>
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	10624dd3 	.word	0x10624dd3

080015ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e03f      	b.n	800163e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7fe ffc2 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fc1b 	bl	8001e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2220      	movs	r2, #32
 8001630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b08a      	sub	sp, #40	; 0x28
 800164a:	af02      	add	r7, sp, #8
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b20      	cmp	r3, #32
 8001664:	d17c      	bne.n	8001760 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_UART_Transmit+0x2c>
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e075      	b.n	8001762 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_UART_Transmit+0x3e>
 8001680:	2302      	movs	r3, #2
 8001682:	e06e      	b.n	8001762 <HAL_UART_Transmit+0x11c>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2221      	movs	r2, #33	; 0x21
 8001696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800169a:	f7ff f86b 	bl	8000774 <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	88fa      	ldrh	r2, [r7, #6]
 80016a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	88fa      	ldrh	r2, [r7, #6]
 80016aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b4:	d108      	bne.n	80016c8 <HAL_UART_Transmit+0x82>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d104      	bne.n	80016c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	e003      	b.n	80016d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80016d8:	e02a      	b.n	8001730 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2200      	movs	r2, #0
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 fa3e 	bl	8001b66 <UART_WaitOnFlagUntilTimeout>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e036      	b.n	8001762 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10b      	bne.n	8001712 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001708:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3302      	adds	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	e007      	b.n	8001722 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	3301      	adds	r3, #1
 8001720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001726:	b29b      	uxth	r3, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001734:	b29b      	uxth	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1cf      	bne.n	80016da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2200      	movs	r2, #0
 8001742:	2140      	movs	r1, #64	; 0x40
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 fa0e 	bl	8001b66 <UART_WaitOnFlagUntilTimeout>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e006      	b.n	8001762 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001760:	2302      	movs	r3, #2
  }
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b08a      	sub	sp, #40	; 0x28
 800176e:	af02      	add	r7, sp, #8
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b20      	cmp	r3, #32
 8001788:	f040 8089 	bne.w	800189e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_UART_Receive+0x2e>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e081      	b.n	80018a0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_UART_Receive+0x40>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e07a      	b.n	80018a0 <HAL_UART_Receive+0x136>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2222      	movs	r2, #34	; 0x22
 80017bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80017c0:	f7fe ffd8 	bl	8000774 <HAL_GetTick>
 80017c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	88fa      	ldrh	r2, [r7, #6]
 80017ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017da:	d108      	bne.n	80017ee <HAL_UART_Receive+0x84>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d104      	bne.n	80017ee <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	e003      	b.n	80017f6 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80017fe:	e043      	b.n	8001888 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2200      	movs	r2, #0
 8001808:	2120      	movs	r1, #32
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f9ab 	bl	8001b66 <UART_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e042      	b.n	80018a0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10c      	bne.n	800183a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	b29b      	uxth	r3, r3
 8001828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800182c:	b29a      	uxth	r2, r3
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	3302      	adds	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	e01f      	b.n	800187a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001842:	d007      	beq.n	8001854 <HAL_UART_Receive+0xea>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <HAL_UART_Receive+0xf8>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e008      	b.n	8001874 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800186e:	b2da      	uxtb	r2, r3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	3301      	adds	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800187e:	b29b      	uxth	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800188c:	b29b      	uxth	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1b6      	bne.n	8001800 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d130      	bne.n	8001924 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_UART_Transmit_IT+0x26>
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e029      	b.n	8001926 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_UART_Transmit_IT+0x38>
 80018dc:	2302      	movs	r3, #2
 80018de:	e022      	b.n	8001926 <HAL_UART_Transmit_IT+0x7e>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	88fa      	ldrh	r2, [r7, #6]
 80018f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2221      	movs	r2, #33	; 0x21
 8001904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800191e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10d      	bne.n	8001982 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_UART_IRQHandler+0x52>
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f9d5 	bl	8001d2a <UART_Receive_IT>
      return;
 8001980:	e0d1      	b.n	8001b26 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80b0 	beq.w	8001aea <HAL_UART_IRQHandler+0x1ba>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <HAL_UART_IRQHandler+0x70>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a5 	beq.w	8001aea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <HAL_UART_IRQHandler+0x90>
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00a      	beq.n	80019e0 <HAL_UART_IRQHandler+0xb0>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d8:	f043 0202 	orr.w	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <HAL_UART_IRQHandler+0xd0>
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	f043 0204 	orr.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00f      	beq.n	8001a2a <HAL_UART_IRQHandler+0xfa>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d104      	bne.n	8001a1e <HAL_UART_IRQHandler+0xee>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	f043 0208 	orr.w	r2, r3, #8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d078      	beq.n	8001b24 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_UART_IRQHandler+0x11c>
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f96f 	bl	8001d2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_UART_IRQHandler+0x144>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d031      	beq.n	8001ad8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f8c0 	bl	8001bfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d023      	beq.n	8001ad0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a96:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_UART_IRQHandler+0x1fc>)
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe ff79 	bl	80009a4 <HAL_DMA_Abort_IT>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d016      	beq.n	8001ae6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac6:	e00e      	b.n	8001ae6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f843 	bl	8001b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ace:	e00a      	b.n	8001ae6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f83f 	bl	8001b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ad6:	e006      	b.n	8001ae6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f83b 	bl	8001b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001ae4:	e01e      	b.n	8001b24 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ae6:	bf00      	nop
    return;
 8001ae8:	e01c      	b.n	8001b24 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_UART_IRQHandler+0x1d6>
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8ac 	bl	8001c5c <UART_Transmit_IT>
    return;
 8001b04:	e00f      	b.n	8001b26 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00a      	beq.n	8001b26 <HAL_UART_IRQHandler+0x1f6>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8ed 	bl	8001cfa <UART_EndTransmit_IT>
    return;
 8001b20:	bf00      	nop
 8001b22:	e000      	b.n	8001b26 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001b24:	bf00      	nop
  }
}
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	08001c35 	.word	0x08001c35

08001b30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b76:	e02c      	b.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7e:	d028      	beq.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b86:	f7fe fdf5 	bl	8000774 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d21d      	bcs.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ba4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e00f      	b.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	bf0c      	ite	eq
 8001be2:	2301      	moveq	r3, #1
 8001be4:	2300      	movne	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d0c3      	beq.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c10:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff ff80 	bl	8001b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b21      	cmp	r3, #33	; 0x21
 8001c6e:	d13e      	bne.n	8001cee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c78:	d114      	bne.n	8001ca4 <UART_Transmit_IT+0x48>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d110      	bne.n	8001ca4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	1c9a      	adds	r2, r3, #2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	e008      	b.n	8001cb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	1c59      	adds	r1, r3, #1
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6211      	str	r1, [r2, #32]
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff08 	bl	8001b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b22      	cmp	r3, #34	; 0x22
 8001d3c:	d170      	bne.n	8001e20 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d46:	d117      	bne.n	8001d78 <UART_Receive_IT+0x4e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d113      	bne.n	8001d78 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	1c9a      	adds	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
 8001d76:	e026      	b.n	8001dc6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8a:	d007      	beq.n	8001d9c <UART_Receive_IT+0x72>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10a      	bne.n	8001daa <UART_Receive_IT+0x80>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d106      	bne.n	8001daa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e008      	b.n	8001dbc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d120      	bne.n	8001e1c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0220 	bic.w	r2, r2, #32
 8001de8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fe95 	bl	8001b42 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e002      	b.n	8001e22 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e000      	b.n	8001e22 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001e20:	2302      	movs	r3, #2
  }
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e66:	f023 030c 	bic.w	r3, r3, #12
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2c      	ldr	r2, [pc, #176]	; (8001f40 <UART_SetConfig+0x114>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d103      	bne.n	8001e9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e94:	f7ff fb58 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	e002      	b.n	8001ea2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f7ff fb40 	bl	8001520 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009a      	lsls	r2, r3, #2
 8001eac:	441a      	add	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <UART_SetConfig+0x118>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	0119      	lsls	r1, r3, #4
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	009a      	lsls	r2, r3, #2
 8001ecc:	441a      	add	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <UART_SetConfig+0x118>)
 8001eda:	fba3 0302 	umull	r0, r3, r3, r2
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2064      	movs	r0, #100	; 0x64
 8001ee2:	fb00 f303 	mul.w	r3, r0, r3
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	3332      	adds	r3, #50	; 0x32
 8001eec:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <UART_SetConfig+0x118>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef8:	4419      	add	r1, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <UART_SetConfig+0x118>)
 8001f12:	fba3 0302 	umull	r0, r3, r3, r2
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2064      	movs	r0, #100	; 0x64
 8001f1a:	fb00 f303 	mul.w	r3, r0, r3
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	3332      	adds	r3, #50	; 0x32
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <UART_SetConfig+0x118>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	440a      	add	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40013800 	.word	0x40013800
 8001f44:	51eb851f 	.word	0x51eb851f

08001f48 <__libc_init_array>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	4e0c      	ldr	r6, [pc, #48]	; (8001f80 <__libc_init_array+0x38>)
 8001f4e:	4c0d      	ldr	r4, [pc, #52]	; (8001f84 <__libc_init_array+0x3c>)
 8001f50:	1ba4      	subs	r4, r4, r6
 8001f52:	10a4      	asrs	r4, r4, #2
 8001f54:	42a5      	cmp	r5, r4
 8001f56:	d109      	bne.n	8001f6c <__libc_init_array+0x24>
 8001f58:	f000 f822 	bl	8001fa0 <_init>
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	4e0a      	ldr	r6, [pc, #40]	; (8001f88 <__libc_init_array+0x40>)
 8001f60:	4c0a      	ldr	r4, [pc, #40]	; (8001f8c <__libc_init_array+0x44>)
 8001f62:	1ba4      	subs	r4, r4, r6
 8001f64:	10a4      	asrs	r4, r4, #2
 8001f66:	42a5      	cmp	r5, r4
 8001f68:	d105      	bne.n	8001f76 <__libc_init_array+0x2e>
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
 8001f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f70:	4798      	blx	r3
 8001f72:	3501      	adds	r5, #1
 8001f74:	e7ee      	b.n	8001f54 <__libc_init_array+0xc>
 8001f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f7a:	4798      	blx	r3
 8001f7c:	3501      	adds	r5, #1
 8001f7e:	e7f2      	b.n	8001f66 <__libc_init_array+0x1e>
 8001f80:	08001fe4 	.word	0x08001fe4
 8001f84:	08001fe4 	.word	0x08001fe4
 8001f88:	08001fe4 	.word	0x08001fe4
 8001f8c:	08001fe8 	.word	0x08001fe8

08001f90 <memset>:
 8001f90:	4603      	mov	r3, r0
 8001f92:	4402      	add	r2, r0
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d100      	bne.n	8001f9a <memset+0xa>
 8001f98:	4770      	bx	lr
 8001f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f9e:	e7f9      	b.n	8001f94 <memset+0x4>

08001fa0 <_init>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	bf00      	nop
 8001fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa6:	bc08      	pop	{r3}
 8001fa8:	469e      	mov	lr, r3
 8001faa:	4770      	bx	lr

08001fac <_fini>:
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	bf00      	nop
 8001fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb2:	bc08      	pop	{r3}
 8001fb4:	469e      	mov	lr, r3
 8001fb6:	4770      	bx	lr
