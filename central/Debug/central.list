
central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080018d4  080018d4  000118d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001900  08001900  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001900  08001900  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001900  08001900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001900  08001900  00011900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001904  08001904  00011904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001914  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001914  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004964  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001060  00000000  00000000  00024999  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  00025a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  00025fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015cd1  00000000  00000000  000264d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004ccd  00000000  00000000  0003c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007daa4  00000000  00000000  00040e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be91a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e0  00000000  00000000  000be998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080018bc 	.word	0x080018bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080018bc 	.word	0x080018bc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa5d 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8ef 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f95d 	bl	8000418 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f931 	bl	80003c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	eSystemState NextState;
	uint8_t RSSI_value[3];
	uint8_t estado_inhi[3];
	uint8_t cRx = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	75bb      	strb	r3, [r7, #22]
	bool bPresencia_Inhibi;
	char in[3] = {0, 0, 0};
 8000166:	2300      	movs	r3, #0
 8000168:	723b      	strb	r3, [r7, #8]
 800016a:	2300      	movs	r3, #0
 800016c:	727b      	strb	r3, [r7, #9]
 800016e:	2300      	movs	r3, #0
 8000170:	72bb      	strb	r3, [r7, #10]
	char ch[3] = {0, 0, 0};
 8000172:	2300      	movs	r3, #0
 8000174:	713b      	strb	r3, [r7, #4]
 8000176:	2300      	movs	r3, #0
 8000178:	717b      	strb	r3, [r7, #5]
 800017a:	2300      	movs	r3, #0
 800017c:	71bb      	strb	r3, [r7, #6]


	NextState = RxNodos_State;
 800017e:	2300      	movs	r3, #0
 8000180:	75fb      	strb	r3, [r7, #23]
	bPresencia_Inhibi = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // DE - Comunicacion RS485 - Se coloca en bajo para estar en modo recepcion
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	4868      	ldr	r0, [pc, #416]	; (8000330 <main+0x1e4>)
 800018e:	f000 fcdf 	bl	8000b50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0); // RE - Comunicacion RS485 - Se coloca en bajo para escuchar todo el tiempo
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000198:	4865      	ldr	r0, [pc, #404]	; (8000330 <main+0x1e4>)
 800019a:	f000 fcd9 	bl	8000b50 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Maquina de estados para comunicacion
	  switch(NextState){
 800019e:	7dfb      	ldrb	r3, [r7, #23]
 80001a0:	2b03      	cmp	r3, #3
 80001a2:	f200 80ab 	bhi.w	80002fc <main+0x1b0>
 80001a6:	a201      	add	r2, pc, #4	; (adr r2, 80001ac <main+0x60>)
 80001a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ac:	080001bd 	.word	0x080001bd
 80001b0:	080001f3 	.word	0x080001f3
 80001b4:	0800021f 	.word	0x0800021f
 80001b8:	080002cb 	.word	0x080002cb
		  case RxNodos_State:
			  in[0] = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	723b      	strb	r3, [r7, #8]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c6:	485a      	ldr	r0, [pc, #360]	; (8000330 <main+0x1e4>)
 80001c8:	f000 fcc2 	bl	8000b50 <HAL_GPIO_WritePin>
			  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1000);
 80001cc:	f107 0108 	add.w	r1, r7, #8
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	2201      	movs	r2, #1
 80001d6:	4857      	ldr	r0, [pc, #348]	; (8000334 <main+0x1e8>)
 80001d8:	f001 f9cd 	bl	8001576 <HAL_UART_Receive>

			  if(in[0] != 0){
 80001dc:	7a3b      	ldrb	r3, [r7, #8]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d004      	beq.n	80001ec <main+0xa0>
				  bPresencia_Inhibi = 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	757b      	strb	r3, [r7, #21]
				  NextState = Captura_Inhibicion_Tx_State;
 80001e6:	2301      	movs	r3, #1
 80001e8:	75fb      	strb	r3, [r7, #23]
	  	  	  }
			  else
				  NextState = RxNodos_State;

			  break;
 80001ea:	e0a0      	b.n	800032e <main+0x1e2>
				  NextState = RxNodos_State;
 80001ec:	2300      	movs	r3, #0
 80001ee:	75fb      	strb	r3, [r7, #23]
			  break;
 80001f0:	e09d      	b.n	800032e <main+0x1e2>

		  case Captura_Inhibicion_Tx_State:
			  ch[0] = 'G';
 80001f2:	2347      	movs	r3, #71	; 0x47
 80001f4:	713b      	strb	r3, [r7, #4]
			  // Pone en modo tx
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	484c      	ldr	r0, [pc, #304]	; (8000330 <main+0x1e4>)
 80001fe:	f000 fca7 	bl	8000b50 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10); //Definir palabra a enviar para que todos los nodos escuchen y guarden rssi y estado
 8000202:	1d39      	adds	r1, r7, #4
 8000204:	230a      	movs	r3, #10
 8000206:	2201      	movs	r2, #1
 8000208:	484a      	ldr	r0, [pc, #296]	; (8000334 <main+0x1e8>)
 800020a:	f001 f922 	bl	8001452 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000214:	4846      	ldr	r0, [pc, #280]	; (8000330 <main+0x1e4>)
 8000216:	f000 fc9b 	bl	8000b50 <HAL_GPIO_WritePin>

			  NextState = Espera_Estados_Rx_State;
 800021a:	2302      	movs	r3, #2
 800021c:	75fb      	strb	r3, [r7, #23]

		  case Espera_Estados_Rx_State:

			  if 	  (cRx == 0) ch[0] = 'a';
 800021e:	7dbb      	ldrb	r3, [r7, #22]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d102      	bne.n	800022a <main+0xde>
 8000224:	2361      	movs	r3, #97	; 0x61
 8000226:	713b      	strb	r3, [r7, #4]
 8000228:	e00a      	b.n	8000240 <main+0xf4>
			  else if (cRx == 1) ch[0] = 'b';
 800022a:	7dbb      	ldrb	r3, [r7, #22]
 800022c:	2b01      	cmp	r3, #1
 800022e:	d102      	bne.n	8000236 <main+0xea>
 8000230:	2362      	movs	r3, #98	; 0x62
 8000232:	713b      	strb	r3, [r7, #4]
 8000234:	e004      	b.n	8000240 <main+0xf4>
			  else if (cRx == 2) ch[0] = 'c';
 8000236:	7dbb      	ldrb	r3, [r7, #22]
 8000238:	2b02      	cmp	r3, #2
 800023a:	d101      	bne.n	8000240 <main+0xf4>
 800023c:	2363      	movs	r3, #99	; 0x63
 800023e:	713b      	strb	r3, [r7, #4]

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	483a      	ldr	r0, [pc, #232]	; (8000330 <main+0x1e4>)
 8000248:	f000 fc82 	bl	8000b50 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800024c:	1d39      	adds	r1, r7, #4
 800024e:	230a      	movs	r3, #10
 8000250:	2201      	movs	r2, #1
 8000252:	4838      	ldr	r0, [pc, #224]	; (8000334 <main+0x1e8>)
 8000254:	f001 f8fd 	bl	8001452 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025e:	4834      	ldr	r0, [pc, #208]	; (8000330 <main+0x1e4>)
 8000260:	f000 fc76 	bl	8000b50 <HAL_GPIO_WritePin>

			  HAL_UART_Receive(&huart1, (uint8_t *)in, 3, 1000);
 8000264:	f107 0108 	add.w	r1, r7, #8
 8000268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026c:	2203      	movs	r2, #3
 800026e:	4831      	ldr	r0, [pc, #196]	; (8000334 <main+0x1e8>)
 8000270:	f001 f981 	bl	8001576 <HAL_UART_Receive>
			  if(in[0] == 'A'){
 8000274:	7a3b      	ldrb	r3, [r7, #8]
 8000276:	2b41      	cmp	r3, #65	; 0x41
 8000278:	d107      	bne.n	800028a <main+0x13e>
				  RSSI_value[0] = in[1];
 800027a:	7a7b      	ldrb	r3, [r7, #9]
 800027c:	743b      	strb	r3, [r7, #16]
				  estado_inhi[0] = in[2];
 800027e:	7abb      	ldrb	r3, [r7, #10]
 8000280:	733b      	strb	r3, [r7, #12]
				  cRx++;
 8000282:	7dbb      	ldrb	r3, [r7, #22]
 8000284:	3301      	adds	r3, #1
 8000286:	75bb      	strb	r3, [r7, #22]
 8000288:	e014      	b.n	80002b4 <main+0x168>
			  }
			  else if(in[0] == 'B'){
 800028a:	7a3b      	ldrb	r3, [r7, #8]
 800028c:	2b42      	cmp	r3, #66	; 0x42
 800028e:	d107      	bne.n	80002a0 <main+0x154>
				  RSSI_value[1] = in[1];
 8000290:	7a7b      	ldrb	r3, [r7, #9]
 8000292:	747b      	strb	r3, [r7, #17]
				  estado_inhi[1] = in[2];
 8000294:	7abb      	ldrb	r3, [r7, #10]
 8000296:	737b      	strb	r3, [r7, #13]
				  cRx++;
 8000298:	7dbb      	ldrb	r3, [r7, #22]
 800029a:	3301      	adds	r3, #1
 800029c:	75bb      	strb	r3, [r7, #22]
 800029e:	e009      	b.n	80002b4 <main+0x168>
			  }
			  else if(in[0] == 'C'){
 80002a0:	7a3b      	ldrb	r3, [r7, #8]
 80002a2:	2b43      	cmp	r3, #67	; 0x43
 80002a4:	d106      	bne.n	80002b4 <main+0x168>
				  RSSI_value[2] = in[1];
 80002a6:	7a7b      	ldrb	r3, [r7, #9]
 80002a8:	74bb      	strb	r3, [r7, #18]
				  estado_inhi[2] = in[2];
 80002aa:	7abb      	ldrb	r3, [r7, #10]
 80002ac:	73bb      	strb	r3, [r7, #14]
				  cRx++;
 80002ae:	7dbb      	ldrb	r3, [r7, #22]
 80002b0:	3301      	adds	r3, #1
 80002b2:	75bb      	strb	r3, [r7, #22]
			  }

			  if(cRx == 3){
 80002b4:	7dbb      	ldrb	r3, [r7, #22]
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	d104      	bne.n	80002c4 <main+0x178>
				  cRx = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	75bb      	strb	r3, [r7, #22]
				  NextState = Reset_Tx_State;
 80002be:	2303      	movs	r3, #3
 80002c0:	75fb      	strb	r3, [r7, #23]
			  }
			  else
				  NextState = Espera_Estados_Rx_State;


			  break;
 80002c2:	e034      	b.n	800032e <main+0x1e2>
				  NextState = Espera_Estados_Rx_State;
 80002c4:	2302      	movs	r3, #2
 80002c6:	75fb      	strb	r3, [r7, #23]
			  break;
 80002c8:	e031      	b.n	800032e <main+0x1e2>
		  case Reset_Tx_State:
			  ch[0] = 'F';
 80002ca:	2346      	movs	r3, #70	; 0x46
 80002cc:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80002ce:	2201      	movs	r2, #1
 80002d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d4:	4816      	ldr	r0, [pc, #88]	; (8000330 <main+0x1e4>)
 80002d6:	f000 fc3b 	bl	8000b50 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 80002da:	1d39      	adds	r1, r7, #4
 80002dc:	230a      	movs	r3, #10
 80002de:	2201      	movs	r2, #1
 80002e0:	4814      	ldr	r0, [pc, #80]	; (8000334 <main+0x1e8>)
 80002e2:	f001 f8b6 	bl	8001452 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ec:	4810      	ldr	r0, [pc, #64]	; (8000330 <main+0x1e4>)
 80002ee:	f000 fc2f 	bl	8000b50 <HAL_GPIO_WritePin>

			  bPresencia_Inhibi = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	757b      	strb	r3, [r7, #21]
			  NextState = RxNodos_State;
 80002f6:	2300      	movs	r3, #0
 80002f8:	75fb      	strb	r3, [r7, #23]

			  break;
 80002fa:	e018      	b.n	800032e <main+0x1e2>
		  default:
			  ch[0] = 'F';
 80002fc:	2346      	movs	r3, #70	; 0x46
 80002fe:	713b      	strb	r3, [r7, #4]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000306:	480a      	ldr	r0, [pc, #40]	; (8000330 <main+0x1e4>)
 8000308:	f000 fc22 	bl	8000b50 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800030c:	1d39      	adds	r1, r7, #4
 800030e:	230a      	movs	r3, #10
 8000310:	2201      	movs	r2, #1
 8000312:	4808      	ldr	r0, [pc, #32]	; (8000334 <main+0x1e8>)
 8000314:	f001 f89d 	bl	8001452 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <main+0x1e4>)
 8000320:	f000 fc16 	bl	8000b50 <HAL_GPIO_WritePin>

			  bPresencia_Inhibi = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	757b      	strb	r3, [r7, #21]
			  NextState = RxNodos_State;
 8000328:	2300      	movs	r3, #0
 800032a:	75fb      	strb	r3, [r7, #23]
			  break;
 800032c:	bf00      	nop
	  switch(NextState){
 800032e:	e736      	b.n	800019e <main+0x52>
 8000330:	40010800 	.word	0x40010800
 8000334:	20000028 	.word	0x20000028

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fab0 	bl	80018ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fbfd 	bl	8000b80 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800038c:	f000 f866 	bl	800045c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fe68 	bl	8001080 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b6:	f000 f851 	bl	800045c <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_USART1_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ec:	220c      	movs	r2, #12
 80003ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003fe:	f000 ffdb 	bl	80013b8 <HAL_UART_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000408:	f000 f828 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000028 	.word	0x20000028
 8000414:	40013800 	.word	0x40013800

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_GPIO_Init+0x40>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <MX_GPIO_Init+0x40>)
 8000424:	f043 0320 	orr.w	r3, r3, #32
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_GPIO_Init+0x40>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0320 	and.w	r3, r3, #32
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_GPIO_Init+0x40>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a07      	ldr	r2, [pc, #28]	; (8000458 <MX_GPIO_Init+0x40>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <MX_GPIO_Init+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <HAL_MspInit+0x5c>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <HAL_MspInit+0x5c>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_MspInit+0x60>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <HAL_MspInit+0x60>)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010000 	.word	0x40010000

080004cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <HAL_UART_MspInit+0x8c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d131      	bne.n	8000550 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <HAL_UART_MspInit+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <HAL_UART_MspInit+0x90>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_UART_MspInit+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_UART_MspInit+0x90>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <HAL_UART_MspInit+0x90>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_UART_MspInit+0x90>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800051c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000526:	2303      	movs	r3, #3
 8000528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	4619      	mov	r1, r3
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <HAL_UART_MspInit+0x94>)
 8000532:	f000 f9b3 	bl	800089c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <HAL_UART_MspInit+0x94>)
 800054c:	f000 f9a6 	bl	800089c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40013800 	.word	0x40013800
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <HardFault_Handler+0x4>

08000576 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <MemManage_Handler+0x4>

0800057c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <BusFault_Handler+0x4>

08000582 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <UsageFault_Handler+0x4>

08000588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f874 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ea:	f7ff ffe5 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 f939 	bl	8001864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f7ff fdab 	bl	800014c <main>
  bx lr
 80005f6:	4770      	bx	lr
  ldr r3, =_sidata
 80005f8:	08001908 	.word	0x08001908
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000600:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000608:	2000006c 	.word	0x2000006c

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>
	...

08000610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_Init+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x28>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f907 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f808 	bl	800063c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f7ff ff1c 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x54>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x58>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	fbb3 f3f1 	udiv	r3, r3, r1
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f911 	bl	8000882 <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d80a      	bhi.n	8000686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f8e7 	bl	800084a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_InitTick+0x5c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x1c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x20>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <HAL_IncTick+0x20>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000068 	.word	0x20000068

080006c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <HAL_GetTick+0x10>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000068 	.word	0x20000068

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff90 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff49 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff5e 	bl	800071c <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff90 	bl	800078c <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5f 	bl	8000738 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffb0 	bl	80007f0 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800089c:	b480      	push	{r7}
 800089e:	b08b      	sub	sp, #44	; 0x2c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	e127      	b.n	8000b00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008b0:	2201      	movs	r2, #1
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	69fa      	ldr	r2, [r7, #28]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	f040 8116 	bne.w	8000afa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d034      	beq.n	8000940 <HAL_GPIO_Init+0xa4>
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d80d      	bhi.n	80008f6 <HAL_GPIO_Init+0x5a>
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d02b      	beq.n	8000936 <HAL_GPIO_Init+0x9a>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d804      	bhi.n	80008ec <HAL_GPIO_Init+0x50>
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d031      	beq.n	800094a <HAL_GPIO_Init+0xae>
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d01c      	beq.n	8000924 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ea:	e048      	b.n	800097e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d043      	beq.n	8000978 <HAL_GPIO_Init+0xdc>
 80008f0:	2b11      	cmp	r3, #17
 80008f2:	d01b      	beq.n	800092c <HAL_GPIO_Init+0x90>
          break;
 80008f4:	e043      	b.n	800097e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008f6:	4a89      	ldr	r2, [pc, #548]	; (8000b1c <HAL_GPIO_Init+0x280>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d026      	beq.n	800094a <HAL_GPIO_Init+0xae>
 80008fc:	4a87      	ldr	r2, [pc, #540]	; (8000b1c <HAL_GPIO_Init+0x280>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d806      	bhi.n	8000910 <HAL_GPIO_Init+0x74>
 8000902:	4a87      	ldr	r2, [pc, #540]	; (8000b20 <HAL_GPIO_Init+0x284>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d020      	beq.n	800094a <HAL_GPIO_Init+0xae>
 8000908:	4a86      	ldr	r2, [pc, #536]	; (8000b24 <HAL_GPIO_Init+0x288>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d01d      	beq.n	800094a <HAL_GPIO_Init+0xae>
          break;
 800090e:	e036      	b.n	800097e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000910:	4a85      	ldr	r2, [pc, #532]	; (8000b28 <HAL_GPIO_Init+0x28c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d019      	beq.n	800094a <HAL_GPIO_Init+0xae>
 8000916:	4a85      	ldr	r2, [pc, #532]	; (8000b2c <HAL_GPIO_Init+0x290>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d016      	beq.n	800094a <HAL_GPIO_Init+0xae>
 800091c:	4a84      	ldr	r2, [pc, #528]	; (8000b30 <HAL_GPIO_Init+0x294>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d013      	beq.n	800094a <HAL_GPIO_Init+0xae>
          break;
 8000922:	e02c      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	623b      	str	r3, [r7, #32]
          break;
 800092a:	e028      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	3304      	adds	r3, #4
 8000932:	623b      	str	r3, [r7, #32]
          break;
 8000934:	e023      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	3308      	adds	r3, #8
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e01e      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	330c      	adds	r3, #12
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e019      	b.n	800097e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000952:	2304      	movs	r3, #4
 8000954:	623b      	str	r3, [r7, #32]
          break;
 8000956:	e012      	b.n	800097e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d105      	bne.n	800096c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000960:	2308      	movs	r3, #8
 8000962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	611a      	str	r2, [r3, #16]
          break;
 800096a:	e008      	b.n	800097e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	615a      	str	r2, [r3, #20]
          break;
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	2bff      	cmp	r3, #255	; 0xff
 8000982:	d801      	bhi.n	8000988 <HAL_GPIO_Init+0xec>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	e001      	b.n	800098c <HAL_GPIO_Init+0xf0>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3304      	adds	r3, #4
 800098c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	2bff      	cmp	r3, #255	; 0xff
 8000992:	d802      	bhi.n	800099a <HAL_GPIO_Init+0xfe>
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x104>
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	3b08      	subs	r3, #8
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	210f      	movs	r1, #15
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	401a      	ands	r2, r3
 80009b2:	6a39      	ldr	r1, [r7, #32]
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	431a      	orrs	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 8096 	beq.w	8000afa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ce:	4b59      	ldr	r3, [pc, #356]	; (8000b34 <HAL_GPIO_Init+0x298>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a58      	ldr	r2, [pc, #352]	; (8000b34 <HAL_GPIO_Init+0x298>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b56      	ldr	r3, [pc, #344]	; (8000b34 <HAL_GPIO_Init+0x298>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e6:	4a54      	ldr	r2, [pc, #336]	; (8000b38 <HAL_GPIO_Init+0x29c>)
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3302      	adds	r3, #2
 80009ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	220f      	movs	r2, #15
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x2a0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0x19e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x2a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00d      	beq.n	8000a36 <HAL_GPIO_Init+0x19a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a49      	ldr	r2, [pc, #292]	; (8000b44 <HAL_GPIO_Init+0x2a8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0x196>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a48      	ldr	r2, [pc, #288]	; (8000b48 <HAL_GPIO_Init+0x2ac>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_Init+0x192>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x1a0>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4c:	493a      	ldr	r1, [pc, #232]	; (8000b38 <HAL_GPIO_Init+0x29c>)
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4938      	ldr	r1, [pc, #224]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a74:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	4933      	ldr	r1, [pc, #204]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	492e      	ldr	r1, [pc, #184]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	604b      	str	r3, [r1, #4]
 8000a9a:	e006      	b.n	8000aaa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	4929      	ldr	r1, [pc, #164]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d006      	beq.n	8000ac4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4924      	ldr	r1, [pc, #144]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	608b      	str	r3, [r1, #8]
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	491f      	ldr	r1, [pc, #124]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	491a      	ldr	r1, [pc, #104]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60cb      	str	r3, [r1, #12]
 8000aea:	e006      	b.n	8000afa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4915      	ldr	r1, [pc, #84]	; (8000b4c <HAL_GPIO_Init+0x2b0>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	3301      	adds	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f47f aed0 	bne.w	80008b0 <HAL_GPIO_Init+0x14>
  }
}
 8000b10:	bf00      	nop
 8000b12:	372c      	adds	r7, #44	; 0x2c
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	10210000 	.word	0x10210000
 8000b20:	10110000 	.word	0x10110000
 8000b24:	10120000 	.word	0x10120000
 8000b28:	10310000 	.word	0x10310000
 8000b2c:	10320000 	.word	0x10320000
 8000b30:	10220000 	.word	0x10220000
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	40010800 	.word	0x40010800
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	40011000 	.word	0x40011000
 8000b48:	40011400 	.word	0x40011400
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b60:	787b      	ldrb	r3, [r7, #1]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b6c:	e003      	b.n	8000b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	041a      	lsls	r2, r3, #16
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e26c      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 8087 	beq.w	8000cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba0:	4b92      	ldr	r3, [pc, #584]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 030c 	and.w	r3, r3, #12
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d00c      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bac:	4b8f      	ldr	r3, [pc, #572]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d112      	bne.n	8000bde <HAL_RCC_OscConfig+0x5e>
 8000bb8:	4b8c      	ldr	r3, [pc, #560]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc4:	d10b      	bne.n	8000bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc6:	4b89      	ldr	r3, [pc, #548]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d06c      	beq.n	8000cac <HAL_RCC_OscConfig+0x12c>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d168      	bne.n	8000cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e246      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be6:	d106      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x76>
 8000be8:	4b80      	ldr	r3, [pc, #512]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a7f      	ldr	r2, [pc, #508]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e02e      	b.n	8000c54 <HAL_RCC_OscConfig+0xd4>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10c      	bne.n	8000c18 <HAL_RCC_OscConfig+0x98>
 8000bfe:	4b7b      	ldr	r3, [pc, #492]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a7a      	ldr	r2, [pc, #488]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b78      	ldr	r3, [pc, #480]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a77      	ldr	r2, [pc, #476]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e01d      	b.n	8000c54 <HAL_RCC_OscConfig+0xd4>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c20:	d10c      	bne.n	8000c3c <HAL_RCC_OscConfig+0xbc>
 8000c22:	4b72      	ldr	r3, [pc, #456]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a71      	ldr	r2, [pc, #452]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	4b6f      	ldr	r3, [pc, #444]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a6e      	ldr	r2, [pc, #440]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e00b      	b.n	8000c54 <HAL_RCC_OscConfig+0xd4>
 8000c3c:	4b6b      	ldr	r3, [pc, #428]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a6a      	ldr	r2, [pc, #424]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b68      	ldr	r3, [pc, #416]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a67      	ldr	r2, [pc, #412]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fd30 	bl	80006c0 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fd2c 	bl	80006c0 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b64      	cmp	r3, #100	; 0x64
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e1fa      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f0      	beq.n	8000c64 <HAL_RCC_OscConfig+0xe4>
 8000c82:	e014      	b.n	8000cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fd1c 	bl	80006c0 <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c8c:	f7ff fd18 	bl	80006c0 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b64      	cmp	r3, #100	; 0x64
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e1e6      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	4b53      	ldr	r3, [pc, #332]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f0      	bne.n	8000c8c <HAL_RCC_OscConfig+0x10c>
 8000caa:	e000      	b.n	8000cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d063      	beq.n	8000d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cba:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00b      	beq.n	8000cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cc6:	4b49      	ldr	r3, [pc, #292]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d11c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x18c>
 8000cd2:	4b46      	ldr	r3, [pc, #280]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d116      	bne.n	8000d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	4b43      	ldr	r3, [pc, #268]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x176>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d001      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e1ba      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	4939      	ldr	r1, [pc, #228]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000d06:	4313      	orrs	r3, r2
 8000d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	e03a      	b.n	8000d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d020      	beq.n	8000d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <HAL_RCC_OscConfig+0x270>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fcd1 	bl	80006c0 <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d22:	f7ff fccd 	bl	80006c0 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e19b      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f0      	beq.n	8000d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d40:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4927      	ldr	r1, [pc, #156]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
 8000d54:	e015      	b.n	8000d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <HAL_RCC_OscConfig+0x270>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fcb0 	bl	80006c0 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d64:	f7ff fcac 	bl	80006c0 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e17a      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f0      	bne.n	8000d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d03a      	beq.n	8000e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d019      	beq.n	8000dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_RCC_OscConfig+0x274>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9c:	f7ff fc90 	bl	80006c0 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc8c 	bl	80006c0 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e15a      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_RCC_OscConfig+0x26c>)
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 fada 	bl	800137c <RCC_Delay>
 8000dc8:	e01c      	b.n	8000e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_RCC_OscConfig+0x274>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fc76 	bl	80006c0 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd6:	e00f      	b.n	8000df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fc72 	bl	80006c0 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d908      	bls.n	8000df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e140      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	42420000 	.word	0x42420000
 8000df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df8:	4b9e      	ldr	r3, [pc, #632]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1e9      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80a6 	beq.w	8000f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e16:	4b97      	ldr	r3, [pc, #604]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10d      	bne.n	8000e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b94      	ldr	r3, [pc, #592]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a93      	ldr	r2, [pc, #588]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b91      	ldr	r3, [pc, #580]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3e:	4b8e      	ldr	r3, [pc, #568]	; (8001078 <HAL_RCC_OscConfig+0x4f8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d118      	bne.n	8000e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4a:	4b8b      	ldr	r3, [pc, #556]	; (8001078 <HAL_RCC_OscConfig+0x4f8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a8a      	ldr	r2, [pc, #552]	; (8001078 <HAL_RCC_OscConfig+0x4f8>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e56:	f7ff fc33 	bl	80006c0 <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e5e:	f7ff fc2f 	bl	80006c0 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b64      	cmp	r3, #100	; 0x64
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e0fd      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	4b81      	ldr	r3, [pc, #516]	; (8001078 <HAL_RCC_OscConfig+0x4f8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f0      	beq.n	8000e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x312>
 8000e84:	4b7b      	ldr	r3, [pc, #492]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4a7a      	ldr	r2, [pc, #488]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6213      	str	r3, [r2, #32]
 8000e90:	e02d      	b.n	8000eee <HAL_RCC_OscConfig+0x36e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x334>
 8000e9a:	4b76      	ldr	r3, [pc, #472]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4a75      	ldr	r2, [pc, #468]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	6213      	str	r3, [r2, #32]
 8000ea6:	4b73      	ldr	r3, [pc, #460]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a72      	ldr	r2, [pc, #456]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	6213      	str	r3, [r2, #32]
 8000eb2:	e01c      	b.n	8000eee <HAL_RCC_OscConfig+0x36e>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d10c      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x356>
 8000ebc:	4b6d      	ldr	r3, [pc, #436]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a6c      	ldr	r2, [pc, #432]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6213      	str	r3, [r2, #32]
 8000ec8:	4b6a      	ldr	r3, [pc, #424]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a69      	ldr	r2, [pc, #420]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	e00b      	b.n	8000eee <HAL_RCC_OscConfig+0x36e>
 8000ed6:	4b67      	ldr	r3, [pc, #412]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4a66      	ldr	r2, [pc, #408]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6213      	str	r3, [r2, #32]
 8000ee2:	4b64      	ldr	r3, [pc, #400]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a63      	ldr	r2, [pc, #396]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d015      	beq.n	8000f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fbe3 	bl	80006c0 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fbdf 	bl	80006c0 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e0ab      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0ee      	beq.n	8000efe <HAL_RCC_OscConfig+0x37e>
 8000f20:	e014      	b.n	8000f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fbcd 	bl	80006c0 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f28:	e00a      	b.n	8000f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fbc9 	bl	80006c0 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e095      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1ee      	bne.n	8000f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d105      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a47      	ldr	r2, [pc, #284]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8081 	beq.w	800106a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f68:	4b42      	ldr	r3, [pc, #264]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d061      	beq.n	8001038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d146      	bne.n	800100a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	; (800107c <HAL_RCC_OscConfig+0x4fc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fb9d 	bl	80006c0 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8a:	f7ff fb99 	bl	80006c0 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e067      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9c:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f0      	bne.n	8000f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d108      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	492d      	ldr	r1, [pc, #180]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a19      	ldr	r1, [r3, #32]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	4927      	ldr	r1, [pc, #156]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_RCC_OscConfig+0x4fc>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fb6d 	bl	80006c0 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fb69 	bl	80006c0 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e037      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x46a>
 8001008:	e02f      	b.n	800106a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_RCC_OscConfig+0x4fc>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fb56 	bl	80006c0 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001018:	f7ff fb52 	bl	80006c0 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e020      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x498>
 8001036:	e018      	b.n	800106a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e013      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	429a      	cmp	r2, r3
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001062:	429a      	cmp	r2, r3
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	40007000 	.word	0x40007000
 800107c:	42420060 	.word	0x42420060

08001080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0d0      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001094:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d910      	bls.n	80010c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	4b67      	ldr	r3, [pc, #412]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 0207 	bic.w	r2, r3, #7
 80010aa:	4965      	ldr	r1, [pc, #404]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d001      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0b8      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a58      	ldr	r2, [pc, #352]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	494d      	ldr	r1, [pc, #308]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d040      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b47      	ldr	r3, [pc, #284]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d115      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e07f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d109      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e073      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e06b      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115e:	4b39      	ldr	r3, [pc, #228]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f023 0203 	bic.w	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4936      	ldr	r1, [pc, #216]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001170:	f7ff faa6 	bl	80006c0 <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001176:	e00a      	b.n	800118e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f7ff faa2 	bl	80006c0 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f241 3288 	movw	r2, #5000	; 0x1388
 8001186:	4293      	cmp	r3, r2
 8001188:	d901      	bls.n	800118e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e053      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 020c 	and.w	r2, r3, #12
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	429a      	cmp	r2, r3
 800119e:	d1eb      	bne.n	8001178 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d210      	bcs.n	80011d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 0207 	bic.w	r2, r3, #7
 80011b6:	4922      	ldr	r1, [pc, #136]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e032      	b.n	8001236 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4916      	ldr	r1, [pc, #88]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d009      	beq.n	800120e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800120e:	f000 f821 	bl	8001254 <HAL_RCC_GetSysClockFreq>
 8001212:	4601      	mov	r1, r0
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_RCC_ClockConfig+0x1c8>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	fa21 f303 	lsr.w	r3, r1, r3
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_RCC_ClockConfig+0x1cc>)
 8001228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_ClockConfig+0x1d0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fa04 	bl	800063c <HAL_InitTick>

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000
 8001244:	40021000 	.word	0x40021000
 8001248:	080018e8 	.word	0x080018e8
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001254:	b490      	push	{r4, r7}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_RCC_GetSysClockFreq+0xb0>)
 800125c:	1d3c      	adds	r4, r7, #4
 800125e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b04      	cmp	r3, #4
 800128c:	d002      	beq.n	8001294 <HAL_RCC_GetSysClockFreq+0x40>
 800128e:	2b08      	cmp	r3, #8
 8001290:	d003      	beq.n	800129a <HAL_RCC_GetSysClockFreq+0x46>
 8001292:	e02d      	b.n	80012f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001296:	623b      	str	r3, [r7, #32]
      break;
 8001298:	e02d      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	0c9b      	lsrs	r3, r3, #18
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012a6:	4413      	add	r3, r2
 80012a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	0c5b      	lsrs	r3, r3, #17
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012c6:	4413      	add	r3, r2
 80012c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012d2:	fb02 f203 	mul.w	r2, r2, r3
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
 80012de:	e004      	b.n	80012ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	623b      	str	r3, [r7, #32]
      break;
 80012ee:	e002      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012f2:	623b      	str	r3, [r7, #32]
      break;
 80012f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f6:	6a3b      	ldr	r3, [r7, #32]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc90      	pop	{r4, r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	080018d4 	.word	0x080018d4
 8001308:	080018e4 	.word	0x080018e4
 800130c:	40021000 	.word	0x40021000
 8001310:	007a1200 	.word	0x007a1200
 8001314:	003d0900 	.word	0x003d0900

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <HAL_RCC_GetHCLKFreq+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000

0800132c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001330:	f7ff fff2 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001334:	4601      	mov	r1, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	080018f8 	.word	0x080018f8

08001354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001358:	f7ff ffde 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 800135c:	4601      	mov	r1, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0adb      	lsrs	r3, r3, #11
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	080018f8 	.word	0x080018f8

0800137c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <RCC_Delay+0x34>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <RCC_Delay+0x38>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0a5b      	lsrs	r3, r3, #9
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001398:	bf00      	nop
  }
  while (Delay --);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	60fa      	str	r2, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f9      	bne.n	8001398 <RCC_Delay+0x1c>
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000
 80013b4:	10624dd3 	.word	0x10624dd3

080013b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e03f      	b.n	800144a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f874 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2224      	movs	r2, #36	; 0x24
 80013e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f9a3 	bl	8001748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b08a      	sub	sp, #40	; 0x28
 8001456:	af02      	add	r7, sp, #8
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4613      	mov	r3, r2
 8001460:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d17c      	bne.n	800156c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_UART_Transmit+0x2c>
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e075      	b.n	800156e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_UART_Transmit+0x3e>
 800148c:	2302      	movs	r3, #2
 800148e:	e06e      	b.n	800156e <HAL_UART_Transmit+0x11c>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2221      	movs	r2, #33	; 0x21
 80014a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014a6:	f7ff f90b 	bl	80006c0 <HAL_GetTick>
 80014aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c0:	d108      	bne.n	80014d4 <HAL_UART_Transmit+0x82>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d104      	bne.n	80014d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	e003      	b.n	80014dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80014e4:	e02a      	b.n	800153c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2200      	movs	r2, #0
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f8df 	bl	80016b4 <UART_WaitOnFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e036      	b.n	800156e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10b      	bne.n	800151e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001514:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	3302      	adds	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e007      	b.n	800152e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3301      	adds	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1cf      	bne.n	80014e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2200      	movs	r2, #0
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f8af 	bl	80016b4 <UART_WaitOnFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e006      	b.n	800156e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800156c:	2302      	movs	r3, #2
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b08a      	sub	sp, #40	; 0x28
 800157a:	af02      	add	r7, sp, #8
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 8089 	bne.w	80016aa <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_UART_Receive+0x2e>
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e081      	b.n	80016ac <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_UART_Receive+0x40>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e07a      	b.n	80016ac <HAL_UART_Receive+0x136>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2222      	movs	r2, #34	; 0x22
 80015c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80015cc:	f7ff f878 	bl	80006c0 <HAL_GetTick>
 80015d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	88fa      	ldrh	r2, [r7, #6]
 80015dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e6:	d108      	bne.n	80015fa <HAL_UART_Receive+0x84>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	e003      	b.n	8001602 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800160a:	e043      	b.n	8001694 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2200      	movs	r2, #0
 8001614:	2120      	movs	r1, #32
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 f84c 	bl	80016b4 <UART_WaitOnFlagUntilTimeout>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e042      	b.n	80016ac <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10c      	bne.n	8001646 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	b29b      	uxth	r3, r3
 8001634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001638:	b29a      	uxth	r2, r3
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	3302      	adds	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	e01f      	b.n	8001686 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164e:	d007      	beq.n	8001660 <HAL_UART_Receive+0xea>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10a      	bne.n	800166e <HAL_UART_Receive+0xf8>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d106      	bne.n	800166e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e008      	b.n	8001680 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800167a:	b2da      	uxtb	r2, r3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3301      	adds	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001698:	b29b      	uxth	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1b6      	bne.n	800160c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016c4:	e02c      	b.n	8001720 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d028      	beq.n	8001720 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80016d4:	f7fe fff4 	bl	80006c0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d21d      	bcs.n	8001720 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2220      	movs	r2, #32
 8001710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e00f      	b.n	8001740 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4013      	ands	r3, r2
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	429a      	cmp	r2, r3
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	429a      	cmp	r2, r3
 800173c:	d0c3      	beq.n	80016c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001782:	f023 030c 	bic.w	r3, r3, #12
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	430b      	orrs	r3, r1
 800178e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2c      	ldr	r2, [pc, #176]	; (800185c <UART_SetConfig+0x114>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d103      	bne.n	80017b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017b0:	f7ff fdd0 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	e002      	b.n	80017be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80017b8:	f7ff fdb8 	bl	800132c <HAL_RCC_GetPCLK1Freq>
 80017bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009a      	lsls	r2, r3, #2
 80017c8:	441a      	add	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d4:	4a22      	ldr	r2, [pc, #136]	; (8001860 <UART_SetConfig+0x118>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	0119      	lsls	r1, r3, #4
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	009a      	lsls	r2, r3, #2
 80017e8:	441a      	add	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <UART_SetConfig+0x118>)
 80017f6:	fba3 0302 	umull	r0, r3, r3, r2
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	fb00 f303 	mul.w	r3, r0, r3
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	3332      	adds	r3, #50	; 0x32
 8001808:	4a15      	ldr	r2, [pc, #84]	; (8001860 <UART_SetConfig+0x118>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001814:	4419      	add	r1, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009a      	lsls	r2, r3, #2
 8001820:	441a      	add	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fbb2 f2f3 	udiv	r2, r2, r3
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <UART_SetConfig+0x118>)
 800182e:	fba3 0302 	umull	r0, r3, r3, r2
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2064      	movs	r0, #100	; 0x64
 8001836:	fb00 f303 	mul.w	r3, r0, r3
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	3332      	adds	r3, #50	; 0x32
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <UART_SetConfig+0x118>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	f003 020f 	and.w	r2, r3, #15
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	440a      	add	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013800 	.word	0x40013800
 8001860:	51eb851f 	.word	0x51eb851f

08001864 <__libc_init_array>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	2500      	movs	r5, #0
 8001868:	4e0c      	ldr	r6, [pc, #48]	; (800189c <__libc_init_array+0x38>)
 800186a:	4c0d      	ldr	r4, [pc, #52]	; (80018a0 <__libc_init_array+0x3c>)
 800186c:	1ba4      	subs	r4, r4, r6
 800186e:	10a4      	asrs	r4, r4, #2
 8001870:	42a5      	cmp	r5, r4
 8001872:	d109      	bne.n	8001888 <__libc_init_array+0x24>
 8001874:	f000 f822 	bl	80018bc <_init>
 8001878:	2500      	movs	r5, #0
 800187a:	4e0a      	ldr	r6, [pc, #40]	; (80018a4 <__libc_init_array+0x40>)
 800187c:	4c0a      	ldr	r4, [pc, #40]	; (80018a8 <__libc_init_array+0x44>)
 800187e:	1ba4      	subs	r4, r4, r6
 8001880:	10a4      	asrs	r4, r4, #2
 8001882:	42a5      	cmp	r5, r4
 8001884:	d105      	bne.n	8001892 <__libc_init_array+0x2e>
 8001886:	bd70      	pop	{r4, r5, r6, pc}
 8001888:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800188c:	4798      	blx	r3
 800188e:	3501      	adds	r5, #1
 8001890:	e7ee      	b.n	8001870 <__libc_init_array+0xc>
 8001892:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001896:	4798      	blx	r3
 8001898:	3501      	adds	r5, #1
 800189a:	e7f2      	b.n	8001882 <__libc_init_array+0x1e>
 800189c:	08001900 	.word	0x08001900
 80018a0:	08001900 	.word	0x08001900
 80018a4:	08001900 	.word	0x08001900
 80018a8:	08001904 	.word	0x08001904

080018ac <memset>:
 80018ac:	4603      	mov	r3, r0
 80018ae:	4402      	add	r2, r0
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d100      	bne.n	80018b6 <memset+0xa>
 80018b4:	4770      	bx	lr
 80018b6:	f803 1b01 	strb.w	r1, [r3], #1
 80018ba:	e7f9      	b.n	80018b0 <memset+0x4>

080018bc <_init>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	bf00      	nop
 80018c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018c2:	bc08      	pop	{r3}
 80018c4:	469e      	mov	lr, r3
 80018c6:	4770      	bx	lr

080018c8 <_fini>:
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	bf00      	nop
 80018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ce:	bc08      	pop	{r3}
 80018d0:	469e      	mov	lr, r3
 80018d2:	4770      	bx	lr
