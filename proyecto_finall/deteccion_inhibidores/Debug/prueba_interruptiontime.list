
prueba_interruptiontime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003908  08003908  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  08003908  08003908  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003908  08003908  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000015c  08003a6c  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003a6c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e355  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d7c  00000000  00000000  0002e4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  00030258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  000310a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a72  00000000  00000000  00031e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000994f  00000000  00000000  00047882  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007461d  00000000  00000000  000511d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c57ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf8  00000000  00000000  000c586c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	080038c4 	.word	0x080038c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	080038c4 	.word	0x080038c4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <DWT_Delay_Init+0x58>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <DWT_Delay_Init+0x58>)
 8000946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800094a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <DWT_Delay_Init+0x58>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <DWT_Delay_Init+0x58>)
 8000952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000956:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <DWT_Delay_Init+0x5c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <DWT_Delay_Init+0x5c>)
 800095e:	f023 0301 	bic.w	r3, r3, #1
 8000962:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <DWT_Delay_Init+0x5c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <DWT_Delay_Init+0x5c>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <DWT_Delay_Init+0x5c>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000976:	bf00      	nop
     __ASM volatile ("NOP");
 8000978:	bf00      	nop
  __ASM volatile ("NOP");
 800097a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <DWT_Delay_Init+0x5c>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000984:	2300      	movs	r3, #0
 8000986:	e000      	b.n	800098a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000988:	2301      	movs	r3, #1
  }
}
 800098a:	4618      	mov	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000edf0 	.word	0xe000edf0
 8000998:	e0001000 	.word	0xe0001000

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fe51 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f833 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 f925 	bl	8000bf8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009ae:	f000 f875 	bl	8000a9c <MX_SPI1_Init>
  MX_TIM4_Init();
 80009b2:	f000 f8a9 	bl	8000b08 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80009b6:	f000 f8f5 	bl	8000ba4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  uint32_t error;
  uint8_t i = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	737b      	strb	r3, [r7, #13]
  uint16_t marcstate=0;
 80009be:	2300      	movs	r3, #0
 80009c0:	81fb      	strh	r3, [r7, #14]


  //Init rf driver
  error = rf_begin(&hspi1, AKS_115_kb, MHz434, CS_GPIO_Port, CS_Pin, GDO0_Pin);
 80009c2:	2308      	movs	r3, #8
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	2310      	movs	r3, #16
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <main+0x68>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	2107      	movs	r1, #7
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <main+0x6c>)
 80009d2:	f000 fb1b 	bl	800100c <rf_begin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	60bb      	str	r3, [r7, #8]
  rf_write_strobe(SRX);
 80009da:	2034      	movs	r0, #52	; 0x34
 80009dc:	f000 fbe2 	bl	80011a4 <rf_write_strobe>

  while(marcstate != RX){
 80009e0:	e004      	b.n	80009ec <main+0x50>
  		marcstate = (rf_read_register(MARCSTATE)); //read out state of cc1100 to be sure in RX
 80009e2:	20f5      	movs	r0, #245	; 0xf5
 80009e4:	f000 fbef 	bl	80011c6 <rf_read_register>
 80009e8:	4603      	mov	r3, r0
 80009ea:	81fb      	strh	r3, [r7, #14]
  while(marcstate != RX){
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	2b0d      	cmp	r3, #13
 80009f0:	d1f7      	bne.n	80009e2 <main+0x46>
  	}

  HAL_TIM_Base_Start_IT(&htim4);
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <main+0x70>)
 80009f4:	f002 fabd 	bl	8002f72 <HAL_TIM_Base_Start_IT>


  int result = rf_read_register(MARCSTATE);
 80009f8:	20f5      	movs	r0, #245	; 0xf5
 80009fa:	f000 fbe4 	bl	80011c6 <rf_read_register>
 80009fe:	4603      	mov	r3, r0
 8000a00:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <main+0x66>
 8000a04:	40010800 	.word	0x40010800
 8000a08:	2000020c 	.word	0x2000020c
 8000a0c:	20000188 	.word	0x20000188

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 ff48 	bl	80038b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f929 	bl	8001cb0 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a64:	f000 faaa 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2102      	movs	r1, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fb94 	bl	80021b0 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a8e:	f000 fa95 	bl	8000fbc <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3740      	adds	r7, #64	; 0x40
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <MX_SPI1_Init+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000aa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000acc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ad0:	2238      	movs	r2, #56	; 0x38
 8000ad2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000ae8:	220a      	movs	r2, #10
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_SPI1_Init+0x64>)
 8000aee:	f001 fcfb 	bl	80024e8 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af8:	f000 fa60 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000020c 	.word	0x2000020c
 8000b04:	40013000 	.word	0x40013000

08000b08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <MX_TIM4_Init+0x98>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b2c:	f240 529f 	movw	r2, #1439	; 0x59f
 8000b30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b4c:	f002 f9e6 	bl	8002f1c <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 fa31 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b68:	f002 fb2e 	bl	80031c8 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f000 fa23 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM4_Init+0x94>)
 8000b84:	f002 fcf4 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 fa15 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000188 	.word	0x20000188
 8000ba0:	40000800 	.word	0x40000800

08000ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_USART1_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	f002 fd1e 	bl	800361c <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f000 f9e9 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001c8 	.word	0x200001c8
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a41      	ldr	r2, [pc, #260]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0320 	and.w	r3, r3, #32
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a3b      	ldr	r2, [pc, #236]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a35      	ldr	r2, [pc, #212]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c72:	4830      	ldr	r0, [pc, #192]	; (8000d34 <MX_GPIO_Init+0x13c>)
 8000c74:	f000 ffeb 	bl	8001c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	482e      	ldr	r0, [pc, #184]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c7e:	f000 ffe6 	bl	8001c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000c88:	482c      	ldr	r0, [pc, #176]	; (8000d3c <MX_GPIO_Init+0x144>)
 8000c8a:	f000 ffe0 	bl	8001c4e <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4823      	ldr	r0, [pc, #140]	; (8000d34 <MX_GPIO_Init+0x13c>)
 8000ca8:	f000 fe60 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cac:	2304      	movs	r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000cc0:	f000 fe54 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : GDO0_Pin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <MX_GPIO_Init+0x148>)
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000cd8:	f000 fe48 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000cf4:	f000 fe3a 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000cf8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000cfc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <MX_GPIO_Init+0x144>)
 8000d12:	f000 fe2b 	bl	800196c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2009      	movs	r0, #9
 8000d1c:	f000 fdef 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d20:	2009      	movs	r0, #9
 8000d22:	f000 fe08 	bl	8001936 <HAL_NVIC_EnableIRQ>

}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40011000 	.word	0x40011000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	10210000 	.word	0x10210000

08000d44 <HAL_TIM_PeriodElapsedCallback>:
int test(){
return 0;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

	int result_RSSI;
	uint8_t result;


	if(htim->Instance == TIM4){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a63      	ldr	r2, [pc, #396]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	f040 80bf 	bne.w	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x192>
		contador200ms++;
 8000d58:	4b62      	ldr	r3, [pc, #392]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b60      	ldr	r3, [pc, #384]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d62:	801a      	strh	r2, [r3, #0]

		if(contador200ms == 4999){
 8000d64:	4b5f      	ldr	r3, [pc, #380]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d11c      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x66>
			contador200ms = 0;
 8000d70:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]

			result = rf_read_register(RSSI);
 8000d76:	20f4      	movs	r0, #244	; 0xf4
 8000d78:	f000 fa25 	bl	80011c6 <rf_read_register>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	72fb      	strb	r3, [r7, #11]
			if(result < 128){
 8000d80:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db05      	blt.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x50>
				result_RSSI = (int)(result/2)-74;
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	3b4a      	subs	r3, #74	; 0x4a
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e007      	b.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x60>
			}
			else{
				result_RSSI = (int)((result -256)/2)-74;
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d9a:	0fda      	lsrs	r2, r3, #31
 8000d9c:	4413      	add	r3, r2
 8000d9e:	105b      	asrs	r3, r3, #1
 8000da0:	3b4a      	subs	r3, #74	; 0x4a
 8000da2:	60fb      	str	r3, [r7, #12]
			}

			RSSI_level(result_RSSI);
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f8b7 	bl	8000f18 <RSSI_level>
		}

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1){
 8000daa:	2104      	movs	r1, #4
 8000dac:	484e      	ldr	r0, [pc, #312]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dae:	f000 ff37 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d102      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x7a>
			contador500ms_start = 1;
 8000db8:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
		}

		if(contador500ms_start == 1) {
 8000dbe:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d030      	beq.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0xe4>
			contador500ms++;
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b48      	ldr	r3, [pc, #288]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000dd0:	801a      	strh	r2, [r3, #0]

			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) {
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4844      	ldr	r0, [pc, #272]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dd6:	f000 ff23 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d110      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0xbe>
				if(banderadeuno == 0){
 8000de0:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <HAL_TIM_PeriodElapsedCallback+0xb6>
					contador10cero_consecutivo++;
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000df8:	801a      	strh	r2, [r3, #0]
				}
				banderadeuno=0;
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e012      	b.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0xe4>

			}

			else {
				promediador++;
 8000e02:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e0c:	801a      	strh	r2, [r3, #0]
				if(banderadeuno == 1){
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0xd8>
					contador10cero_consecutivo = 0;
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	801a      	strh	r2, [r3, #0]
				}
				banderadeuno = 1;
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
				b10ms_clear=0;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
			}

		}
		if(contador500ms == 12500) {
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d150      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x192>

			if(contador10cero_consecutivo >= 250 ){
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	2bf9      	cmp	r3, #249	; 0xf9
 8000e3a:	d902      	bls.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0xfe>
				b10ms_clear=1;
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
			}
			promedio = (int)((promediador*100)/12500);
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	fb03 f302 	mul.w	r3, r3, r2
 8000e4e:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000e50:	fb82 1203 	smull	r1, r2, r2, r3
 8000e54:	1292      	asrs	r2, r2, #10
 8000e56:	17db      	asrs	r3, r3, #31
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000e5e:	801a      	strh	r2, [r3, #0]
			if (promedio > 40){
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	2b28      	cmp	r3, #40	; 0x28
 8000e66:	d902      	bls.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x12a>
				bLed = 1;
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
			}
			contador500ms = 0;
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	801a      	strh	r2, [r3, #0]
			contador500ms_start = 0;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
			contador10cero_consecutivo = 0;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	801a      	strh	r2, [r3, #0]
			promediador = 0;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	801a      	strh	r2, [r3, #0]
			contador1000ms++;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e90:	701a      	strb	r2, [r3, #0]


			if(contador1000ms < 2){
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d80a      	bhi.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x16c>
				if(bLed == 1){
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d019      	beq.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x192>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea8:	481a      	ldr	r0, [pc, #104]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000eaa:	f000 fed0 	bl	8001c4e <HAL_GPIO_WritePin>


		}
	}

}
 8000eae:	e012      	b.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x192>
				if(bLed == 0){
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x186>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000ec6:	f000 fec2 	bl	8001c4e <HAL_GPIO_WritePin>
				bLed = 0;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
				contador1000ms = 0;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40000800 	.word	0x40000800
 8000ee4:	2000017c 	.word	0x2000017c
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	20000208 	.word	0x20000208
 8000ef0:	20000178 	.word	0x20000178
 8000ef4:	20000264 	.word	0x20000264
 8000ef8:	2000017a 	.word	0x2000017a
 8000efc:	20000266 	.word	0x20000266
 8000f00:	2000017f 	.word	0x2000017f
 8000f04:	14f8b589 	.word	0x14f8b589
 8000f08:	20000184 	.word	0x20000184
 8000f0c:	20000180 	.word	0x20000180
 8000f10:	2000017e 	.word	0x2000017e
 8000f14:	40011000 	.word	0x40011000

08000f18 <RSSI_level>:

void RSSI_level(int RSSI_lvl){
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

	int ledLevel;
    uint16_t puerto = 1024;
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f24:	82fb      	strh	r3, [r7, #22]

	ledLevel = (0.06*RSSI_lvl+7.2);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fa64 	bl	80003f4 <__aeabi_i2d>
 8000f2c:	a31e      	add	r3, pc, #120	; (adr r3, 8000fa8 <RSSI_level+0x90>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fac9 	bl	80004c8 <__aeabi_dmul>
 8000f36:	4603      	mov	r3, r0
 8000f38:	460c      	mov	r4, r1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	a31c      	add	r3, pc, #112	; (adr r3, 8000fb0 <RSSI_level+0x98>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff f90a 	bl	800015c <__adddf3>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	460c      	mov	r4, r1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	4621      	mov	r1, r4
 8000f50:	f7ff fccc 	bl	80008ec <__aeabi_d2iz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<7; i++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	e01c      	b.n	8000f98 <RSSI_level+0x80>
		if(i!=0) puerto = puerto * i;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <RSSI_level+0x58>
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	8afa      	ldrh	r2, [r7, #22]
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	82fb      	strh	r3, [r7, #22]

		if(i < ledLevel){
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	da06      	bge.n	8000f86 <RSSI_level+0x6e>
			HAL_GPIO_WritePin(GPIOB, puerto, 1);
 8000f78:	8afb      	ldrh	r3, [r7, #22]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <RSSI_level+0xa0>)
 8000f80:	f000 fe65 	bl	8001c4e <HAL_GPIO_WritePin>
 8000f84:	e005      	b.n	8000f92 <RSSI_level+0x7a>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, puerto, 0);
 8000f86:	8afb      	ldrh	r3, [r7, #22]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <RSSI_level+0xa0>)
 8000f8e:	f000 fe5e 	bl	8001c4e <HAL_GPIO_WritePin>
	for(int i=0; i<7; i++){
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	3301      	adds	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	dddf      	ble.n	8000f5e <RSSI_level+0x46>
		}
	}

}
 8000f9e:	bf00      	nop
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd90      	pop	{r4, r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	eb851eb8 	.word	0xeb851eb8
 8000fac:	3faeb851 	.word	0x3faeb851
 8000fb0:	cccccccd 	.word	0xcccccccd
 8000fb4:	401ccccc 	.word	0x401ccccc
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <DWT_Delay_us+0x3c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fd6:	f001 fa37 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <DWT_Delay_us+0x40>)
 8000fde:	fba3 2302 	umull	r2, r3, r3, r2
 8000fe2:	0c9b      	lsrs	r3, r3, #18
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000fec:	bf00      	nop
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <DWT_Delay_us+0x3c>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad2      	subs	r2, r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3f8      	bcc.n	8000fee <DWT_Delay_us+0x26>
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	e0001000 	.word	0xe0001000
 8001008:	431bde83 	.word	0x431bde83

0800100c <rf_begin>:
/* Private user code ---------------------------------------------------------*/

/* RF DRIVER ----------------------------------------------------------------------------------------------------------------------*/

/*--------------------------[CC1101 Init and Settings]------------------------------*/
uint8_t rf_begin(SPI_HandleTypeDef* hspi, MODULATION_TypeDef mode, ISMBAND_TypeDef ism_band, GPIO_TypeDef* cs_port, uint16_t cs_pin, uint16_t gdo0){
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	72fb      	strb	r3, [r7, #11]
 800101a:	4613      	mov	r3, r2
 800101c:	72bb      	strb	r3, [r7, #10]
	 * @param gdo0: Pin number of the pin connected to C1101 CGDO0, used for interruptions. Interruption is configured as FALLING EDGE.
	 *
	 */

	//Pinout linking
	hal_spi = hspi;
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <rf_begin+0x6c>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 8001024:	4a15      	ldr	r2, [pc, #84]	; (800107c <rf_begin+0x70>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 800102a:	4a15      	ldr	r2, [pc, #84]	; (8001080 <rf_begin+0x74>)
 800102c:	8b3b      	ldrh	r3, [r7, #24]
 800102e:	8013      	strh	r3, [r2, #0]
	GDO0_Pin = gdo0;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <rf_begin+0x78>)
 8001032:	8bbb      	ldrh	r3, [r7, #28]
 8001034:	8013      	strh	r3, [r2, #0]

	//Turn on the chip
	rf_reset();
 8001036:	f000 f827 	bl	8001088 <rf_reset>
	HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f000 fb66 	bl	800170c <HAL_Delay>

	//Check that the SPI works
	if(!rf_check()){
 8001040:	f000 f848 	bl	80010d4 <rf_check>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <rf_begin+0x42>
		return FALSE;
 800104a:	2300      	movs	r3, #0
 800104c:	e010      	b.n	8001070 <rf_begin+0x64>
	}


	rf_write_strobe(SFTX); //Flush TX FIFO
 800104e:	203b      	movs	r0, #59	; 0x3b
 8001050:	f000 f8a8 	bl	80011a4 <rf_write_strobe>
	HAL_Delay(1); //TODO I don't think this is really needed
 8001054:	2001      	movs	r0, #1
 8001056:	f000 fb59 	bl	800170c <HAL_Delay>
	rf_write_strobe(SFRX); //Flush RX FIFO
 800105a:	203a      	movs	r0, #58	; 0x3a
 800105c:	f000 f8a2 	bl	80011a4 <rf_write_strobe>
	HAL_Delay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f000 fb53 	bl	800170c <HAL_Delay>

	rf_set_modulation_mode(mode);
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f851 	bl	8001110 <rf_set_modulation_mode>

	return TRUE;
 800106e:	2301      	movs	r3, #1


}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000026c 	.word	0x2000026c
 800107c:	20000268 	.word	0x20000268
 8001080:	20000272 	.word	0x20000272
 8001084:	20000270 	.word	0x20000270

08001088 <rf_reset>:

void rf_reset(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	/**
	 * @brief Turns on the RF chip with a specific sequence on the CS pin and a SRES command.
	 * The former is only needed on a cold start.
	 */
	DWT_Delay_Init();
 800108c:	f7ff fc56 	bl	800093c <DWT_Delay_Init>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <rf_reset+0x44>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <rf_reset+0x48>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	f000 fdd7 	bl	8001c4e <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f7ff ff91 	bl	8000fc8 <DWT_Delay_us>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <rf_reset+0x44>)
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <rf_reset+0x48>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4619      	mov	r1, r3
 80010b2:	f000 fdcc 	bl	8001c4e <HAL_GPIO_WritePin>
	DWT_Delay_us(40);
 80010b6:	2028      	movs	r0, #40	; 0x28
 80010b8:	f7ff ff86 	bl	8000fc8 <DWT_Delay_us>

	rf_write_strobe(SRES);
 80010bc:	2030      	movs	r0, #48	; 0x30
 80010be:	f000 f871 	bl	80011a4 <rf_write_strobe>
	HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fb22 	bl	800170c <HAL_Delay>

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000268 	.word	0x20000268
 80010d0:	20000272 	.word	0x20000272

080010d4 <rf_check>:

uint8_t rf_check(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	/**
	 * @brief Checks the version of the RF chip to check if SPI is OK. It checks 10 times to make sure wires are really OK.
	 */

	uint8_t ok = TRUE;
 80010da:	2301      	movs	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t version;
	for(i=0; i<10; i++){
 80010de:	2300      	movs	r3, #0
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	e00c      	b.n	80010fe <rf_check+0x2a>
		version = rf_read_register(VERSION);
 80010e4:	20f1      	movs	r0, #241	; 0xf1
 80010e6:	f000 f86e 	bl	80011c6 <rf_read_register>
 80010ea:	4603      	mov	r3, r0
 80010ec:	717b      	strb	r3, [r7, #5]
		if(version!=0x14)
 80010ee:	797b      	ldrb	r3, [r7, #5]
 80010f0:	2b14      	cmp	r3, #20
 80010f2:	d001      	beq.n	80010f8 <rf_check+0x24>
			ok = FALSE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<10; i++){
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	3301      	adds	r3, #1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	2b09      	cmp	r3, #9
 8001102:	d9ef      	bls.n	80010e4 <rf_check+0x10>
	if (ok){
		//printf("RF check: OK\n\r");
	}else{
		//printf("RF check: No luck :(\n\r");
	}
	return ok;
 8001104:	79fb      	ldrb	r3, [r7, #7]

}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <rf_set_modulation_mode>:

void rf_set_modulation_mode(MODULATION_TypeDef mode){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	 * @brief Loads the wanted modulation preset to the CC1101.
	 */

    uint8_t* cfg_reg;

    switch (mode)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	3b01      	subs	r3, #1
 800111e:	2b06      	cmp	r3, #6
 8001120:	d825      	bhi.n	800116e <rf_set_modulation_mode+0x5e>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <rf_set_modulation_mode+0x18>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001145 	.word	0x08001145
 800112c:	0800114b 	.word	0x0800114b
 8001130:	08001151 	.word	0x08001151
 8001134:	08001157 	.word	0x08001157
 8001138:	0800115d 	.word	0x0800115d
 800113c:	08001163 	.word	0x08001163
 8001140:	08001169 	.word	0x08001169
    {
        case GFSK_1_2_kb:
        			cfg_reg = cc1100_GFSK_1_2_kb;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <rf_set_modulation_mode+0x78>)
 8001146:	60fb      	str	r3, [r7, #12]
                    break;
 8001148:	e014      	b.n	8001174 <rf_set_modulation_mode+0x64>
        case GFSK_38_4_kb:
                    cfg_reg = cc1100_GFSK_38_4_kb;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <rf_set_modulation_mode+0x7c>)
 800114c:	60fb      	str	r3, [r7, #12]
                    break;
 800114e:	e011      	b.n	8001174 <rf_set_modulation_mode+0x64>
        case GFSK_100_kb:
        			cfg_reg = cc1100_GFSK_100_kb;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <rf_set_modulation_mode+0x80>)
 8001152:	60fb      	str	r3, [r7, #12]
                    break;
 8001154:	e00e      	b.n	8001174 <rf_set_modulation_mode+0x64>
        case MSK_250_kb:
        			cfg_reg = cc1100_MSK_250_kb;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <rf_set_modulation_mode+0x84>)
 8001158:	60fb      	str	r3, [r7, #12]
                    break;
 800115a:	e00b      	b.n	8001174 <rf_set_modulation_mode+0x64>
        case MSK_500_kb:
        			cfg_reg = cc1100_MSK_500_kb;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <rf_set_modulation_mode+0x88>)
 800115e:	60fb      	str	r3, [r7, #12]
                    break;
 8001160:	e008      	b.n	8001174 <rf_set_modulation_mode+0x64>
        case OOK_4_8_kb:
        			cfg_reg = cc1100_OOK_4_8_kb;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <rf_set_modulation_mode+0x8c>)
 8001164:	60fb      	str	r3, [r7, #12]
                    break;
 8001166:	e005      	b.n	8001174 <rf_set_modulation_mode+0x64>
        case AKS_115_kb:
					cfg_reg = cc1100_AKS_115_kb;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <rf_set_modulation_mode+0x90>)
 800116a:	60fb      	str	r3, [r7, #12]
					break;
 800116c:	e002      	b.n	8001174 <rf_set_modulation_mode+0x64>
        default:
        			cfg_reg = cc1100_GFSK_38_4_kb;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <rf_set_modulation_mode+0x7c>)
 8001170:	60fb      	str	r3, [r7, #12]
                    break;
 8001172:	bf00      	nop
    }

    rf_write_data(WRITE_BURST(0), cfg_reg, CFG_REGISTER);                            //writes all 47 config register
 8001174:	222f      	movs	r2, #47	; 0x2f
 8001176:	68f9      	ldr	r1, [r7, #12]
 8001178:	2040      	movs	r0, #64	; 0x40
 800117a:	f000 f83a 	bl	80011f2 <rf_write_data>

    //   test_cargar_cfg();

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000030 	.word	0x20000030
 800118c:	20000060 	.word	0x20000060
 8001190:	20000090 	.word	0x20000090
 8001194:	200000c0 	.word	0x200000c0
 8001198:	200000f0 	.word	0x200000f0
 800119c:	20000120 	.word	0x20000120
 80011a0:	20000000 	.word	0x20000000

080011a4 <rf_write_strobe>:
}


/* SPI Comm ----------------------------------------------------------------*/

void rf_write_strobe(uint8_t strobe){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Writes command to the CC1101 to change its state-machine state.
	 */
	strobe = WRITE(strobe);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, NULL, 0);
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f839 	bl	8001230 <__spi_write>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <rf_read_register>:

uint8_t rf_read_register(uint8_t reg){
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Reads the content of a single 1-byte register.
	 * @Returns The register value.
	 */
	uint8_t data;
	reg= READ(reg);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	71fb      	strb	r3, [r7, #7]
	__spi_read(&reg, &data, 1);
 80011da:	f107 010f 	add.w	r1, r7, #15
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	2201      	movs	r2, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f860 	bl	80012a8 <__spi_read>
	return data;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <rf_write_data>:
		addr = READ(addr);
	}
	__spi_read(&addr, data, size);
}

void rf_write_data(uint8_t addr, uint8_t* data, uint8_t size){
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	6039      	str	r1, [r7, #0]
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	4613      	mov	r3, r2
 8001200:	71bb      	strb	r3, [r7, #6]
	 * @brief Writes multiple data.
	 * @param addr Base address.
	 * @param data The buffer where the data to be written is located.
	 * @param size Number of bytes to be written.
	 */
	if(size>1){
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d905      	bls.n	8001214 <rf_write_data+0x22>
		addr = WRITE_BURST(addr);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120e:	b2db      	uxtb	r3, r3
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	e001      	b.n	8001218 <rf_write_data+0x26>
	}else{
		addr = WRITE(addr);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	71fb      	strb	r3, [r7, #7]
	}
	__spi_write(&addr, data, size);
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	b29a      	uxth	r2, r3
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f805 	bl	8001230 <__spi_write>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <__spi_write>:

/* SPI Handling -------------------------------------------------------------*/

HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <__spi_write+0x6c>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <__spi_write+0x70>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	f000 fd00 	bl	8001c4e <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <__spi_write+0x74>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001256:	2201      	movs	r2, #1
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	f001 f9a6 	bl	80025aa <HAL_SPI_Transmit>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]
	if(status==HAL_OK && pData!=NULL)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10c      	bne.n	8001282 <__spi_write+0x52>
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <__spi_write+0x52>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <__spi_write+0x74>)
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	f001 f996 	bl	80025aa <HAL_SPI_Transmit>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <__spi_write+0x6c>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <__spi_write+0x70>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	f000 fcde 	bl	8001c4e <HAL_GPIO_WritePin>
	return status;
 8001292:	7dfb      	ldrb	r3, [r7, #23]

}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000268 	.word	0x20000268
 80012a0:	20000272 	.word	0x20000272
 80012a4:	2000026c 	.word	0x2000026c

080012a8 <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <__spi_read+0x60>)
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <__spi_read+0x64>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	f000 fcc4 	bl	8001c4e <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <__spi_read+0x68>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	2201      	movs	r2, #1
 80012d0:	68f9      	ldr	r1, [r7, #12]
 80012d2:	f001 f96a 	bl	80025aa <HAL_SPI_Transmit>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <__spi_read+0x68>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	f001 fa94 	bl	8002812 <HAL_SPI_Receive>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <__spi_read+0x60>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <__spi_read+0x64>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4619      	mov	r1, r3
 80012fa:	f000 fca8 	bl	8001c4e <HAL_GPIO_WritePin>

	return status;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]

}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000268 	.word	0x20000268
 800130c:	20000272 	.word	0x20000272
 8001310:	2000026c 	.word	0x2000026c

08001314 <HAL_GPIO_EXTI_Callback>:

/* Interrupts ---------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
	/*
	if (GPIO_Pin == GPIO_PIN_15)
		TX_RX_BEGAN = 1;
	*/
	if(GPIO_Pin == GDO0_Pin){
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_GPIO_EXTI_Callback+0x24>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	88fa      	ldrh	r2, [r7, #6]
 8001324:	429a      	cmp	r2, r3
 8001326:	d102      	bne.n	800132e <HAL_GPIO_EXTI_Callback+0x1a>
		GDO0_FLAG = 1;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <HAL_GPIO_EXTI_Callback+0x28>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
	}
	/*
	if(GPIO_Pin == CS_Pin){ //User B1 Button (the blue one on F446ZE)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
	}*/
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000270 	.word	0x20000270
 800133c:	20000181 	.word	0x20000181

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_MspInit+0x5c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_MspInit+0x5c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_MspInit+0x5c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_MspInit+0x5c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x60>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_MspInit+0x60>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_SPI_MspInit+0x88>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d12f      	bne.n	8001424 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_SPI_MspInit+0x8c>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_SPI_MspInit+0x8c>)
 80013ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_SPI_MspInit+0x8c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_SPI_MspInit+0x8c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_SPI_MspInit+0x8c>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_SPI_MspInit+0x8c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013f4:	23a0      	movs	r3, #160	; 0xa0
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <HAL_SPI_MspInit+0x90>)
 8001408:	f000 fab0 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800140c:	2340      	movs	r3, #64	; 0x40
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <HAL_SPI_MspInit+0x90>)
 8001420:	f000 faa4 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013000 	.word	0x40013000
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d113      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_TIM_Base_MspInit+0x48>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <HAL_TIM_Base_MspInit+0x48>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_TIM_Base_MspInit+0x48>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2102      	movs	r1, #2
 8001466:	201e      	movs	r0, #30
 8001468:	f000 fa49 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800146c:	201e      	movs	r0, #30
 800146e:	f000 fa62 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40000800 	.word	0x40000800
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d131      	bne.n	8001508 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <HAL_UART_MspInit+0x94>)
 80014ea:	f000 fa3f 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_UART_MspInit+0x94>)
 8001504:	f000 fa32 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013800 	.word	0x40013800
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <HardFault_Handler+0x4>

0800152e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <BusFault_Handler+0x4>

0800153a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <UsageFault_Handler+0x4>

08001540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f8b4 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001574:	2008      	movs	r0, #8
 8001576:	f000 fb83 	bl	8001c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM4_IRQHandler+0x10>)
 8001586:	f001 fd17 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000188 	.word	0x20000188

08001594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <SystemInit+0x5c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <SystemInit+0x5c>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <SystemInit+0x5c>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4911      	ldr	r1, [pc, #68]	; (80015f0 <SystemInit+0x5c>)
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <SystemInit+0x60>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <SystemInit+0x5c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <SystemInit+0x5c>)
 80015b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <SystemInit+0x5c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SystemInit+0x5c>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <SystemInit+0x5c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <SystemInit+0x5c>)
 80015d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SystemInit+0x5c>)
 80015da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SystemInit+0x64>)
 80015e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	f8ff0000 	.word	0xf8ff0000
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <Reset_Handler>:
 80015fc:	2100      	movs	r1, #0
 80015fe:	e003      	b.n	8001608 <LoopCopyDataInit>

08001600 <CopyDataInit>:
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <LoopFillZerobss+0x14>)
 8001602:	585b      	ldr	r3, [r3, r1]
 8001604:	5043      	str	r3, [r0, r1]
 8001606:	3104      	adds	r1, #4

08001608 <LoopCopyDataInit>:
 8001608:	480a      	ldr	r0, [pc, #40]	; (8001634 <LoopFillZerobss+0x18>)
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <LoopFillZerobss+0x1c>)
 800160c:	1842      	adds	r2, r0, r1
 800160e:	429a      	cmp	r2, r3
 8001610:	d3f6      	bcc.n	8001600 <CopyDataInit>
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopFillZerobss+0x20>)
 8001614:	e002      	b.n	800161c <LoopFillZerobss>

08001616 <FillZerobss>:
 8001616:	2300      	movs	r3, #0
 8001618:	f842 3b04 	str.w	r3, [r2], #4

0800161c <LoopFillZerobss>:
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <LoopFillZerobss+0x24>)
 800161e:	429a      	cmp	r2, r3
 8001620:	d3f9      	bcc.n	8001616 <FillZerobss>
 8001622:	f7ff ffb7 	bl	8001594 <SystemInit>
 8001626:	f002 f921 	bl	800386c <__libc_init_array>
 800162a:	f7ff f9b7 	bl	800099c <main>
 800162e:	4770      	bx	lr
 8001630:	08003910 	.word	0x08003910
 8001634:	20000000 	.word	0x20000000
 8001638:	2000015c 	.word	0x2000015c
 800163c:	2000015c 	.word	0x2000015c
 8001640:	20000278 	.word	0x20000278

08001644 <ADC1_2_IRQHandler>:
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x28>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f945 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fe6c 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f95d 	bl	8001952 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b0:	f000 f925 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000150 	.word	0x20000150
 80016cc:	20000158 	.word	0x20000158
 80016d0:	20000154 	.word	0x20000154

080016d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_IncTick+0x20>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000158 	.word	0x20000158
 80016f4:	20000274 	.word	0x20000274

080016f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000274 	.word	0x20000274

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fff0 	bl	80016f8 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_Delay+0x40>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffe0 	bl	80016f8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000158 	.word	0x20000158

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4906      	ldr	r1, [pc, #24]	; (80017e8 <__NVIC_EnableIRQ+0x34>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c8:	f7ff ff90 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff2d 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff42 	bl	8001798 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff90 	bl	8001840 <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5f 	bl	80017ec <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff35 	bl	80017b4 <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e127      	b.n	8001bd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001980:	2201      	movs	r2, #1
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8116 	bne.w	8001bca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d034      	beq.n	8001a10 <HAL_GPIO_Init+0xa4>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d80d      	bhi.n	80019c6 <HAL_GPIO_Init+0x5a>
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x9a>
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d804      	bhi.n	80019bc <HAL_GPIO_Init+0x50>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d031      	beq.n	8001a1a <HAL_GPIO_Init+0xae>
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d01c      	beq.n	80019f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ba:	e048      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d043      	beq.n	8001a48 <HAL_GPIO_Init+0xdc>
 80019c0:	2b11      	cmp	r3, #17
 80019c2:	d01b      	beq.n	80019fc <HAL_GPIO_Init+0x90>
          break;
 80019c4:	e043      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019c6:	4a89      	ldr	r2, [pc, #548]	; (8001bec <HAL_GPIO_Init+0x280>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d026      	beq.n	8001a1a <HAL_GPIO_Init+0xae>
 80019cc:	4a87      	ldr	r2, [pc, #540]	; (8001bec <HAL_GPIO_Init+0x280>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d806      	bhi.n	80019e0 <HAL_GPIO_Init+0x74>
 80019d2:	4a87      	ldr	r2, [pc, #540]	; (8001bf0 <HAL_GPIO_Init+0x284>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d020      	beq.n	8001a1a <HAL_GPIO_Init+0xae>
 80019d8:	4a86      	ldr	r2, [pc, #536]	; (8001bf4 <HAL_GPIO_Init+0x288>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01d      	beq.n	8001a1a <HAL_GPIO_Init+0xae>
          break;
 80019de:	e036      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019e0:	4a85      	ldr	r2, [pc, #532]	; (8001bf8 <HAL_GPIO_Init+0x28c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d019      	beq.n	8001a1a <HAL_GPIO_Init+0xae>
 80019e6:	4a85      	ldr	r2, [pc, #532]	; (8001bfc <HAL_GPIO_Init+0x290>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d016      	beq.n	8001a1a <HAL_GPIO_Init+0xae>
 80019ec:	4a84      	ldr	r2, [pc, #528]	; (8001c00 <HAL_GPIO_Init+0x294>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0xae>
          break;
 80019f2:	e02c      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e028      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	3304      	adds	r3, #4
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e023      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e01e      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	330c      	adds	r3, #12
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e019      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a22:	2304      	movs	r3, #4
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e012      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a30:	2308      	movs	r3, #8
 8001a32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	611a      	str	r2, [r3, #16]
          break;
 8001a3a:	e008      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	615a      	str	r2, [r3, #20]
          break;
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2bff      	cmp	r3, #255	; 0xff
 8001a52:	d801      	bhi.n	8001a58 <HAL_GPIO_Init+0xec>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	e001      	b.n	8001a5c <HAL_GPIO_Init+0xf0>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2bff      	cmp	r3, #255	; 0xff
 8001a62:	d802      	bhi.n	8001a6a <HAL_GPIO_Init+0xfe>
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_Init+0x104>
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	3b08      	subs	r3, #8
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	210f      	movs	r1, #15
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	401a      	ands	r2, r3
 8001a82:	6a39      	ldr	r1, [r7, #32]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8096 	beq.w	8001bca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_GPIO_Init+0x298>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_GPIO_Init+0x298>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HAL_GPIO_Init+0x298>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ab6:	4a54      	ldr	r2, [pc, #336]	; (8001c08 <HAL_GPIO_Init+0x29c>)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_GPIO_Init+0x2a0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x19e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4a      	ldr	r2, [pc, #296]	; (8001c10 <HAL_GPIO_Init+0x2a4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x19a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a49      	ldr	r2, [pc, #292]	; (8001c14 <HAL_GPIO_Init+0x2a8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x196>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a48      	ldr	r2, [pc, #288]	; (8001c18 <HAL_GPIO_Init+0x2ac>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x192>
 8001afa:	2303      	movs	r3, #3
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x1a0>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x1a0>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x1a0>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x1a0>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1c:	493a      	ldr	r1, [pc, #232]	; (8001c08 <HAL_GPIO_Init+0x29c>)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4938      	ldr	r1, [pc, #224]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b44:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	4933      	ldr	r1, [pc, #204]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	492e      	ldr	r1, [pc, #184]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
 8001b6a:	e006      	b.n	8001b7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4929      	ldr	r1, [pc, #164]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	4924      	ldr	r1, [pc, #144]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
 8001b92:	e006      	b.n	8001ba2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b94:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	491f      	ldr	r1, [pc, #124]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	491a      	ldr	r1, [pc, #104]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60cb      	str	r3, [r1, #12]
 8001bba:	e006      	b.n	8001bca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4915      	ldr	r1, [pc, #84]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f aed0 	bne.w	8001980 <HAL_GPIO_Init+0x14>
  }
}
 8001be0:	bf00      	nop
 8001be2:	372c      	adds	r7, #44	; 0x2c
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	10210000 	.word	0x10210000
 8001bf0:	10110000 	.word	0x10110000
 8001bf4:	10120000 	.word	0x10120000
 8001bf8:	10310000 	.word	0x10310000
 8001bfc:	10320000 	.word	0x10320000
 8001c00:	10220000 	.word	0x10220000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40011400 	.word	0x40011400
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e001      	b.n	8001c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	807b      	strh	r3, [r7, #2]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5e:	787b      	ldrb	r3, [r7, #1]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c6a:	e003      	b.n	8001c74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fb38 	bl	8001314 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e26c      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d112      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x12c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d168      	bne.n	8001ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e246      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76>
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7f      	ldr	r2, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e02e      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0xbc>
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a71      	ldr	r2, [pc, #452]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d6c:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6a      	ldr	r2, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fcb4 	bl	80016f8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fcb0 	bl	80016f8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1fa      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe4>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fca0 	bl	80016f8 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fc9c 	bl	80016f8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1e6      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x10c>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1ba      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e03a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fc55 	bl	80016f8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7ff fc51 	bl	80016f8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e19b      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fc34 	bl	80016f8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff fc30 	bl	80016f8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e17a      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03a      	beq.n	8001f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d019      	beq.n	8001efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fc14 	bl	80016f8 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fc10 	bl	80016f8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e15a      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 fada 	bl	80024ac <RCC_Delay>
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7ff fbfa 	bl	80016f8 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fbf6 	bl	80016f8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e140      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	42420000 	.word	0x42420000
 8001f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b9e      	ldr	r3, [pc, #632]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e9      	bne.n	8001f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a6 	beq.w	800208e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b97      	ldr	r3, [pc, #604]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a93      	ldr	r2, [pc, #588]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b8e      	ldr	r3, [pc, #568]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a8a      	ldr	r2, [pc, #552]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fbb7 	bl	80016f8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fbb3 	bl	80016f8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0fd      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x312>
 8001fb4:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a7a      	ldr	r2, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x334>
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x356>
 8001fec:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a6c      	ldr	r2, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a63      	ldr	r2, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff fb67 	bl	80016f8 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fb63 	bl	80016f8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0ab      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x37e>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7ff fb51 	bl	80016f8 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7ff fb4d 	bl	80016f8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e095      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8081 	beq.w	800219a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d061      	beq.n	8002168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d146      	bne.n	800213a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fb21 	bl	80016f8 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fb1d 	bl	80016f8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e067      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020e2:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a19      	ldr	r1, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	430b      	orrs	r3, r1
 8002106:	4927      	ldr	r1, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff faf1 	bl	80016f8 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7ff faed 	bl	80016f8 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e037      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x46a>
 8002138:	e02f      	b.n	800219a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_RCC_OscConfig+0x4fc>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fada 	bl	80016f8 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7ff fad6 	bl	80016f8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e020      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x498>
 8002166:	e018      	b.n	800219a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e013      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	429a      	cmp	r2, r3
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060

080021b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0d0      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d910      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b67      	ldr	r3, [pc, #412]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 0207 	bic.w	r2, r3, #7
 80021da:	4965      	ldr	r1, [pc, #404]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800222e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d040      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d115      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e073      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06b      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4936      	ldr	r1, [pc, #216]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7ff fa2a 	bl	80016f8 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7ff fa26 	bl	80016f8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e053      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d210      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4922      	ldr	r1, [pc, #136]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f821 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8002342:	4601      	mov	r1, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	fa21 f303 	lsr.w	r3, r1, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1cc>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f988 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	080038f0 	.word	0x080038f0
 800237c:	20000150 	.word	0x20000150
 8002380:	20000154 	.word	0x20000154

08002384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b490      	push	{r4, r7}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb0>)
 800238c:	1d3c      	adds	r4, r7, #4
 800238e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002394:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x40>
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x46>
 80023c2:	e02d      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c6:	623b      	str	r3, [r7, #32]
      break;
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023d6:	4413      	add	r3, r2
 80023d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0c5b      	lsrs	r3, r3, #17
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023f6:	4413      	add	r3, r2
 80023f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002402:	fb02 f203 	mul.w	r2, r2, r3
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	e004      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	623b      	str	r3, [r7, #32]
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002422:	623b      	str	r3, [r7, #32]
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	6a3b      	ldr	r3, [r7, #32]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bc90      	pop	{r4, r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	080038dc 	.word	0x080038dc
 8002438:	080038ec 	.word	0x080038ec
 800243c:	40021000 	.word	0x40021000
 8002440:	007a1200 	.word	0x007a1200
 8002444:	003d0900 	.word	0x003d0900

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_RCC_GetHCLKFreq+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	20000150 	.word	0x20000150

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002460:	f7ff fff2 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	08003900 	.word	0x08003900

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002488:	f7ff ffde 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 800248c:	4601      	mov	r1, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	0adb      	lsrs	r3, r3, #11
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08003900 	.word	0x08003900

080024ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <RCC_Delay+0x34>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <RCC_Delay+0x38>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a5b      	lsrs	r3, r3, #9
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c8:	bf00      	nop
  }
  while (Delay --);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	60fa      	str	r2, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <RCC_Delay+0x1c>
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000150 	.word	0x20000150
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e053      	b.n	80025a2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fe ff45 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002530:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	ea42 0103 	orr.w	r1, r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	0c1a      	lsrs	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f002 0204 	and.w	r2, r2, #4
 8002580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b088      	sub	sp, #32
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_SPI_Transmit+0x22>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e11e      	b.n	800280a <HAL_SPI_Transmit+0x260>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025d4:	f7ff f890 	bl	80016f8 <HAL_GetTick>
 80025d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d002      	beq.n	80025f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ee:	e103      	b.n	80027f8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_SPI_Transmit+0x52>
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002600:	e0fa      	b.n	80027f8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002648:	d107      	bne.n	800265a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d007      	beq.n	8002678 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d14b      	bne.n	800271a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_SPI_Transmit+0xe6>
 800268a:	8afb      	ldrh	r3, [r7, #22]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d13e      	bne.n	800270e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026b4:	e02b      	b.n	800270e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d112      	bne.n	80026ea <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	881a      	ldrh	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	1c9a      	adds	r2, r3, #2
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80026e8:	e011      	b.n	800270e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ea:	f7ff f805 	bl	80016f8 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d803      	bhi.n	8002702 <HAL_SPI_Transmit+0x158>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002700:	d102      	bne.n	8002708 <HAL_SPI_Transmit+0x15e>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800270c:	e074      	b.n	80027f8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ce      	bne.n	80026b6 <HAL_SPI_Transmit+0x10c>
 8002718:	e04c      	b.n	80027b4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_SPI_Transmit+0x17e>
 8002722:	8afb      	ldrh	r3, [r7, #22]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d140      	bne.n	80027aa <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800274e:	e02c      	b.n	80027aa <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d113      	bne.n	8002786 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	86da      	strh	r2, [r3, #54]	; 0x36
 8002784:	e011      	b.n	80027aa <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002786:	f7fe ffb7 	bl	80016f8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d803      	bhi.n	800279e <HAL_SPI_Transmit+0x1f4>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279c:	d102      	bne.n	80027a4 <HAL_SPI_Transmit+0x1fa>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027a8:	e026      	b.n	80027f8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1cd      	bne.n	8002750 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fb91 	bl	8002ee0 <SPI_EndRxTxTransaction>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	77fb      	strb	r3, [r7, #31]
 80027f4:	e000      	b.n	80027f8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80027f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002808:	7ffb      	ldrb	r3, [r7, #31]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b088      	sub	sp, #32
 8002816:	af02      	add	r7, sp, #8
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282e:	d112      	bne.n	8002856 <HAL_SPI_Receive+0x44>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10e      	bne.n	8002856 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2204      	movs	r2, #4
 800283c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f8e9 	bl	8002a24 <HAL_SPI_TransmitReceive>
 8002852:	4603      	mov	r3, r0
 8002854:	e0e2      	b.n	8002a1c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_SPI_Receive+0x52>
 8002860:	2302      	movs	r3, #2
 8002862:	e0db      	b.n	8002a1c <HAL_SPI_Receive+0x20a>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800286c:	f7fe ff44 	bl	80016f8 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d002      	beq.n	8002884 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800287e:	2302      	movs	r3, #2
 8002880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002882:	e0c2      	b.n	8002a0a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_SPI_Receive+0x7e>
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002894:	e0b9      	b.n	8002a0a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2204      	movs	r2, #4
 800289a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028dc:	d107      	bne.n	80028ee <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d007      	beq.n	800290c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d162      	bne.n	80029da <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002914:	e02e      	b.n	8002974 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d115      	bne.n	8002950 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f103 020c 	add.w	r2, r3, #12
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800294e:	e011      	b.n	8002974 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002950:	f7fe fed2 	bl	80016f8 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d803      	bhi.n	8002968 <HAL_SPI_Receive+0x156>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002966:	d102      	bne.n	800296e <HAL_SPI_Receive+0x15c>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002972:	e04a      	b.n	8002a0a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1cb      	bne.n	8002916 <HAL_SPI_Receive+0x104>
 800297e:	e031      	b.n	80029e4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d113      	bne.n	80029b6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	b292      	uxth	r2, r2
 800299a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029b4:	e011      	b.n	80029da <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b6:	f7fe fe9f 	bl	80016f8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d803      	bhi.n	80029ce <HAL_SPI_Receive+0x1bc>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029cc:	d102      	bne.n	80029d4 <HAL_SPI_Receive+0x1c2>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029d8:	e017      	b.n	8002a0a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1cd      	bne.n	8002980 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	6839      	ldr	r1, [r7, #0]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fa27 	bl	8002e3c <SPI_EndRxTransaction>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
 8002a06:	e000      	b.n	8002a0a <HAL_SPI_Receive+0x1f8>
  }

error :
 8002a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a32:	2301      	movs	r3, #1
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_SPI_TransmitReceive+0x26>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e18a      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x33c>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a52:	f7fe fe51 	bl	80016f8 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a68:	887b      	ldrh	r3, [r7, #2]
 8002a6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d00f      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x70>
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a7a:	d107      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x68>
 8002a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d003      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a92:	e15b      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x82>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x82>
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aac:	e14e      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d003      	beq.n	8002ac2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2205      	movs	r2, #5
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d007      	beq.n	8002b16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1e:	d178      	bne.n	8002c12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_SPI_TransmitReceive+0x10a>
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d166      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	881a      	ldrh	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b52:	e053      	b.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d11b      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x176>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d016      	beq.n	8002b9a <HAL_SPI_TransmitReceive+0x176>
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d113      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	1c9a      	adds	r2, r3, #2
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d119      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x1b8>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d014      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	1c9a      	adds	r2, r3, #2
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bdc:	f7fe fd8c 	bl	80016f8 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d807      	bhi.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf2:	d003      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bfa:	e0a7      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1a6      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x130>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1a1      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x130>
 8002c10:	e07c      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x1fc>
 8002c1a:	8b7b      	ldrh	r3, [r7, #26]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d16b      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	7812      	ldrb	r2, [r2, #0]
 8002c2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c46:	e057      	b.n	8002cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d11c      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x26c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x26c>
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d114      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d119      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x2ae>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d014      	beq.n	8002cd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cd2:	f7fe fd11 	bl	80016f8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d803      	bhi.n	8002cea <HAL_SPI_TransmitReceive+0x2c6>
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce8:	d102      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x2cc>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cf6:	e029      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1a2      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x224>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d19d      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f8e5 	bl	8002ee0 <SPI_EndRxTxTransaction>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d28:	e010      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	e000      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3730      	adds	r7, #48	; 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d78:	e04c      	b.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d80:	d048      	beq.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d82:	f7fe fcb9 	bl	80016f8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d902      	bls.n	8002d98 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d13d      	bne.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002da6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db0:	d111      	bne.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	d004      	beq.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d107      	bne.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	d10f      	bne.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e00f      	b.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d1a3      	bne.n	8002d7a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e50:	d111      	bne.n	8002e76 <SPI_EndRxTransaction+0x3a>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5a:	d004      	beq.n	8002e66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d107      	bne.n	8002e76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e74:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7e:	d117      	bne.n	8002eb0 <SPI_EndRxTransaction+0x74>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d112      	bne.n	8002eb0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2101      	movs	r1, #1
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff ff67 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01a      	beq.n	8002ed6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e013      	b.n	8002ed8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ff54 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e000      	b.n	8002ed8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff36 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e000      	b.n	8002f14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e01d      	b.n	8002f6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fa78 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fa10 	bl	8003380 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	d007      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0202 	mvn.w	r2, #2
 8002fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f9a4 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f997 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f9a6 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0204 	mvn.w	r2, #4
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f97a 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f96d 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f97c 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b08      	cmp	r3, #8
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0208 	mvn.w	r2, #8
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f950 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f943 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f952 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0210 	mvn.w	r2, #16
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2208      	movs	r2, #8
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f926 	bl	8003348 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f919 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f928 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0201 	mvn.w	r2, #1
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fe04 	bl	8000d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa51 	bl	800360a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8ec 	bl	800336c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0220 	mvn.w	r2, #32
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa1c 	bl	80035f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_ConfigClockSource+0x18>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0a6      	b.n	800332e <HAL_TIM_ConfigClockSource+0x166>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003206:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d067      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x120>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d80b      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x6c>
 800321c:	2b10      	cmp	r3, #16
 800321e:	d073      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x140>
 8003220:	2b10      	cmp	r3, #16
 8003222:	d802      	bhi.n	800322a <HAL_TIM_ConfigClockSource+0x62>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d06f      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003228:	e078      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800322a:	2b20      	cmp	r3, #32
 800322c:	d06c      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x140>
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d06a      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003232:	e073      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003234:	2b70      	cmp	r3, #112	; 0x70
 8003236:	d00d      	beq.n	8003254 <HAL_TIM_ConfigClockSource+0x8c>
 8003238:	2b70      	cmp	r3, #112	; 0x70
 800323a:	d804      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x7e>
 800323c:	2b50      	cmp	r3, #80	; 0x50
 800323e:	d033      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0xe0>
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d041      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003244:	e06a      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d066      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x152>
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d017      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003252:	e063      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f000 f965 	bl	8003532 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003276:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
      break;
 8003280:	e04c      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6899      	ldr	r1, [r3, #8]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f000 f94e 	bl	8003532 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a4:	609a      	str	r2, [r3, #8]
      break;
 80032a6:	e039      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f000 f8c5 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2150      	movs	r1, #80	; 0x50
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f91c 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 80032c6:	e029      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f000 f8e3 	bl	80034a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2160      	movs	r1, #96	; 0x60
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f90c 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 80032e6:	e019      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f000 f8a5 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f8fc 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 8003306:	e009      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 f8f3 	bl	80034fe <TIM_ITRx_SetConfig>
      break;
 8003318:	e000      	b.n	800331c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800331a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
	...

08003380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a29      	ldr	r2, [pc, #164]	; (8003438 <TIM_Base_SetConfig+0xb8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00b      	beq.n	80033b0 <TIM_Base_SetConfig+0x30>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d007      	beq.n	80033b0 <TIM_Base_SetConfig+0x30>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a26      	ldr	r2, [pc, #152]	; (800343c <TIM_Base_SetConfig+0xbc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0x30>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a25      	ldr	r2, [pc, #148]	; (8003440 <TIM_Base_SetConfig+0xc0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <TIM_Base_SetConfig+0xb8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0x62>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0x62>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <TIM_Base_SetConfig+0xbc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0x62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <TIM_Base_SetConfig+0xc0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <TIM_Base_SetConfig+0xb8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	615a      	str	r2, [r3, #20]
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800

08003444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0201 	bic.w	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f023 030a 	bic.w	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f023 0210 	bic.w	r2, r3, #16
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	031b      	lsls	r3, r3, #12
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	f043 0307 	orr.w	r3, r3, #7
 8003520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003532:	b480      	push	{r7}
 8003534:	b087      	sub	sp, #28
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	431a      	orrs	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	609a      	str	r2, [r3, #8]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e032      	b.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e03f      	b.n	80036ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd ff1e 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800365e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f829 	bl	80036b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036f2:	f023 030c 	bic.w	r3, r3, #12
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a52      	ldr	r2, [pc, #328]	; (8003864 <UART_SetConfig+0x1ac>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d14e      	bne.n	80037be <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003720:	f7fe feb0 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8003724:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <UART_SetConfig+0x1b0>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	0119      	lsls	r1, r3, #4
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <UART_SetConfig+0x1b0>)
 800375e:	fba3 0302 	umull	r0, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2064      	movs	r0, #100	; 0x64
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <UART_SetConfig+0x1b0>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377c:	4419      	add	r1, r3
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009a      	lsls	r2, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fbb2 f2f3 	udiv	r2, r2, r3
 8003794:	4b34      	ldr	r3, [pc, #208]	; (8003868 <UART_SetConfig+0x1b0>)
 8003796:	fba3 0302 	umull	r0, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2064      	movs	r0, #100	; 0x64
 800379e:	fb00 f303 	mul.w	r3, r0, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <UART_SetConfig+0x1b0>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	440a      	add	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80037bc:	e04d      	b.n	800385a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80037be:	f7fe fe4d 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80037c2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	009a      	lsls	r2, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	4a23      	ldr	r2, [pc, #140]	; (8003868 <UART_SetConfig+0x1b0>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	0119      	lsls	r1, r3, #4
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009a      	lsls	r2, r3, #2
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <UART_SetConfig+0x1b0>)
 80037fc:	fba3 0302 	umull	r0, r3, r3, r2
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	2064      	movs	r0, #100	; 0x64
 8003804:	fb00 f303 	mul.w	r3, r0, r3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	3332      	adds	r3, #50	; 0x32
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <UART_SetConfig+0x1b0>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381a:	4419      	add	r1, r3
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <UART_SetConfig+0x1b0>)
 8003834:	fba3 0302 	umull	r0, r3, r3, r2
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	2064      	movs	r0, #100	; 0x64
 800383c:	fb00 f303 	mul.w	r3, r0, r3
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	3332      	adds	r3, #50	; 0x32
 8003846:	4a08      	ldr	r2, [pc, #32]	; (8003868 <UART_SetConfig+0x1b0>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	f003 020f 	and.w	r2, r3, #15
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	440a      	add	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40013800 	.word	0x40013800
 8003868:	51eb851f 	.word	0x51eb851f

0800386c <__libc_init_array>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	2500      	movs	r5, #0
 8003870:	4e0c      	ldr	r6, [pc, #48]	; (80038a4 <__libc_init_array+0x38>)
 8003872:	4c0d      	ldr	r4, [pc, #52]	; (80038a8 <__libc_init_array+0x3c>)
 8003874:	1ba4      	subs	r4, r4, r6
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	42a5      	cmp	r5, r4
 800387a:	d109      	bne.n	8003890 <__libc_init_array+0x24>
 800387c:	f000 f822 	bl	80038c4 <_init>
 8003880:	2500      	movs	r5, #0
 8003882:	4e0a      	ldr	r6, [pc, #40]	; (80038ac <__libc_init_array+0x40>)
 8003884:	4c0a      	ldr	r4, [pc, #40]	; (80038b0 <__libc_init_array+0x44>)
 8003886:	1ba4      	subs	r4, r4, r6
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	42a5      	cmp	r5, r4
 800388c:	d105      	bne.n	800389a <__libc_init_array+0x2e>
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003894:	4798      	blx	r3
 8003896:	3501      	adds	r5, #1
 8003898:	e7ee      	b.n	8003878 <__libc_init_array+0xc>
 800389a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800389e:	4798      	blx	r3
 80038a0:	3501      	adds	r5, #1
 80038a2:	e7f2      	b.n	800388a <__libc_init_array+0x1e>
 80038a4:	08003908 	.word	0x08003908
 80038a8:	08003908 	.word	0x08003908
 80038ac:	08003908 	.word	0x08003908
 80038b0:	0800390c 	.word	0x0800390c

080038b4 <memset>:
 80038b4:	4603      	mov	r3, r0
 80038b6:	4402      	add	r2, r0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d100      	bne.n	80038be <memset+0xa>
 80038bc:	4770      	bx	lr
 80038be:	f803 1b01 	strb.w	r1, [r3], #1
 80038c2:	e7f9      	b.n	80038b8 <memset+0x4>

080038c4 <_init>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	bf00      	nop
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr

080038d0 <_fini>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr
